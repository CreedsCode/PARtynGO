"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@near-wallet-selector+core@8.7.1_near-api-js@2.1.4";
exports.ids = ["vendor-chunks/@near-wallet-selector+core@8.7.1_near-api-js@2.1.4"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@near-wallet-selector+core@8.7.1_near-api-js@2.1.4/node_modules/@near-wallet-selector/core/index.cjs":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-wallet-selector+core@8.7.1_near-api-js@2.1.4/node_modules/@near-wallet-selector/core/index.cjs ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar nearAPI = __webpack_require__(/*! near-api-js */ \"(ssr)/./node_modules/.pnpm/near-api-js@2.1.4/node_modules/near-api-js/lib/index.js\");\nvar events = __webpack_require__(/*! events */ \"events\");\nvar rxjs = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/index.js\");\nvar borsh = __webpack_require__(/*! borsh */ \"(ssr)/./node_modules/.pnpm/borsh@0.7.0/node_modules/borsh/lib/index.js\");\nvar jsSha256 = __webpack_require__(/*! js-sha256 */ \"(ssr)/./node_modules/.pnpm/js-sha256@0.9.0/node_modules/js-sha256/src/sha256.js\");\n\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function (k) {\n            if (k !== 'default') {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function () { return e[k]; }\n                });\n            }\n        });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n}\n\nvar nearAPI__namespace = /*#__PURE__*/_interopNamespace(nearAPI);\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nclass Provider {\n  constructor(url) {\n    this.provider = new nearAPI__namespace.providers.JsonRpcProvider({\n      url\n    });\n  }\n  query(params) {\n    return this.provider.query(params);\n  }\n  viewAccessKey({\n    accountId,\n    publicKey\n  }) {\n    return this.query({\n      request_type: \"view_access_key\",\n      finality: \"final\",\n      account_id: accountId,\n      public_key: publicKey\n    });\n  }\n  block(reference) {\n    return this.provider.block(reference);\n  }\n  sendTransaction(signedTransaction) {\n    return this.provider.sendTransaction(signedTransaction);\n  }\n}\n\nconst KEY_DELIMITER = \":\";\nclass JsonStorage {\n  constructor(storage, namespace) {\n    this.storage = storage;\n    this.namespace = Array.isArray(namespace) ? namespace.join(KEY_DELIMITER) : namespace;\n  }\n  resolveKey(key) {\n    return [this.namespace, key].join(KEY_DELIMITER);\n  }\n  getItem(key) {\n    return this.storage.getItem(this.resolveKey(key)).then(item => {\n      return typeof item === \"string\" ? JSON.parse(item) : null;\n    });\n  }\n  setItem(key, value) {\n    return this.storage.setItem(this.resolveKey(key), JSON.stringify(value));\n  }\n  removeItem(key) {\n    return this.storage.removeItem(this.resolveKey(key));\n  }\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nvar check = function (it) {\n  return it && it.Math == Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global$t =\n  // eslint-disable-next-line es-x/no-global-this -- safe\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  // eslint-disable-next-line no-restricted-globals -- safe\n  check(typeof self == 'object' && self) ||\n  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||\n  // eslint-disable-next-line no-new-func -- fallback\n  (function () { return this; })() || Function('return this')();\n\nvar objectGetOwnPropertyDescriptor = {};\n\nvar fails$s = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n\nvar fails$r = fails$s;\n\n// Detect IE8's incomplete defineProperty implementation\nvar descriptors = !fails$r(function () {\n  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;\n});\n\nvar fails$q = fails$s;\n\nvar functionBindNative = !fails$q(function () {\n  // eslint-disable-next-line es-x/no-function-prototype-bind -- safe\n  var test = (function () { /* empty */ }).bind();\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return typeof test != 'function' || test.hasOwnProperty('prototype');\n});\n\nvar NATIVE_BIND$3 = functionBindNative;\n\nvar call$l = Function.prototype.call;\n\nvar functionCall = NATIVE_BIND$3 ? call$l.bind(call$l) : function () {\n  return call$l.apply(call$l, arguments);\n};\n\nvar objectPropertyIsEnumerable = {};\n\nvar $propertyIsEnumerable = {}.propertyIsEnumerable;\n// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe\nvar getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor$2 && !$propertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\nobjectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor$2(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : $propertyIsEnumerable;\n\nvar createPropertyDescriptor$5 = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\nvar NATIVE_BIND$2 = functionBindNative;\n\nvar FunctionPrototype$2 = Function.prototype;\nvar bind$7 = FunctionPrototype$2.bind;\nvar call$k = FunctionPrototype$2.call;\nvar uncurryThis$p = NATIVE_BIND$2 && bind$7.bind(call$k, call$k);\n\nvar functionUncurryThis = NATIVE_BIND$2 ? function (fn) {\n  return fn && uncurryThis$p(fn);\n} : function (fn) {\n  return fn && function () {\n    return call$k.apply(fn, arguments);\n  };\n};\n\nvar uncurryThis$o = functionUncurryThis;\n\nvar toString$7 = uncurryThis$o({}.toString);\nvar stringSlice$3 = uncurryThis$o(''.slice);\n\nvar classofRaw$1 = function (it) {\n  return stringSlice$3(toString$7(it), 8, -1);\n};\n\nvar uncurryThis$n = functionUncurryThis;\nvar fails$p = fails$s;\nvar classof$b = classofRaw$1;\n\nvar $Object$4 = Object;\nvar split = uncurryThis$n(''.split);\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar indexedObject = fails$p(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return !$Object$4('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof$b(it) == 'String' ? split(it, '') : $Object$4(it);\n} : $Object$4;\n\nvar $TypeError$f = TypeError;\n\n// `RequireObjectCoercible` abstract operation\n// https://tc39.es/ecma262/#sec-requireobjectcoercible\nvar requireObjectCoercible$6 = function (it) {\n  if (it == undefined) throw $TypeError$f(\"Can't call method on \" + it);\n  return it;\n};\n\n// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject$3 = indexedObject;\nvar requireObjectCoercible$5 = requireObjectCoercible$6;\n\nvar toIndexedObject$6 = function (it) {\n  return IndexedObject$3(requireObjectCoercible$5(it));\n};\n\n// `IsCallable` abstract operation\n// https://tc39.es/ecma262/#sec-iscallable\nvar isCallable$n = function (argument) {\n  return typeof argument == 'function';\n};\n\nvar isCallable$m = isCallable$n;\n\nvar isObject$d = function (it) {\n  return typeof it == 'object' ? it !== null : isCallable$m(it);\n};\n\nvar global$s = global$t;\nvar isCallable$l = isCallable$n;\n\nvar aFunction = function (argument) {\n  return isCallable$l(argument) ? argument : undefined;\n};\n\nvar getBuiltIn$8 = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(global$s[namespace]) : global$s[namespace] && global$s[namespace][method];\n};\n\nvar uncurryThis$m = functionUncurryThis;\n\nvar objectIsPrototypeOf = uncurryThis$m({}.isPrototypeOf);\n\nvar getBuiltIn$7 = getBuiltIn$8;\n\nvar engineUserAgent = getBuiltIn$7('navigator', 'userAgent') || '';\n\nvar global$r = global$t;\nvar userAgent$5 = engineUserAgent;\n\nvar process$3 = global$r.process;\nvar Deno$1 = global$r.Deno;\nvar versions = process$3 && process$3.versions || Deno$1 && Deno$1.version;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  // in old Chrome, versions of V8 isn't V8 = Chrome / 10\n  // but their correct versions are not interesting for us\n  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);\n}\n\n// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`\n// so check `userAgent` even if `.v8` exists, but 0\nif (!version && userAgent$5) {\n  match = userAgent$5.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent$5.match(/Chrome\\/(\\d+)/);\n    if (match) version = +match[1];\n  }\n}\n\nvar engineV8Version = version;\n\n/* eslint-disable es-x/no-symbol -- required for testing */\n\nvar V8_VERSION$1 = engineV8Version;\nvar fails$o = fails$s;\n\n// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- required for testing\nvar nativeSymbol = !!Object.getOwnPropertySymbols && !fails$o(function () {\n  var symbol = Symbol();\n  // Chrome 38 Symbol has incorrect toString conversion\n  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances\n  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||\n    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances\n    !Symbol.sham && V8_VERSION$1 && V8_VERSION$1 < 41;\n});\n\n/* eslint-disable es-x/no-symbol -- required for testing */\n\nvar NATIVE_SYMBOL$1 = nativeSymbol;\n\nvar useSymbolAsUid = NATIVE_SYMBOL$1\n  && !Symbol.sham\n  && typeof Symbol.iterator == 'symbol';\n\nvar getBuiltIn$6 = getBuiltIn$8;\nvar isCallable$k = isCallable$n;\nvar isPrototypeOf$4 = objectIsPrototypeOf;\nvar USE_SYMBOL_AS_UID$1 = useSymbolAsUid;\n\nvar $Object$3 = Object;\n\nvar isSymbol$3 = USE_SYMBOL_AS_UID$1 ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  var $Symbol = getBuiltIn$6('Symbol');\n  return isCallable$k($Symbol) && isPrototypeOf$4($Symbol.prototype, $Object$3(it));\n};\n\nvar $String$3 = String;\n\nvar tryToString$5 = function (argument) {\n  try {\n    return $String$3(argument);\n  } catch (error) {\n    return 'Object';\n  }\n};\n\nvar isCallable$j = isCallable$n;\nvar tryToString$4 = tryToString$5;\n\nvar $TypeError$e = TypeError;\n\n// `Assert: IsCallable(argument) is true`\nvar aCallable$9 = function (argument) {\n  if (isCallable$j(argument)) return argument;\n  throw $TypeError$e(tryToString$4(argument) + ' is not a function');\n};\n\nvar aCallable$8 = aCallable$9;\n\n// `GetMethod` abstract operation\n// https://tc39.es/ecma262/#sec-getmethod\nvar getMethod$4 = function (V, P) {\n  var func = V[P];\n  return func == null ? undefined : aCallable$8(func);\n};\n\nvar call$j = functionCall;\nvar isCallable$i = isCallable$n;\nvar isObject$c = isObject$d;\n\nvar $TypeError$d = TypeError;\n\n// `OrdinaryToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-ordinarytoprimitive\nvar ordinaryToPrimitive$1 = function (input, pref) {\n  var fn, val;\n  if (pref === 'string' && isCallable$i(fn = input.toString) && !isObject$c(val = call$j(fn, input))) return val;\n  if (isCallable$i(fn = input.valueOf) && !isObject$c(val = call$j(fn, input))) return val;\n  if (pref !== 'string' && isCallable$i(fn = input.toString) && !isObject$c(val = call$j(fn, input))) return val;\n  throw $TypeError$d(\"Can't convert object to primitive value\");\n};\n\nvar shared$4 = {exports: {}};\n\nvar global$q = global$t;\n\n// eslint-disable-next-line es-x/no-object-defineproperty -- safe\nvar defineProperty$7 = Object.defineProperty;\n\nvar defineGlobalProperty$3 = function (key, value) {\n  try {\n    defineProperty$7(global$q, key, { value: value, configurable: true, writable: true });\n  } catch (error) {\n    global$q[key] = value;\n  } return value;\n};\n\nvar global$p = global$t;\nvar defineGlobalProperty$2 = defineGlobalProperty$3;\n\nvar SHARED = '__core-js_shared__';\nvar store$3 = global$p[SHARED] || defineGlobalProperty$2(SHARED, {});\n\nvar sharedStore = store$3;\n\nvar store$2 = sharedStore;\n\n(shared$4.exports = function (key, value) {\n  return store$2[key] || (store$2[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.23.3',\n  mode: 'global',\n  copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',\n  license: 'https://github.com/zloirock/core-js/blob/v3.23.3/LICENSE',\n  source: 'https://github.com/zloirock/core-js'\n});\n\nvar requireObjectCoercible$4 = requireObjectCoercible$6;\n\nvar $Object$2 = Object;\n\n// `ToObject` abstract operation\n// https://tc39.es/ecma262/#sec-toobject\nvar toObject$7 = function (argument) {\n  return $Object$2(requireObjectCoercible$4(argument));\n};\n\nvar uncurryThis$l = functionUncurryThis;\nvar toObject$6 = toObject$7;\n\nvar hasOwnProperty = uncurryThis$l({}.hasOwnProperty);\n\n// `HasOwnProperty` abstract operation\n// https://tc39.es/ecma262/#sec-hasownproperty\n// eslint-disable-next-line es-x/no-object-hasown -- safe\nvar hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {\n  return hasOwnProperty(toObject$6(it), key);\n};\n\nvar uncurryThis$k = functionUncurryThis;\n\nvar id = 0;\nvar postfix = Math.random();\nvar toString$6 = uncurryThis$k(1.0.toString);\n\nvar uid$3 = function (key) {\n  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString$6(++id + postfix, 36);\n};\n\nvar global$o = global$t;\nvar shared$3 = shared$4.exports;\nvar hasOwn$b = hasOwnProperty_1;\nvar uid$2 = uid$3;\nvar NATIVE_SYMBOL = nativeSymbol;\nvar USE_SYMBOL_AS_UID = useSymbolAsUid;\n\nvar WellKnownSymbolsStore = shared$3('wks');\nvar Symbol$1 = global$o.Symbol;\nvar symbolFor = Symbol$1 && Symbol$1['for'];\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid$2;\n\nvar wellKnownSymbol$j = function (name) {\n  if (!hasOwn$b(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {\n    var description = 'Symbol.' + name;\n    if (NATIVE_SYMBOL && hasOwn$b(Symbol$1, name)) {\n      WellKnownSymbolsStore[name] = Symbol$1[name];\n    } else if (USE_SYMBOL_AS_UID && symbolFor) {\n      WellKnownSymbolsStore[name] = symbolFor(description);\n    } else {\n      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);\n    }\n  } return WellKnownSymbolsStore[name];\n};\n\nvar call$i = functionCall;\nvar isObject$b = isObject$d;\nvar isSymbol$2 = isSymbol$3;\nvar getMethod$3 = getMethod$4;\nvar ordinaryToPrimitive = ordinaryToPrimitive$1;\nvar wellKnownSymbol$i = wellKnownSymbol$j;\n\nvar $TypeError$c = TypeError;\nvar TO_PRIMITIVE = wellKnownSymbol$i('toPrimitive');\n\n// `ToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-toprimitive\nvar toPrimitive$2 = function (input, pref) {\n  if (!isObject$b(input) || isSymbol$2(input)) return input;\n  var exoticToPrim = getMethod$3(input, TO_PRIMITIVE);\n  var result;\n  if (exoticToPrim) {\n    if (pref === undefined) pref = 'default';\n    result = call$i(exoticToPrim, input, pref);\n    if (!isObject$b(result) || isSymbol$2(result)) return result;\n    throw $TypeError$c(\"Can't convert object to primitive value\");\n  }\n  if (pref === undefined) pref = 'number';\n  return ordinaryToPrimitive(input, pref);\n};\n\nvar toPrimitive$1 = toPrimitive$2;\nvar isSymbol$1 = isSymbol$3;\n\n// `ToPropertyKey` abstract operation\n// https://tc39.es/ecma262/#sec-topropertykey\nvar toPropertyKey$4 = function (argument) {\n  var key = toPrimitive$1(argument, 'string');\n  return isSymbol$1(key) ? key : key + '';\n};\n\nvar global$n = global$t;\nvar isObject$a = isObject$d;\n\nvar document$3 = global$n.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS$1 = isObject$a(document$3) && isObject$a(document$3.createElement);\n\nvar documentCreateElement$2 = function (it) {\n  return EXISTS$1 ? document$3.createElement(it) : {};\n};\n\nvar DESCRIPTORS$d = descriptors;\nvar fails$n = fails$s;\nvar createElement$1 = documentCreateElement$2;\n\n// Thanks to IE8 for its funny defineProperty\nvar ie8DomDefine = !DESCRIPTORS$d && !fails$n(function () {\n  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing\n  return Object.defineProperty(createElement$1('div'), 'a', {\n    get: function () { return 7; }\n  }).a != 7;\n});\n\nvar DESCRIPTORS$c = descriptors;\nvar call$h = functionCall;\nvar propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;\nvar createPropertyDescriptor$4 = createPropertyDescriptor$5;\nvar toIndexedObject$5 = toIndexedObject$6;\nvar toPropertyKey$3 = toPropertyKey$4;\nvar hasOwn$a = hasOwnProperty_1;\nvar IE8_DOM_DEFINE$1 = ie8DomDefine;\n\n// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\nobjectGetOwnPropertyDescriptor.f = DESCRIPTORS$c ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject$5(O);\n  P = toPropertyKey$3(P);\n  if (IE8_DOM_DEFINE$1) try {\n    return $getOwnPropertyDescriptor$1(O, P);\n  } catch (error) { /* empty */ }\n  if (hasOwn$a(O, P)) return createPropertyDescriptor$4(!call$h(propertyIsEnumerableModule$1.f, O, P), O[P]);\n};\n\nvar objectDefineProperty = {};\n\nvar DESCRIPTORS$b = descriptors;\nvar fails$m = fails$s;\n\n// V8 ~ Chrome 36-\n// https://bugs.chromium.org/p/v8/issues/detail?id=3334\nvar v8PrototypeDefineBug = DESCRIPTORS$b && fails$m(function () {\n  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing\n  return Object.defineProperty(function () { /* empty */ }, 'prototype', {\n    value: 42,\n    writable: false\n  }).prototype != 42;\n});\n\nvar isObject$9 = isObject$d;\n\nvar $String$2 = String;\nvar $TypeError$b = TypeError;\n\n// `Assert: Type(argument) is Object`\nvar anObject$e = function (argument) {\n  if (isObject$9(argument)) return argument;\n  throw $TypeError$b($String$2(argument) + ' is not an object');\n};\n\nvar DESCRIPTORS$a = descriptors;\nvar IE8_DOM_DEFINE = ie8DomDefine;\nvar V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;\nvar anObject$d = anObject$e;\nvar toPropertyKey$2 = toPropertyKey$4;\n\nvar $TypeError$a = TypeError;\n// eslint-disable-next-line es-x/no-object-defineproperty -- safe\nvar $defineProperty = Object.defineProperty;\n// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar ENUMERABLE = 'enumerable';\nvar CONFIGURABLE$1 = 'configurable';\nvar WRITABLE = 'writable';\n\n// `Object.defineProperty` method\n// https://tc39.es/ecma262/#sec-object.defineproperty\nobjectDefineProperty.f = DESCRIPTORS$a ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty(O, P, Attributes) {\n  anObject$d(O);\n  P = toPropertyKey$2(P);\n  anObject$d(Attributes);\n  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {\n    var current = $getOwnPropertyDescriptor(O, P);\n    if (current && current[WRITABLE]) {\n      O[P] = Attributes.value;\n      Attributes = {\n        configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],\n        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],\n        writable: false\n      };\n    }\n  } return $defineProperty(O, P, Attributes);\n} : $defineProperty : function defineProperty(O, P, Attributes) {\n  anObject$d(O);\n  P = toPropertyKey$2(P);\n  anObject$d(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return $defineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw $TypeError$a('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\nvar DESCRIPTORS$9 = descriptors;\nvar definePropertyModule$6 = objectDefineProperty;\nvar createPropertyDescriptor$3 = createPropertyDescriptor$5;\n\nvar createNonEnumerableProperty$8 = DESCRIPTORS$9 ? function (object, key, value) {\n  return definePropertyModule$6.f(object, key, createPropertyDescriptor$3(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\nvar makeBuiltIn$2 = {exports: {}};\n\nvar DESCRIPTORS$8 = descriptors;\nvar hasOwn$9 = hasOwnProperty_1;\n\nvar FunctionPrototype$1 = Function.prototype;\n// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe\nvar getDescriptor = DESCRIPTORS$8 && Object.getOwnPropertyDescriptor;\n\nvar EXISTS = hasOwn$9(FunctionPrototype$1, 'name');\n// additional protection from minified / mangled / dropped function names\nvar PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';\nvar CONFIGURABLE = EXISTS && (!DESCRIPTORS$8 || (DESCRIPTORS$8 && getDescriptor(FunctionPrototype$1, 'name').configurable));\n\nvar functionName = {\n  EXISTS: EXISTS,\n  PROPER: PROPER,\n  CONFIGURABLE: CONFIGURABLE\n};\n\nvar uncurryThis$j = functionUncurryThis;\nvar isCallable$h = isCallable$n;\nvar store$1 = sharedStore;\n\nvar functionToString = uncurryThis$j(Function.toString);\n\n// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper\nif (!isCallable$h(store$1.inspectSource)) {\n  store$1.inspectSource = function (it) {\n    return functionToString(it);\n  };\n}\n\nvar inspectSource$4 = store$1.inspectSource;\n\nvar global$m = global$t;\nvar isCallable$g = isCallable$n;\nvar inspectSource$3 = inspectSource$4;\n\nvar WeakMap$1 = global$m.WeakMap;\n\nvar nativeWeakMap = isCallable$g(WeakMap$1) && /native code/.test(inspectSource$3(WeakMap$1));\n\nvar shared$2 = shared$4.exports;\nvar uid$1 = uid$3;\n\nvar keys$1 = shared$2('keys');\n\nvar sharedKey$3 = function (key) {\n  return keys$1[key] || (keys$1[key] = uid$1(key));\n};\n\nvar hiddenKeys$4 = {};\n\nvar NATIVE_WEAK_MAP = nativeWeakMap;\nvar global$l = global$t;\nvar uncurryThis$i = functionUncurryThis;\nvar isObject$8 = isObject$d;\nvar createNonEnumerableProperty$7 = createNonEnumerableProperty$8;\nvar hasOwn$8 = hasOwnProperty_1;\nvar shared$1 = sharedStore;\nvar sharedKey$2 = sharedKey$3;\nvar hiddenKeys$3 = hiddenKeys$4;\n\nvar OBJECT_ALREADY_INITIALIZED = 'Object already initialized';\nvar TypeError$3 = global$l.TypeError;\nvar WeakMap = global$l.WeakMap;\nvar set$2, get$1, has;\n\nvar enforce = function (it) {\n  return has(it) ? get$1(it) : set$2(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject$8(it) || (state = get$1(it)).type !== TYPE) {\n      throw TypeError$3('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP || shared$1.state) {\n  var store = shared$1.state || (shared$1.state = new WeakMap());\n  var wmget = uncurryThis$i(store.get);\n  var wmhas = uncurryThis$i(store.has);\n  var wmset = uncurryThis$i(store.set);\n  set$2 = function (it, metadata) {\n    if (wmhas(store, it)) throw new TypeError$3(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    wmset(store, it, metadata);\n    return metadata;\n  };\n  get$1 = function (it) {\n    return wmget(store, it) || {};\n  };\n  has = function (it) {\n    return wmhas(store, it);\n  };\n} else {\n  var STATE = sharedKey$2('state');\n  hiddenKeys$3[STATE] = true;\n  set$2 = function (it, metadata) {\n    if (hasOwn$8(it, STATE)) throw new TypeError$3(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    createNonEnumerableProperty$7(it, STATE, metadata);\n    return metadata;\n  };\n  get$1 = function (it) {\n    return hasOwn$8(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return hasOwn$8(it, STATE);\n  };\n}\n\nvar internalState = {\n  set: set$2,\n  get: get$1,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n\nvar fails$l = fails$s;\nvar isCallable$f = isCallable$n;\nvar hasOwn$7 = hasOwnProperty_1;\nvar DESCRIPTORS$7 = descriptors;\nvar CONFIGURABLE_FUNCTION_NAME$2 = functionName.CONFIGURABLE;\nvar inspectSource$2 = inspectSource$4;\nvar InternalStateModule$5 = internalState;\n\nvar enforceInternalState$2 = InternalStateModule$5.enforce;\nvar getInternalState$5 = InternalStateModule$5.get;\n// eslint-disable-next-line es-x/no-object-defineproperty -- safe\nvar defineProperty$6 = Object.defineProperty;\n\nvar CONFIGURABLE_LENGTH = DESCRIPTORS$7 && !fails$l(function () {\n  return defineProperty$6(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;\n});\n\nvar TEMPLATE = String(String).split('String');\n\nvar makeBuiltIn$1 = makeBuiltIn$2.exports = function (value, name, options) {\n  if (String(name).slice(0, 7) === 'Symbol(') {\n    name = '[' + String(name).replace(/^Symbol\\(([^)]*)\\)/, '$1') + ']';\n  }\n  if (options && options.getter) name = 'get ' + name;\n  if (options && options.setter) name = 'set ' + name;\n  if (!hasOwn$7(value, 'name') || (CONFIGURABLE_FUNCTION_NAME$2 && value.name !== name)) {\n    if (DESCRIPTORS$7) defineProperty$6(value, 'name', { value: name, configurable: true });\n    else value.name = name;\n  }\n  if (CONFIGURABLE_LENGTH && options && hasOwn$7(options, 'arity') && value.length !== options.arity) {\n    defineProperty$6(value, 'length', { value: options.arity });\n  }\n  try {\n    if (options && hasOwn$7(options, 'constructor') && options.constructor) {\n      if (DESCRIPTORS$7) defineProperty$6(value, 'prototype', { writable: false });\n    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable\n    } else if (value.prototype) value.prototype = undefined;\n  } catch (error) { /* empty */ }\n  var state = enforceInternalState$2(value);\n  if (!hasOwn$7(state, 'source')) {\n    state.source = TEMPLATE.join(typeof name == 'string' ? name : '');\n  } return value;\n};\n\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n// eslint-disable-next-line no-extend-native -- required\nFunction.prototype.toString = makeBuiltIn$1(function toString() {\n  return isCallable$f(this) && getInternalState$5(this).source || inspectSource$2(this);\n}, 'toString');\n\nvar isCallable$e = isCallable$n;\nvar definePropertyModule$5 = objectDefineProperty;\nvar makeBuiltIn = makeBuiltIn$2.exports;\nvar defineGlobalProperty$1 = defineGlobalProperty$3;\n\nvar defineBuiltIn$8 = function (O, key, value, options) {\n  if (!options) options = {};\n  var simple = options.enumerable;\n  var name = options.name !== undefined ? options.name : key;\n  if (isCallable$e(value)) makeBuiltIn(value, name, options);\n  if (options.global) {\n    if (simple) O[key] = value;\n    else defineGlobalProperty$1(key, value);\n  } else {\n    try {\n      if (!options.unsafe) delete O[key];\n      else if (O[key]) simple = true;\n    } catch (error) { /* empty */ }\n    if (simple) O[key] = value;\n    else definePropertyModule$5.f(O, key, {\n      value: value,\n      enumerable: false,\n      configurable: !options.nonConfigurable,\n      writable: !options.nonWritable\n    });\n  } return O;\n};\n\nvar objectGetOwnPropertyNames = {};\n\nvar ceil = Math.ceil;\nvar floor$3 = Math.floor;\n\n// `Math.trunc` method\n// https://tc39.es/ecma262/#sec-math.trunc\n// eslint-disable-next-line es-x/no-math-trunc -- safe\nvar mathTrunc = Math.trunc || function trunc(x) {\n  var n = +x;\n  return (n > 0 ? floor$3 : ceil)(n);\n};\n\nvar trunc = mathTrunc;\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nvar toIntegerOrInfinity$6 = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return number !== number || number === 0 ? 0 : trunc(number);\n};\n\nvar toIntegerOrInfinity$5 = toIntegerOrInfinity$6;\n\nvar max$1 = Math.max;\nvar min$2 = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nvar toAbsoluteIndex$4 = function (index, length) {\n  var integer = toIntegerOrInfinity$5(index);\n  return integer < 0 ? max$1(integer + length, 0) : min$2(integer, length);\n};\n\nvar toIntegerOrInfinity$4 = toIntegerOrInfinity$6;\n\nvar min$1 = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.es/ecma262/#sec-tolength\nvar toLength$6 = function (argument) {\n  return argument > 0 ? min$1(toIntegerOrInfinity$4(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n\nvar toLength$5 = toLength$6;\n\n// `LengthOfArrayLike` abstract operation\n// https://tc39.es/ecma262/#sec-lengthofarraylike\nvar lengthOfArrayLike$8 = function (obj) {\n  return toLength$5(obj.length);\n};\n\nvar toIndexedObject$4 = toIndexedObject$6;\nvar toAbsoluteIndex$3 = toAbsoluteIndex$4;\nvar lengthOfArrayLike$7 = lengthOfArrayLike$8;\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod$4 = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject$4($this);\n    var length = lengthOfArrayLike$7(O);\n    var index = toAbsoluteIndex$3(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare -- NaN check\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nvar arrayIncludes = {\n  // `Array.prototype.includes` method\n  // https://tc39.es/ecma262/#sec-array.prototype.includes\n  includes: createMethod$4(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.es/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod$4(false)\n};\n\nvar uncurryThis$h = functionUncurryThis;\nvar hasOwn$6 = hasOwnProperty_1;\nvar toIndexedObject$3 = toIndexedObject$6;\nvar indexOf$1 = arrayIncludes.indexOf;\nvar hiddenKeys$2 = hiddenKeys$4;\n\nvar push$2 = uncurryThis$h([].push);\n\nvar objectKeysInternal = function (object, names) {\n  var O = toIndexedObject$3(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !hasOwn$6(hiddenKeys$2, key) && hasOwn$6(O, key) && push$2(result, key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (hasOwn$6(O, key = names[i++])) {\n    ~indexOf$1(result, key) || push$2(result, key);\n  }\n  return result;\n};\n\n// IE8- don't enum bug keys\nvar enumBugKeys$3 = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n\nvar internalObjectKeys$1 = objectKeysInternal;\nvar enumBugKeys$2 = enumBugKeys$3;\n\nvar hiddenKeys$1 = enumBugKeys$2.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.es/ecma262/#sec-object.getownpropertynames\n// eslint-disable-next-line es-x/no-object-getownpropertynames -- safe\nobjectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys$1(O, hiddenKeys$1);\n};\n\nvar objectGetOwnPropertySymbols = {};\n\n// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- safe\nobjectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;\n\nvar getBuiltIn$5 = getBuiltIn$8;\nvar uncurryThis$g = functionUncurryThis;\nvar getOwnPropertyNamesModule = objectGetOwnPropertyNames;\nvar getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;\nvar anObject$c = anObject$e;\n\nvar concat$1 = uncurryThis$g([].concat);\n\n// all object keys, includes non-enumerable and symbols\nvar ownKeys$1 = getBuiltIn$5('Reflect', 'ownKeys') || function ownKeys(it) {\n  var keys = getOwnPropertyNamesModule.f(anObject$c(it));\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule$1.f;\n  return getOwnPropertySymbols ? concat$1(keys, getOwnPropertySymbols(it)) : keys;\n};\n\nvar hasOwn$5 = hasOwnProperty_1;\nvar ownKeys = ownKeys$1;\nvar getOwnPropertyDescriptorModule$1 = objectGetOwnPropertyDescriptor;\nvar definePropertyModule$4 = objectDefineProperty;\n\nvar copyConstructorProperties$1 = function (target, source, exceptions) {\n  var keys = ownKeys(source);\n  var defineProperty = definePropertyModule$4.f;\n  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule$1.f;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!hasOwn$5(target, key) && !(exceptions && hasOwn$5(exceptions, key))) {\n      defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n    }\n  }\n};\n\nvar fails$k = fails$s;\nvar isCallable$d = isCallable$n;\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced$2 = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value == POLYFILL ? true\n    : value == NATIVE ? false\n    : isCallable$d(detection) ? fails$k(detection)\n    : !!detection;\n};\n\nvar normalize = isForced$2.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced$2.data = {};\nvar NATIVE = isForced$2.NATIVE = 'N';\nvar POLYFILL = isForced$2.POLYFILL = 'P';\n\nvar isForced_1 = isForced$2;\n\nvar global$k = global$t;\nvar getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;\nvar createNonEnumerableProperty$6 = createNonEnumerableProperty$8;\nvar defineBuiltIn$7 = defineBuiltIn$8;\nvar defineGlobalProperty = defineGlobalProperty$3;\nvar copyConstructorProperties = copyConstructorProperties$1;\nvar isForced$1 = isForced_1;\n\n/*\n  options.target         - name of the target object\n  options.global         - target is the global object\n  options.stat           - export as static methods of target\n  options.proto          - export as prototype methods of target\n  options.real           - real prototype method for the `pure` version\n  options.forced         - export even if the native feature is available\n  options.bind           - bind methods to the target, required for the `pure` version\n  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe         - use the simple assignment of property instead of delete + defineProperty\n  options.sham           - add a flag to not completely full polyfills\n  options.enumerable     - export as enumerable property\n  options.dontCallGetSet - prevent calling a getter on target\n  options.name           - the .name of the function if it does not match the key\n*/\nvar _export = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n  if (GLOBAL) {\n    target = global$k;\n  } else if (STATIC) {\n    target = global$k[TARGET] || defineGlobalProperty(TARGET, {});\n  } else {\n    target = (global$k[TARGET] || {}).prototype;\n  }\n  if (target) for (key in source) {\n    sourceProperty = source[key];\n    if (options.dontCallGetSet) {\n      descriptor = getOwnPropertyDescriptor$1(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } else targetProperty = target[key];\n    FORCED = isForced$1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contained in target\n    if (!FORCED && targetProperty !== undefined) {\n      if (typeof sourceProperty == typeof targetProperty) continue;\n      copyConstructorProperties(sourceProperty, targetProperty);\n    }\n    // add a flag to not completely full polyfills\n    if (options.sham || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty$6(sourceProperty, 'sham', true);\n    }\n    defineBuiltIn$7(target, key, sourceProperty, options);\n  }\n};\n\nvar classof$a = classofRaw$1;\nvar global$j = global$t;\n\nvar engineIsNode = classof$a(global$j.process) == 'process';\n\nvar isCallable$c = isCallable$n;\n\nvar $String$1 = String;\nvar $TypeError$9 = TypeError;\n\nvar aPossiblePrototype$1 = function (argument) {\n  if (typeof argument == 'object' || isCallable$c(argument)) return argument;\n  throw $TypeError$9(\"Can't set \" + $String$1(argument) + ' as a prototype');\n};\n\n/* eslint-disable no-proto -- safe */\n\nvar uncurryThis$f = functionUncurryThis;\nvar anObject$b = anObject$e;\nvar aPossiblePrototype = aPossiblePrototype$1;\n\n// `Object.setPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n// eslint-disable-next-line es-x/no-object-setprototypeof -- safe\nvar objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe\n    setter = uncurryThis$f(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);\n    setter(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    anObject$b(O);\n    aPossiblePrototype(proto);\n    if (CORRECT_SETTER) setter(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n\nvar defineProperty$5 = objectDefineProperty.f;\nvar hasOwn$4 = hasOwnProperty_1;\nvar wellKnownSymbol$h = wellKnownSymbol$j;\n\nvar TO_STRING_TAG$4 = wellKnownSymbol$h('toStringTag');\n\nvar setToStringTag$4 = function (target, TAG, STATIC) {\n  if (target && !STATIC) target = target.prototype;\n  if (target && !hasOwn$4(target, TO_STRING_TAG$4)) {\n    defineProperty$5(target, TO_STRING_TAG$4, { configurable: true, value: TAG });\n  }\n};\n\nvar getBuiltIn$4 = getBuiltIn$8;\nvar definePropertyModule$3 = objectDefineProperty;\nvar wellKnownSymbol$g = wellKnownSymbol$j;\nvar DESCRIPTORS$6 = descriptors;\n\nvar SPECIES$4 = wellKnownSymbol$g('species');\n\nvar setSpecies$2 = function (CONSTRUCTOR_NAME) {\n  var Constructor = getBuiltIn$4(CONSTRUCTOR_NAME);\n  var defineProperty = definePropertyModule$3.f;\n\n  if (DESCRIPTORS$6 && Constructor && !Constructor[SPECIES$4]) {\n    defineProperty(Constructor, SPECIES$4, {\n      configurable: true,\n      get: function () { return this; }\n    });\n  }\n};\n\nvar isPrototypeOf$3 = objectIsPrototypeOf;\n\nvar $TypeError$8 = TypeError;\n\nvar anInstance$3 = function (it, Prototype) {\n  if (isPrototypeOf$3(Prototype, it)) return it;\n  throw $TypeError$8('Incorrect invocation');\n};\n\nvar wellKnownSymbol$f = wellKnownSymbol$j;\n\nvar TO_STRING_TAG$3 = wellKnownSymbol$f('toStringTag');\nvar test = {};\n\ntest[TO_STRING_TAG$3] = 'z';\n\nvar toStringTagSupport = String(test) === '[object z]';\n\nvar TO_STRING_TAG_SUPPORT = toStringTagSupport;\nvar isCallable$b = isCallable$n;\nvar classofRaw = classofRaw$1;\nvar wellKnownSymbol$e = wellKnownSymbol$j;\n\nvar TO_STRING_TAG$2 = wellKnownSymbol$e('toStringTag');\nvar $Object$1 = Object;\n\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (error) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nvar classof$9 = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = $Object$1(it), TO_STRING_TAG$2)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) == 'Object' && isCallable$b(O.callee) ? 'Arguments' : result;\n};\n\nvar uncurryThis$e = functionUncurryThis;\nvar fails$j = fails$s;\nvar isCallable$a = isCallable$n;\nvar classof$8 = classof$9;\nvar getBuiltIn$3 = getBuiltIn$8;\nvar inspectSource$1 = inspectSource$4;\n\nvar noop = function () { /* empty */ };\nvar empty = [];\nvar construct = getBuiltIn$3('Reflect', 'construct');\nvar constructorRegExp = /^\\s*(?:class|function)\\b/;\nvar exec$2 = uncurryThis$e(constructorRegExp.exec);\nvar INCORRECT_TO_STRING = !constructorRegExp.exec(noop);\n\nvar isConstructorModern = function isConstructor(argument) {\n  if (!isCallable$a(argument)) return false;\n  try {\n    construct(noop, empty, argument);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nvar isConstructorLegacy = function isConstructor(argument) {\n  if (!isCallable$a(argument)) return false;\n  switch (classof$8(argument)) {\n    case 'AsyncFunction':\n    case 'GeneratorFunction':\n    case 'AsyncGeneratorFunction': return false;\n  }\n  try {\n    // we can't check .prototype since constructors produced by .bind haven't it\n    // `Function#toString` throws on some built-it function in some legacy engines\n    // (for example, `DOMQuad` and similar in FF41-)\n    return INCORRECT_TO_STRING || !!exec$2(constructorRegExp, inspectSource$1(argument));\n  } catch (error) {\n    return true;\n  }\n};\n\nisConstructorLegacy.sham = true;\n\n// `IsConstructor` abstract operation\n// https://tc39.es/ecma262/#sec-isconstructor\nvar isConstructor$2 = !construct || fails$j(function () {\n  var called;\n  return isConstructorModern(isConstructorModern.call)\n    || !isConstructorModern(Object)\n    || !isConstructorModern(function () { called = true; })\n    || called;\n}) ? isConstructorLegacy : isConstructorModern;\n\nvar isConstructor$1 = isConstructor$2;\nvar tryToString$3 = tryToString$5;\n\nvar $TypeError$7 = TypeError;\n\n// `Assert: IsConstructor(argument) is true`\nvar aConstructor$2 = function (argument) {\n  if (isConstructor$1(argument)) return argument;\n  throw $TypeError$7(tryToString$3(argument) + ' is not a constructor');\n};\n\nvar anObject$a = anObject$e;\nvar aConstructor$1 = aConstructor$2;\nvar wellKnownSymbol$d = wellKnownSymbol$j;\n\nvar SPECIES$3 = wellKnownSymbol$d('species');\n\n// `SpeciesConstructor` abstract operation\n// https://tc39.es/ecma262/#sec-speciesconstructor\nvar speciesConstructor$3 = function (O, defaultConstructor) {\n  var C = anObject$a(O).constructor;\n  var S;\n  return C === undefined || (S = anObject$a(C)[SPECIES$3]) == undefined ? defaultConstructor : aConstructor$1(S);\n};\n\nvar NATIVE_BIND$1 = functionBindNative;\n\nvar FunctionPrototype = Function.prototype;\nvar apply$3 = FunctionPrototype.apply;\nvar call$g = FunctionPrototype.call;\n\n// eslint-disable-next-line es-x/no-reflect -- safe\nvar functionApply = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND$1 ? call$g.bind(apply$3) : function () {\n  return call$g.apply(apply$3, arguments);\n});\n\nvar uncurryThis$d = functionUncurryThis;\nvar aCallable$7 = aCallable$9;\nvar NATIVE_BIND = functionBindNative;\n\nvar bind$6 = uncurryThis$d(uncurryThis$d.bind);\n\n// optional / simple context binding\nvar functionBindContext = function (fn, that) {\n  aCallable$7(fn);\n  return that === undefined ? fn : NATIVE_BIND ? bind$6(fn, that) : function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\nvar getBuiltIn$2 = getBuiltIn$8;\n\nvar html$2 = getBuiltIn$2('document', 'documentElement');\n\nvar uncurryThis$c = functionUncurryThis;\n\nvar arraySlice$5 = uncurryThis$c([].slice);\n\nvar $TypeError$6 = TypeError;\n\nvar validateArgumentsLength$1 = function (passed, required) {\n  if (passed < required) throw $TypeError$6('Not enough arguments');\n  return passed;\n};\n\nvar userAgent$4 = engineUserAgent;\n\nvar engineIsIos = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent$4);\n\nvar global$i = global$t;\nvar apply$2 = functionApply;\nvar bind$5 = functionBindContext;\nvar isCallable$9 = isCallable$n;\nvar hasOwn$3 = hasOwnProperty_1;\nvar fails$i = fails$s;\nvar html$1 = html$2;\nvar arraySlice$4 = arraySlice$5;\nvar createElement = documentCreateElement$2;\nvar validateArgumentsLength = validateArgumentsLength$1;\nvar IS_IOS$1 = engineIsIos;\nvar IS_NODE$3 = engineIsNode;\n\nvar set$1 = global$i.setImmediate;\nvar clear = global$i.clearImmediate;\nvar process$2 = global$i.process;\nvar Dispatch = global$i.Dispatch;\nvar Function$1 = global$i.Function;\nvar MessageChannel = global$i.MessageChannel;\nvar String$1 = global$i.String;\nvar counter = 0;\nvar queue$1 = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar location, defer, channel, port;\n\ntry {\n  // Deno throws a ReferenceError on `location` access without `--location` flag\n  location = global$i.location;\n} catch (error) { /* empty */ }\n\nvar run = function (id) {\n  if (hasOwn$3(queue$1, id)) {\n    var fn = queue$1[id];\n    delete queue$1[id];\n    fn();\n  }\n};\n\nvar runner = function (id) {\n  return function () {\n    run(id);\n  };\n};\n\nvar listener = function (event) {\n  run(event.data);\n};\n\nvar post = function (id) {\n  // old engines have not location.origin\n  global$i.postMessage(String$1(id), location.protocol + '//' + location.host);\n};\n\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!set$1 || !clear) {\n  set$1 = function setImmediate(handler) {\n    validateArgumentsLength(arguments.length, 1);\n    var fn = isCallable$9(handler) ? handler : Function$1(handler);\n    var args = arraySlice$4(arguments, 1);\n    queue$1[++counter] = function () {\n      apply$2(fn, undefined, args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clear = function clearImmediate(id) {\n    delete queue$1[id];\n  };\n  // Node.js 0.8-\n  if (IS_NODE$3) {\n    defer = function (id) {\n      process$2.nextTick(runner(id));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(runner(id));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  // except iOS - https://github.com/zloirock/core-js/issues/624\n  } else if (MessageChannel && !IS_IOS$1) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = bind$5(port.postMessage, port);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (\n    global$i.addEventListener &&\n    isCallable$9(global$i.postMessage) &&\n    !global$i.importScripts &&\n    location && location.protocol !== 'file:' &&\n    !fails$i(post)\n  ) {\n    defer = post;\n    global$i.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in createElement('script')) {\n    defer = function (id) {\n      html$1.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {\n        html$1.removeChild(this);\n        run(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(runner(id), 0);\n    };\n  }\n}\n\nvar task$1 = {\n  set: set$1,\n  clear: clear\n};\n\nvar userAgent$3 = engineUserAgent;\nvar global$h = global$t;\n\nvar engineIsIosPebble = /ipad|iphone|ipod/i.test(userAgent$3) && global$h.Pebble !== undefined;\n\nvar userAgent$2 = engineUserAgent;\n\nvar engineIsWebosWebkit = /web0s(?!.*chrome)/i.test(userAgent$2);\n\nvar global$g = global$t;\nvar bind$4 = functionBindContext;\nvar getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;\nvar macrotask = task$1.set;\nvar IS_IOS = engineIsIos;\nvar IS_IOS_PEBBLE = engineIsIosPebble;\nvar IS_WEBOS_WEBKIT = engineIsWebosWebkit;\nvar IS_NODE$2 = engineIsNode;\n\nvar MutationObserver = global$g.MutationObserver || global$g.WebKitMutationObserver;\nvar document$2 = global$g.document;\nvar process$1 = global$g.process;\nvar Promise$1 = global$g.Promise;\n// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`\nvar queueMicrotaskDescriptor = getOwnPropertyDescriptor(global$g, 'queueMicrotask');\nvar queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;\n\nvar flush, head, last, notify$1, toggle, node, promise, then;\n\n// modern engines have queueMicrotask method\nif (!queueMicrotask) {\n  flush = function () {\n    var parent, fn;\n    if (IS_NODE$2 && (parent = process$1.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (error) {\n        if (head) notify$1();\n        else last = undefined;\n        throw error;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339\n  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898\n  if (!IS_IOS && !IS_NODE$2 && !IS_WEBOS_WEBKIT && MutationObserver && document$2) {\n    toggle = true;\n    node = document$2.createTextNode('');\n    new MutationObserver(flush).observe(node, { characterData: true });\n    notify$1 = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (!IS_IOS_PEBBLE && Promise$1 && Promise$1.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    promise = Promise$1.resolve(undefined);\n    // workaround of WebKit ~ iOS Safari 10.1 bug\n    promise.constructor = Promise$1;\n    then = bind$4(promise.then, promise);\n    notify$1 = function () {\n      then(flush);\n    };\n  // Node.js without promises\n  } else if (IS_NODE$2) {\n    notify$1 = function () {\n      process$1.nextTick(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessage\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    // strange IE + webpack dev server bug - use .bind(global)\n    macrotask = bind$4(macrotask, global$g);\n    notify$1 = function () {\n      macrotask(flush);\n    };\n  }\n}\n\nvar microtask$1 = queueMicrotask || function (fn) {\n  var task = { fn: fn, next: undefined };\n  if (last) last.next = task;\n  if (!head) {\n    head = task;\n    notify$1();\n  } last = task;\n};\n\nvar global$f = global$t;\n\nvar hostReportErrors$1 = function (a, b) {\n  var console = global$f.console;\n  if (console && console.error) {\n    arguments.length == 1 ? console.error(a) : console.error(a, b);\n  }\n};\n\nvar perform$3 = function (exec) {\n  try {\n    return { error: false, value: exec() };\n  } catch (error) {\n    return { error: true, value: error };\n  }\n};\n\nvar Queue$1 = function () {\n  this.head = null;\n  this.tail = null;\n};\n\nQueue$1.prototype = {\n  add: function (item) {\n    var entry = { item: item, next: null };\n    if (this.head) this.tail.next = entry;\n    else this.head = entry;\n    this.tail = entry;\n  },\n  get: function () {\n    var entry = this.head;\n    if (entry) {\n      this.head = entry.next;\n      if (this.tail === entry) this.tail = null;\n      return entry.item;\n    }\n  }\n};\n\nvar queue = Queue$1;\n\nvar global$e = global$t;\n\nvar promiseNativeConstructor = global$e.Promise;\n\nvar engineIsBrowser = typeof window == 'object' && typeof Deno != 'object';\n\nvar global$d = global$t;\nvar NativePromiseConstructor$3 = promiseNativeConstructor;\nvar isCallable$8 = isCallable$n;\nvar isForced = isForced_1;\nvar inspectSource = inspectSource$4;\nvar wellKnownSymbol$c = wellKnownSymbol$j;\nvar IS_BROWSER = engineIsBrowser;\nvar V8_VERSION = engineV8Version;\n\nNativePromiseConstructor$3 && NativePromiseConstructor$3.prototype;\nvar SPECIES$2 = wellKnownSymbol$c('species');\nvar SUBCLASSING = false;\nvar NATIVE_PROMISE_REJECTION_EVENT$1 = isCallable$8(global$d.PromiseRejectionEvent);\n\nvar FORCED_PROMISE_CONSTRUCTOR$5 = isForced('Promise', function () {\n  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor$3);\n  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor$3);\n  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n  // We can't detect it synchronously, so just check versions\n  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;\n  // We can't use @@species feature detection in V8 since it causes\n  // deoptimization and performance degradation\n  // https://github.com/zloirock/core-js/issues/679\n  if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false;\n  // Detect correctness of subclassing with @@species support\n  var promise = new NativePromiseConstructor$3(function (resolve) { resolve(1); });\n  var FakePromise = function (exec) {\n    exec(function () { /* empty */ }, function () { /* empty */ });\n  };\n  var constructor = promise.constructor = {};\n  constructor[SPECIES$2] = FakePromise;\n  SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;\n  if (!SUBCLASSING) return true;\n  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n  return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_PROMISE_REJECTION_EVENT$1;\n});\n\nvar promiseConstructorDetection = {\n  CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR$5,\n  REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT$1,\n  SUBCLASSING: SUBCLASSING\n};\n\nvar newPromiseCapability$2 = {};\n\nvar aCallable$6 = aCallable$9;\n\nvar PromiseCapability = function (C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aCallable$6(resolve);\n  this.reject = aCallable$6(reject);\n};\n\n// `NewPromiseCapability` abstract operation\n// https://tc39.es/ecma262/#sec-newpromisecapability\nnewPromiseCapability$2.f = function (C) {\n  return new PromiseCapability(C);\n};\n\nvar $$e = _export;\nvar IS_NODE$1 = engineIsNode;\nvar global$c = global$t;\nvar call$f = functionCall;\nvar defineBuiltIn$6 = defineBuiltIn$8;\nvar setPrototypeOf$5 = objectSetPrototypeOf;\nvar setToStringTag$3 = setToStringTag$4;\nvar setSpecies$1 = setSpecies$2;\nvar aCallable$5 = aCallable$9;\nvar isCallable$7 = isCallable$n;\nvar isObject$7 = isObject$d;\nvar anInstance$2 = anInstance$3;\nvar speciesConstructor$2 = speciesConstructor$3;\nvar task = task$1.set;\nvar microtask = microtask$1;\nvar hostReportErrors = hostReportErrors$1;\nvar perform$2 = perform$3;\nvar Queue = queue;\nvar InternalStateModule$4 = internalState;\nvar NativePromiseConstructor$2 = promiseNativeConstructor;\nvar PromiseConstructorDetection = promiseConstructorDetection;\nvar newPromiseCapabilityModule$3 = newPromiseCapability$2;\n\nvar PROMISE = 'Promise';\nvar FORCED_PROMISE_CONSTRUCTOR$4 = PromiseConstructorDetection.CONSTRUCTOR;\nvar NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;\nvar NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;\nvar getInternalPromiseState = InternalStateModule$4.getterFor(PROMISE);\nvar setInternalState$3 = InternalStateModule$4.set;\nvar NativePromisePrototype$1 = NativePromiseConstructor$2 && NativePromiseConstructor$2.prototype;\nvar PromiseConstructor = NativePromiseConstructor$2;\nvar PromisePrototype = NativePromisePrototype$1;\nvar TypeError$2 = global$c.TypeError;\nvar document$1 = global$c.document;\nvar process = global$c.process;\nvar newPromiseCapability$1 = newPromiseCapabilityModule$3.f;\nvar newGenericPromiseCapability = newPromiseCapability$1;\n\nvar DISPATCH_EVENT = !!(document$1 && document$1.createEvent && global$c.dispatchEvent);\nvar UNHANDLED_REJECTION = 'unhandledrejection';\nvar REJECTION_HANDLED = 'rejectionhandled';\nvar PENDING = 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\nvar HANDLED = 1;\nvar UNHANDLED = 2;\n\nvar Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject$7(it) && isCallable$7(then = it.then) ? then : false;\n};\n\nvar callReaction = function (reaction, state) {\n  var value = state.value;\n  var ok = state.state == FULFILLED;\n  var handler = ok ? reaction.ok : reaction.fail;\n  var resolve = reaction.resolve;\n  var reject = reaction.reject;\n  var domain = reaction.domain;\n  var result, then, exited;\n  try {\n    if (handler) {\n      if (!ok) {\n        if (state.rejection === UNHANDLED) onHandleUnhandled(state);\n        state.rejection = HANDLED;\n      }\n      if (handler === true) result = value;\n      else {\n        if (domain) domain.enter();\n        result = handler(value); // can throw\n        if (domain) {\n          domain.exit();\n          exited = true;\n        }\n      }\n      if (result === reaction.promise) {\n        reject(TypeError$2('Promise-chain cycle'));\n      } else if (then = isThenable(result)) {\n        call$f(then, result, resolve, reject);\n      } else resolve(result);\n    } else reject(value);\n  } catch (error) {\n    if (domain && !exited) domain.exit();\n    reject(error);\n  }\n};\n\nvar notify = function (state, isReject) {\n  if (state.notified) return;\n  state.notified = true;\n  microtask(function () {\n    var reactions = state.reactions;\n    var reaction;\n    while (reaction = reactions.get()) {\n      callReaction(reaction, state);\n    }\n    state.notified = false;\n    if (isReject && !state.rejection) onUnhandled(state);\n  });\n};\n\nvar dispatchEvent = function (name, promise, reason) {\n  var event, handler;\n  if (DISPATCH_EVENT) {\n    event = document$1.createEvent('Event');\n    event.promise = promise;\n    event.reason = reason;\n    event.initEvent(name, false, true);\n    global$c.dispatchEvent(event);\n  } else event = { promise: promise, reason: reason };\n  if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global$c['on' + name])) handler(event);\n  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);\n};\n\nvar onUnhandled = function (state) {\n  call$f(task, global$c, function () {\n    var promise = state.facade;\n    var value = state.value;\n    var IS_UNHANDLED = isUnhandled(state);\n    var result;\n    if (IS_UNHANDLED) {\n      result = perform$2(function () {\n        if (IS_NODE$1) {\n          process.emit('unhandledRejection', value, promise);\n        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      state.rejection = IS_NODE$1 || isUnhandled(state) ? UNHANDLED : HANDLED;\n      if (result.error) throw result.value;\n    }\n  });\n};\n\nvar isUnhandled = function (state) {\n  return state.rejection !== HANDLED && !state.parent;\n};\n\nvar onHandleUnhandled = function (state) {\n  call$f(task, global$c, function () {\n    var promise = state.facade;\n    if (IS_NODE$1) {\n      process.emit('rejectionHandled', promise);\n    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);\n  });\n};\n\nvar bind$3 = function (fn, state, unwrap) {\n  return function (value) {\n    fn(state, value, unwrap);\n  };\n};\n\nvar internalReject = function (state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  state.value = value;\n  state.state = REJECTED;\n  notify(state, true);\n};\n\nvar internalResolve = function (state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  try {\n    if (state.facade === value) throw TypeError$2(\"Promise can't be resolved itself\");\n    var then = isThenable(value);\n    if (then) {\n      microtask(function () {\n        var wrapper = { done: false };\n        try {\n          call$f(then, value,\n            bind$3(internalResolve, wrapper, state),\n            bind$3(internalReject, wrapper, state)\n          );\n        } catch (error) {\n          internalReject(wrapper, error, state);\n        }\n      });\n    } else {\n      state.value = value;\n      state.state = FULFILLED;\n      notify(state, false);\n    }\n  } catch (error) {\n    internalReject({ done: false }, error, state);\n  }\n};\n\n// constructor polyfill\nif (FORCED_PROMISE_CONSTRUCTOR$4) {\n  // 25.4.3.1 Promise(executor)\n  PromiseConstructor = function Promise(executor) {\n    anInstance$2(this, PromisePrototype);\n    aCallable$5(executor);\n    call$f(Internal, this);\n    var state = getInternalPromiseState(this);\n    try {\n      executor(bind$3(internalResolve, state), bind$3(internalReject, state));\n    } catch (error) {\n      internalReject(state, error);\n    }\n  };\n\n  PromisePrototype = PromiseConstructor.prototype;\n\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\n  Internal = function Promise(executor) {\n    setInternalState$3(this, {\n      type: PROMISE,\n      done: false,\n      notified: false,\n      parent: false,\n      reactions: new Queue(),\n      rejection: false,\n      state: PENDING,\n      value: undefined\n    });\n  };\n\n  // `Promise.prototype.then` method\n  // https://tc39.es/ecma262/#sec-promise.prototype.then\n  Internal.prototype = defineBuiltIn$6(PromisePrototype, 'then', function then(onFulfilled, onRejected) {\n    var state = getInternalPromiseState(this);\n    var reaction = newPromiseCapability$1(speciesConstructor$2(this, PromiseConstructor));\n    state.parent = true;\n    reaction.ok = isCallable$7(onFulfilled) ? onFulfilled : true;\n    reaction.fail = isCallable$7(onRejected) && onRejected;\n    reaction.domain = IS_NODE$1 ? process.domain : undefined;\n    if (state.state == PENDING) state.reactions.add(reaction);\n    else microtask(function () {\n      callReaction(reaction, state);\n    });\n    return reaction.promise;\n  });\n\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    var state = getInternalPromiseState(promise);\n    this.promise = promise;\n    this.resolve = bind$3(internalResolve, state);\n    this.reject = bind$3(internalReject, state);\n  };\n\n  newPromiseCapabilityModule$3.f = newPromiseCapability$1 = function (C) {\n    return C === PromiseConstructor || C === PromiseWrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n\n  if (isCallable$7(NativePromiseConstructor$2) && NativePromisePrototype$1 !== Object.prototype) {\n    nativeThen = NativePromisePrototype$1.then;\n\n    if (!NATIVE_PROMISE_SUBCLASSING) {\n      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs\n      defineBuiltIn$6(NativePromisePrototype$1, 'then', function then(onFulfilled, onRejected) {\n        var that = this;\n        return new PromiseConstructor(function (resolve, reject) {\n          call$f(nativeThen, that, resolve, reject);\n        }).then(onFulfilled, onRejected);\n      // https://github.com/zloirock/core-js/issues/640\n      }, { unsafe: true });\n    }\n\n    // make `.constructor === Promise` work for native promise-based APIs\n    try {\n      delete NativePromisePrototype$1.constructor;\n    } catch (error) { /* empty */ }\n\n    // make `instanceof Promise` work for native promise-based APIs\n    if (setPrototypeOf$5) {\n      setPrototypeOf$5(NativePromisePrototype$1, PromisePrototype);\n    }\n  }\n}\n\n$$e({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR$4 }, {\n  Promise: PromiseConstructor\n});\n\nsetToStringTag$3(PromiseConstructor, PROMISE, false);\nsetSpecies$1(PROMISE);\n\nvar iterators = {};\n\nvar wellKnownSymbol$b = wellKnownSymbol$j;\nvar Iterators$4 = iterators;\n\nvar ITERATOR$5 = wellKnownSymbol$b('iterator');\nvar ArrayPrototype$1 = Array.prototype;\n\n// check on default Array iterator\nvar isArrayIteratorMethod$2 = function (it) {\n  return it !== undefined && (Iterators$4.Array === it || ArrayPrototype$1[ITERATOR$5] === it);\n};\n\nvar classof$7 = classof$9;\nvar getMethod$2 = getMethod$4;\nvar Iterators$3 = iterators;\nvar wellKnownSymbol$a = wellKnownSymbol$j;\n\nvar ITERATOR$4 = wellKnownSymbol$a('iterator');\n\nvar getIteratorMethod$3 = function (it) {\n  if (it != undefined) return getMethod$2(it, ITERATOR$4)\n    || getMethod$2(it, '@@iterator')\n    || Iterators$3[classof$7(it)];\n};\n\nvar call$e = functionCall;\nvar aCallable$4 = aCallable$9;\nvar anObject$9 = anObject$e;\nvar tryToString$2 = tryToString$5;\nvar getIteratorMethod$2 = getIteratorMethod$3;\n\nvar $TypeError$5 = TypeError;\n\nvar getIterator$2 = function (argument, usingIterator) {\n  var iteratorMethod = arguments.length < 2 ? getIteratorMethod$2(argument) : usingIterator;\n  if (aCallable$4(iteratorMethod)) return anObject$9(call$e(iteratorMethod, argument));\n  throw $TypeError$5(tryToString$2(argument) + ' is not iterable');\n};\n\nvar call$d = functionCall;\nvar anObject$8 = anObject$e;\nvar getMethod$1 = getMethod$4;\n\nvar iteratorClose$1 = function (iterator, kind, value) {\n  var innerResult, innerError;\n  anObject$8(iterator);\n  try {\n    innerResult = getMethod$1(iterator, 'return');\n    if (!innerResult) {\n      if (kind === 'throw') throw value;\n      return value;\n    }\n    innerResult = call$d(innerResult, iterator);\n  } catch (error) {\n    innerError = true;\n    innerResult = error;\n  }\n  if (kind === 'throw') throw value;\n  if (innerError) throw innerResult;\n  anObject$8(innerResult);\n  return value;\n};\n\nvar bind$2 = functionBindContext;\nvar call$c = functionCall;\nvar anObject$7 = anObject$e;\nvar tryToString$1 = tryToString$5;\nvar isArrayIteratorMethod$1 = isArrayIteratorMethod$2;\nvar lengthOfArrayLike$6 = lengthOfArrayLike$8;\nvar isPrototypeOf$2 = objectIsPrototypeOf;\nvar getIterator$1 = getIterator$2;\nvar getIteratorMethod$1 = getIteratorMethod$3;\nvar iteratorClose = iteratorClose$1;\n\nvar $TypeError$4 = TypeError;\n\nvar Result = function (stopped, result) {\n  this.stopped = stopped;\n  this.result = result;\n};\n\nvar ResultPrototype = Result.prototype;\n\nvar iterate$2 = function (iterable, unboundFunction, options) {\n  var that = options && options.that;\n  var AS_ENTRIES = !!(options && options.AS_ENTRIES);\n  var IS_ITERATOR = !!(options && options.IS_ITERATOR);\n  var INTERRUPTED = !!(options && options.INTERRUPTED);\n  var fn = bind$2(unboundFunction, that);\n  var iterator, iterFn, index, length, result, next, step;\n\n  var stop = function (condition) {\n    if (iterator) iteratorClose(iterator, 'normal', condition);\n    return new Result(true, condition);\n  };\n\n  var callFn = function (value) {\n    if (AS_ENTRIES) {\n      anObject$7(value);\n      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);\n    } return INTERRUPTED ? fn(value, stop) : fn(value);\n  };\n\n  if (IS_ITERATOR) {\n    iterator = iterable;\n  } else {\n    iterFn = getIteratorMethod$1(iterable);\n    if (!iterFn) throw $TypeError$4(tryToString$1(iterable) + ' is not iterable');\n    // optimisation for array iterators\n    if (isArrayIteratorMethod$1(iterFn)) {\n      for (index = 0, length = lengthOfArrayLike$6(iterable); length > index; index++) {\n        result = callFn(iterable[index]);\n        if (result && isPrototypeOf$2(ResultPrototype, result)) return result;\n      } return new Result(false);\n    }\n    iterator = getIterator$1(iterable, iterFn);\n  }\n\n  next = iterator.next;\n  while (!(step = call$c(next, iterator)).done) {\n    try {\n      result = callFn(step.value);\n    } catch (error) {\n      iteratorClose(iterator, 'throw', error);\n    }\n    if (typeof result == 'object' && result && isPrototypeOf$2(ResultPrototype, result)) return result;\n  } return new Result(false);\n};\n\nvar wellKnownSymbol$9 = wellKnownSymbol$j;\n\nvar ITERATOR$3 = wellKnownSymbol$9('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var called = 0;\n  var iteratorWithReturn = {\n    next: function () {\n      return { done: !!called++ };\n    },\n    'return': function () {\n      SAFE_CLOSING = true;\n    }\n  };\n  iteratorWithReturn[ITERATOR$3] = function () {\n    return this;\n  };\n  // eslint-disable-next-line es-x/no-array-from, no-throw-literal -- required for testing\n  Array.from(iteratorWithReturn, function () { throw 2; });\n} catch (error) { /* empty */ }\n\nvar checkCorrectnessOfIteration$2 = function (exec, SKIP_CLOSING) {\n  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;\n  var ITERATION_SUPPORT = false;\n  try {\n    var object = {};\n    object[ITERATOR$3] = function () {\n      return {\n        next: function () {\n          return { done: ITERATION_SUPPORT = true };\n        }\n      };\n    };\n    exec(object);\n  } catch (error) { /* empty */ }\n  return ITERATION_SUPPORT;\n};\n\nvar NativePromiseConstructor$1 = promiseNativeConstructor;\nvar checkCorrectnessOfIteration$1 = checkCorrectnessOfIteration$2;\nvar FORCED_PROMISE_CONSTRUCTOR$3 = promiseConstructorDetection.CONSTRUCTOR;\n\nvar promiseStaticsIncorrectIteration = FORCED_PROMISE_CONSTRUCTOR$3 || !checkCorrectnessOfIteration$1(function (iterable) {\n  NativePromiseConstructor$1.all(iterable).then(undefined, function () { /* empty */ });\n});\n\nvar $$d = _export;\nvar call$b = functionCall;\nvar aCallable$3 = aCallable$9;\nvar newPromiseCapabilityModule$2 = newPromiseCapability$2;\nvar perform$1 = perform$3;\nvar iterate$1 = iterate$2;\nvar PROMISE_STATICS_INCORRECT_ITERATION$1 = promiseStaticsIncorrectIteration;\n\n// `Promise.all` method\n// https://tc39.es/ecma262/#sec-promise.all\n$$d({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION$1 }, {\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule$2.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform$1(function () {\n      var $promiseResolve = aCallable$3(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate$1(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        remaining++;\n        call$b($promiseResolve, C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n\nvar $$c = _export;\nvar FORCED_PROMISE_CONSTRUCTOR$2 = promiseConstructorDetection.CONSTRUCTOR;\nvar NativePromiseConstructor = promiseNativeConstructor;\nvar getBuiltIn$1 = getBuiltIn$8;\nvar isCallable$6 = isCallable$n;\nvar defineBuiltIn$5 = defineBuiltIn$8;\n\nvar NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;\n\n// `Promise.prototype.catch` method\n// https://tc39.es/ecma262/#sec-promise.prototype.catch\n$$c({ target: 'Promise', proto: true, forced: FORCED_PROMISE_CONSTRUCTOR$2, real: true }, {\n  'catch': function (onRejected) {\n    return this.then(undefined, onRejected);\n  }\n});\n\n// makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`\nif (isCallable$6(NativePromiseConstructor)) {\n  var method = getBuiltIn$1('Promise').prototype['catch'];\n  if (NativePromisePrototype['catch'] !== method) {\n    defineBuiltIn$5(NativePromisePrototype, 'catch', method, { unsafe: true });\n  }\n}\n\nvar $$b = _export;\nvar call$a = functionCall;\nvar aCallable$2 = aCallable$9;\nvar newPromiseCapabilityModule$1 = newPromiseCapability$2;\nvar perform = perform$3;\nvar iterate = iterate$2;\nvar PROMISE_STATICS_INCORRECT_ITERATION = promiseStaticsIncorrectIteration;\n\n// `Promise.race` method\n// https://tc39.es/ecma262/#sec-promise.race\n$$b({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule$1.f(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      var $promiseResolve = aCallable$2(C.resolve);\n      iterate(iterable, function (promise) {\n        call$a($promiseResolve, C, promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n\nvar $$a = _export;\nvar call$9 = functionCall;\nvar newPromiseCapabilityModule = newPromiseCapability$2;\nvar FORCED_PROMISE_CONSTRUCTOR$1 = promiseConstructorDetection.CONSTRUCTOR;\n\n// `Promise.reject` method\n// https://tc39.es/ecma262/#sec-promise.reject\n$$a({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR$1 }, {\n  reject: function reject(r) {\n    var capability = newPromiseCapabilityModule.f(this);\n    call$9(capability.reject, undefined, r);\n    return capability.promise;\n  }\n});\n\nvar anObject$6 = anObject$e;\nvar isObject$6 = isObject$d;\nvar newPromiseCapability = newPromiseCapability$2;\n\nvar promiseResolve$1 = function (C, x) {\n  anObject$6(C);\n  if (isObject$6(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n\nvar $$9 = _export;\nvar getBuiltIn = getBuiltIn$8;\nvar FORCED_PROMISE_CONSTRUCTOR = promiseConstructorDetection.CONSTRUCTOR;\nvar promiseResolve = promiseResolve$1;\n\ngetBuiltIn('Promise');\n\n// `Promise.resolve` method\n// https://tc39.es/ecma262/#sec-promise.resolve\n$$9({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {\n  resolve: function resolve(x) {\n    return promiseResolve(this, x);\n  }\n});\n\nclass WebStorageService {\n  getItem(key) {\n    return new Promise(resolve => {\n      const value = localStorage.getItem(key);\n      resolve(value);\n    });\n  }\n  setItem(key, value) {\n    return new Promise(resolve => {\n      localStorage.setItem(key, value);\n      resolve();\n    });\n  }\n  removeItem(key) {\n    return new Promise(resolve => {\n      localStorage.removeItem(key);\n      resolve();\n    });\n  }\n}\n\nvar objectDefineProperties = {};\n\nvar internalObjectKeys = objectKeysInternal;\nvar enumBugKeys$1 = enumBugKeys$3;\n\n// `Object.keys` method\n// https://tc39.es/ecma262/#sec-object.keys\n// eslint-disable-next-line es-x/no-object-keys -- safe\nvar objectKeys$2 = Object.keys || function keys(O) {\n  return internalObjectKeys(O, enumBugKeys$1);\n};\n\nvar DESCRIPTORS$5 = descriptors;\nvar V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;\nvar definePropertyModule$2 = objectDefineProperty;\nvar anObject$5 = anObject$e;\nvar toIndexedObject$2 = toIndexedObject$6;\nvar objectKeys$1 = objectKeys$2;\n\n// `Object.defineProperties` method\n// https://tc39.es/ecma262/#sec-object.defineproperties\n// eslint-disable-next-line es-x/no-object-defineproperties -- safe\nobjectDefineProperties.f = DESCRIPTORS$5 && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject$5(O);\n  var props = toIndexedObject$2(Properties);\n  var keys = objectKeys$1(Properties);\n  var length = keys.length;\n  var index = 0;\n  var key;\n  while (length > index) definePropertyModule$2.f(O, key = keys[index++], props[key]);\n  return O;\n};\n\n/* global ActiveXObject -- old IE, WSH */\n\nvar anObject$4 = anObject$e;\nvar definePropertiesModule = objectDefineProperties;\nvar enumBugKeys = enumBugKeys$3;\nvar hiddenKeys = hiddenKeys$4;\nvar html = html$2;\nvar documentCreateElement$1 = documentCreateElement$2;\nvar sharedKey$1 = sharedKey$3;\n\nvar GT = '>';\nvar LT = '<';\nvar PROTOTYPE$1 = 'prototype';\nvar SCRIPT = 'script';\nvar IE_PROTO$1 = sharedKey$1('IE_PROTO');\n\nvar EmptyConstructor = function () { /* empty */ };\n\nvar scriptTag = function (content) {\n  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n};\n\n// Create object with fake `null` prototype: use ActiveX Object with cleared prototype\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\n  activeXDocument.write(scriptTag(''));\n  activeXDocument.close();\n  var temp = activeXDocument.parentWindow.Object;\n  activeXDocument = null; // avoid memory leak\n  return temp;\n};\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar NullProtoObjectViaIFrame = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement$1('iframe');\n  var JS = 'java' + SCRIPT + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  // https://github.com/zloirock/core-js/issues/475\n  iframe.src = String(JS);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(scriptTag('document.F=Object'));\n  iframeDocument.close();\n  return iframeDocument.F;\n};\n\n// Check for document.domain and active x support\n// No need to use active x approach when document.domain is not set\n// see https://github.com/es-shims/es5-shim/issues/150\n// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n// avoid IE GC bug\nvar activeXDocument;\nvar NullProtoObject = function () {\n  try {\n    activeXDocument = new ActiveXObject('htmlfile');\n  } catch (error) { /* ignore */ }\n  NullProtoObject = typeof document != 'undefined'\n    ? document.domain && activeXDocument\n      ? NullProtoObjectViaActiveX(activeXDocument) // old IE\n      : NullProtoObjectViaIFrame()\n    : NullProtoObjectViaActiveX(activeXDocument); // WSH\n  var length = enumBugKeys.length;\n  while (length--) delete NullProtoObject[PROTOTYPE$1][enumBugKeys[length]];\n  return NullProtoObject();\n};\n\nhiddenKeys[IE_PROTO$1] = true;\n\n// `Object.create` method\n// https://tc39.es/ecma262/#sec-object.create\n// eslint-disable-next-line es-x/no-object-create -- safe\nvar objectCreate = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    EmptyConstructor[PROTOTYPE$1] = anObject$4(O);\n    result = new EmptyConstructor();\n    EmptyConstructor[PROTOTYPE$1] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO$1] = O;\n  } else result = NullProtoObject();\n  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);\n};\n\nvar wellKnownSymbol$8 = wellKnownSymbol$j;\nvar create$3 = objectCreate;\nvar defineProperty$4 = objectDefineProperty.f;\n\nvar UNSCOPABLES = wellKnownSymbol$8('unscopables');\nvar ArrayPrototype = Array.prototype;\n\n// Array.prototype[@@unscopables]\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\nif (ArrayPrototype[UNSCOPABLES] == undefined) {\n  defineProperty$4(ArrayPrototype, UNSCOPABLES, {\n    configurable: true,\n    value: create$3(null)\n  });\n}\n\n// add a key to Array.prototype[@@unscopables]\nvar addToUnscopables$2 = function (key) {\n  ArrayPrototype[UNSCOPABLES][key] = true;\n};\n\nvar fails$h = fails$s;\n\nvar correctPrototypeGetter = !fails$h(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  // eslint-disable-next-line es-x/no-object-getprototypeof -- required for testing\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n\nvar hasOwn$2 = hasOwnProperty_1;\nvar isCallable$5 = isCallable$n;\nvar toObject$5 = toObject$7;\nvar sharedKey = sharedKey$3;\nvar CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;\n\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar $Object = Object;\nvar ObjectPrototype$2 = $Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.getprototypeof\n// eslint-disable-next-line es-x/no-object-getprototypeof -- safe\nvar objectGetPrototypeOf = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function (O) {\n  var object = toObject$5(O);\n  if (hasOwn$2(object, IE_PROTO)) return object[IE_PROTO];\n  var constructor = object.constructor;\n  if (isCallable$5(constructor) && object instanceof constructor) {\n    return constructor.prototype;\n  } return object instanceof $Object ? ObjectPrototype$2 : null;\n};\n\nvar fails$g = fails$s;\nvar isCallable$4 = isCallable$n;\nvar getPrototypeOf$3 = objectGetPrototypeOf;\nvar defineBuiltIn$4 = defineBuiltIn$8;\nvar wellKnownSymbol$7 = wellKnownSymbol$j;\n\nvar ITERATOR$2 = wellKnownSymbol$7('iterator');\nvar BUGGY_SAFARI_ITERATORS$1 = false;\n\n// `%IteratorPrototype%` object\n// https://tc39.es/ecma262/#sec-%iteratorprototype%-object\nvar IteratorPrototype$2, PrototypeOfArrayIteratorPrototype, arrayIterator;\n\n/* eslint-disable es-x/no-array-prototype-keys -- safe */\nif ([].keys) {\n  arrayIterator = [].keys();\n  // Safari 8 has buggy iterators w/o `next`\n  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;\n  else {\n    PrototypeOfArrayIteratorPrototype = getPrototypeOf$3(getPrototypeOf$3(arrayIterator));\n    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$2 = PrototypeOfArrayIteratorPrototype;\n  }\n}\n\nvar NEW_ITERATOR_PROTOTYPE = IteratorPrototype$2 == undefined || fails$g(function () {\n  var test = {};\n  // FF44- legacy iterators case\n  return IteratorPrototype$2[ITERATOR$2].call(test) !== test;\n});\n\nif (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$2 = {};\n\n// `%IteratorPrototype%[@@iterator]()` method\n// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator\nif (!isCallable$4(IteratorPrototype$2[ITERATOR$2])) {\n  defineBuiltIn$4(IteratorPrototype$2, ITERATOR$2, function () {\n    return this;\n  });\n}\n\nvar iteratorsCore = {\n  IteratorPrototype: IteratorPrototype$2,\n  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1\n};\n\nvar IteratorPrototype$1 = iteratorsCore.IteratorPrototype;\nvar create$2 = objectCreate;\nvar createPropertyDescriptor$2 = createPropertyDescriptor$5;\nvar setToStringTag$2 = setToStringTag$4;\nvar Iterators$2 = iterators;\n\nvar returnThis$1 = function () { return this; };\n\nvar createIteratorConstructor$1 = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {\n  var TO_STRING_TAG = NAME + ' Iterator';\n  IteratorConstructor.prototype = create$2(IteratorPrototype$1, { next: createPropertyDescriptor$2(+!ENUMERABLE_NEXT, next) });\n  setToStringTag$2(IteratorConstructor, TO_STRING_TAG, false);\n  Iterators$2[TO_STRING_TAG] = returnThis$1;\n  return IteratorConstructor;\n};\n\nvar $$8 = _export;\nvar call$8 = functionCall;\nvar FunctionName$1 = functionName;\nvar isCallable$3 = isCallable$n;\nvar createIteratorConstructor = createIteratorConstructor$1;\nvar getPrototypeOf$2 = objectGetPrototypeOf;\nvar setPrototypeOf$4 = objectSetPrototypeOf;\nvar setToStringTag$1 = setToStringTag$4;\nvar createNonEnumerableProperty$5 = createNonEnumerableProperty$8;\nvar defineBuiltIn$3 = defineBuiltIn$8;\nvar wellKnownSymbol$6 = wellKnownSymbol$j;\nvar Iterators$1 = iterators;\nvar IteratorsCore = iteratorsCore;\n\nvar PROPER_FUNCTION_NAME$2 = FunctionName$1.PROPER;\nvar CONFIGURABLE_FUNCTION_NAME$1 = FunctionName$1.CONFIGURABLE;\nvar IteratorPrototype = IteratorsCore.IteratorPrototype;\nvar BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\nvar ITERATOR$1 = wellKnownSymbol$6('iterator');\nvar KEYS = 'keys';\nvar VALUES = 'values';\nvar ENTRIES = 'entries';\n\nvar returnThis = function () { return this; };\n\nvar defineIterator$1 = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n  createIteratorConstructor(IteratorConstructor, NAME, next);\n\n  var getIterationMethod = function (KIND) {\n    if (KIND === DEFAULT && defaultIterator) return defaultIterator;\n    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];\n    switch (KIND) {\n      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };\n      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };\n      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };\n    } return function () { return new IteratorConstructor(this); };\n  };\n\n  var TO_STRING_TAG = NAME + ' Iterator';\n  var INCORRECT_VALUES_NAME = false;\n  var IterablePrototype = Iterable.prototype;\n  var nativeIterator = IterablePrototype[ITERATOR$1]\n    || IterablePrototype['@@iterator']\n    || DEFAULT && IterablePrototype[DEFAULT];\n  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\n  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n  var CurrentIteratorPrototype, methods, KEY;\n\n  // fix native\n  if (anyNativeIterator) {\n    CurrentIteratorPrototype = getPrototypeOf$2(anyNativeIterator.call(new Iterable()));\n    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\n      if (getPrototypeOf$2(CurrentIteratorPrototype) !== IteratorPrototype) {\n        if (setPrototypeOf$4) {\n          setPrototypeOf$4(CurrentIteratorPrototype, IteratorPrototype);\n        } else if (!isCallable$3(CurrentIteratorPrototype[ITERATOR$1])) {\n          defineBuiltIn$3(CurrentIteratorPrototype, ITERATOR$1, returnThis);\n        }\n      }\n      // Set @@toStringTag to native iterators\n      setToStringTag$1(CurrentIteratorPrototype, TO_STRING_TAG, true);\n    }\n  }\n\n  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF\n  if (PROPER_FUNCTION_NAME$2 && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n    if (CONFIGURABLE_FUNCTION_NAME$1) {\n      createNonEnumerableProperty$5(IterablePrototype, 'name', VALUES);\n    } else {\n      INCORRECT_VALUES_NAME = true;\n      defaultIterator = function values() { return call$8(nativeIterator, this); };\n    }\n  }\n\n  // export additional methods\n  if (DEFAULT) {\n    methods = {\n      values: getIterationMethod(VALUES),\n      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n      entries: getIterationMethod(ENTRIES)\n    };\n    if (FORCED) for (KEY in methods) {\n      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n        defineBuiltIn$3(IterablePrototype, KEY, methods[KEY]);\n      }\n    } else $$8({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);\n  }\n\n  // define iterator\n  if (IterablePrototype[ITERATOR$1] !== defaultIterator) {\n    defineBuiltIn$3(IterablePrototype, ITERATOR$1, defaultIterator, { name: DEFAULT });\n  }\n  Iterators$1[NAME] = defaultIterator;\n\n  return methods;\n};\n\nvar toIndexedObject$1 = toIndexedObject$6;\nvar addToUnscopables$1 = addToUnscopables$2;\nvar Iterators = iterators;\nvar InternalStateModule$3 = internalState;\nvar defineProperty$3 = objectDefineProperty.f;\nvar defineIterator = defineIterator$1;\nvar DESCRIPTORS$4 = descriptors;\n\nvar ARRAY_ITERATOR = 'Array Iterator';\nvar setInternalState$2 = InternalStateModule$3.set;\nvar getInternalState$4 = InternalStateModule$3.getterFor(ARRAY_ITERATOR);\n\n// `Array.prototype.entries` method\n// https://tc39.es/ecma262/#sec-array.prototype.entries\n// `Array.prototype.keys` method\n// https://tc39.es/ecma262/#sec-array.prototype.keys\n// `Array.prototype.values` method\n// https://tc39.es/ecma262/#sec-array.prototype.values\n// `Array.prototype[@@iterator]` method\n// https://tc39.es/ecma262/#sec-array.prototype-@@iterator\n// `CreateArrayIterator` internal method\n// https://tc39.es/ecma262/#sec-createarrayiterator\nvar es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {\n  setInternalState$2(this, {\n    type: ARRAY_ITERATOR,\n    target: toIndexedObject$1(iterated), // target\n    index: 0,                          // next index\n    kind: kind                         // kind\n  });\n// `%ArrayIteratorPrototype%.next` method\n// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next\n}, function () {\n  var state = getInternalState$4(this);\n  var target = state.target;\n  var kind = state.kind;\n  var index = state.index++;\n  if (!target || index >= target.length) {\n    state.target = undefined;\n    return { value: undefined, done: true };\n  }\n  if (kind == 'keys') return { value: index, done: false };\n  if (kind == 'values') return { value: target[index], done: false };\n  return { value: [index, target[index]], done: false };\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values%\n// https://tc39.es/ecma262/#sec-createunmappedargumentsobject\n// https://tc39.es/ecma262/#sec-createmappedargumentsobject\nvar values = Iterators.Arguments = Iterators.Array;\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables$1('keys');\naddToUnscopables$1('values');\naddToUnscopables$1('entries');\n\n// V8 ~ Chrome 45- bug\nif (DESCRIPTORS$4 && values.name !== 'values') try {\n  defineProperty$3(values, 'name', { value: 'values' });\n} catch (error) { /* empty */ }\n\n// iterable DOM collections\n// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\nvar domIterables = {\n  CSSRuleList: 0,\n  CSSStyleDeclaration: 0,\n  CSSValueList: 0,\n  ClientRectList: 0,\n  DOMRectList: 0,\n  DOMStringList: 0,\n  DOMTokenList: 1,\n  DataTransferItemList: 0,\n  FileList: 0,\n  HTMLAllCollection: 0,\n  HTMLCollection: 0,\n  HTMLFormElement: 0,\n  HTMLSelectElement: 0,\n  MediaList: 0,\n  MimeTypeArray: 0,\n  NamedNodeMap: 0,\n  NodeList: 1,\n  PaintRequestList: 0,\n  Plugin: 0,\n  PluginArray: 0,\n  SVGLengthList: 0,\n  SVGNumberList: 0,\n  SVGPathSegList: 0,\n  SVGPointList: 0,\n  SVGStringList: 0,\n  SVGTransformList: 0,\n  SourceBufferList: 0,\n  StyleSheetList: 0,\n  TextTrackCueList: 0,\n  TextTrackList: 0,\n  TouchList: 0\n};\n\n// in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`\nvar documentCreateElement = documentCreateElement$2;\n\nvar classList = documentCreateElement('span').classList;\nvar DOMTokenListPrototype$1 = classList && classList.constructor && classList.constructor.prototype;\n\nvar domTokenListPrototype = DOMTokenListPrototype$1 === Object.prototype ? undefined : DOMTokenListPrototype$1;\n\nvar global$b = global$t;\nvar DOMIterables = domIterables;\nvar DOMTokenListPrototype = domTokenListPrototype;\nvar ArrayIteratorMethods = es_array_iterator;\nvar createNonEnumerableProperty$4 = createNonEnumerableProperty$8;\nvar wellKnownSymbol$5 = wellKnownSymbol$j;\n\nvar ITERATOR = wellKnownSymbol$5('iterator');\nvar TO_STRING_TAG$1 = wellKnownSymbol$5('toStringTag');\nvar ArrayValues = ArrayIteratorMethods.values;\n\nvar handlePrototype = function (CollectionPrototype, COLLECTION_NAME) {\n  if (CollectionPrototype) {\n    // some Chrome versions have non-configurable methods on DOMTokenList\n    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {\n      createNonEnumerableProperty$4(CollectionPrototype, ITERATOR, ArrayValues);\n    } catch (error) {\n      CollectionPrototype[ITERATOR] = ArrayValues;\n    }\n    if (!CollectionPrototype[TO_STRING_TAG$1]) {\n      createNonEnumerableProperty$4(CollectionPrototype, TO_STRING_TAG$1, COLLECTION_NAME);\n    }\n    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {\n      // some Chrome versions have non-configurable methods on DOMTokenList\n      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {\n        createNonEnumerableProperty$4(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);\n      } catch (error) {\n        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];\n      }\n    }\n  }\n};\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  handlePrototype(global$b[COLLECTION_NAME] && global$b[COLLECTION_NAME].prototype, COLLECTION_NAME);\n}\n\nhandlePrototype(DOMTokenListPrototype, 'DOMTokenList');\n\nclass Logger {\n  constructor(namespace) {\n    this.namespace = namespace;\n  }\n  emit(method, ...params) {\n    if (!Logger.debug) {\n      return;\n    }\n    if (this.namespace && method !== \"error\") {\n      // eslint-disable-next-line no-console\n      console[method](this.namespace, ...params);\n      return;\n    }\n    // eslint-disable-next-line no-console\n    console[method](...params);\n  }\n  log(...params) {\n    this.emit(\"log\", ...params);\n  }\n  info(...params) {\n    this.emit(\"info\", ...params);\n  }\n  warn(...params) {\n    this.emit(\"warn\", ...params);\n  }\n  error(...params) {\n    this.emit(\"error\", ...params);\n  }\n}\nLogger.debug = false;\nconst logger = new Logger();\n\nvar $$7 = _export;\nvar $includes = arrayIncludes.includes;\nvar fails$f = fails$s;\nvar addToUnscopables = addToUnscopables$2;\n\n// FF99+ bug\nvar BROKEN_ON_SPARSE = fails$f(function () {\n  return !Array(1).includes();\n});\n\n// `Array.prototype.includes` method\n// https://tc39.es/ecma262/#sec-array.prototype.includes\n$$7({ target: 'Array', proto: true, forced: BROKEN_ON_SPARSE }, {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('includes');\n\nvar isObject$5 = isObject$d;\nvar classof$6 = classofRaw$1;\nvar wellKnownSymbol$4 = wellKnownSymbol$j;\n\nvar MATCH$1 = wellKnownSymbol$4('match');\n\n// `IsRegExp` abstract operation\n// https://tc39.es/ecma262/#sec-isregexp\nvar isRegexp = function (it) {\n  var isRegExp;\n  return isObject$5(it) && ((isRegExp = it[MATCH$1]) !== undefined ? !!isRegExp : classof$6(it) == 'RegExp');\n};\n\nvar isRegExp$1 = isRegexp;\n\nvar $TypeError$3 = TypeError;\n\nvar notARegexp = function (it) {\n  if (isRegExp$1(it)) {\n    throw $TypeError$3(\"The method doesn't accept regular expressions\");\n  } return it;\n};\n\nvar classof$5 = classof$9;\n\nvar $String = String;\n\nvar toString$5 = function (argument) {\n  if (classof$5(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');\n  return $String(argument);\n};\n\nvar wellKnownSymbol$3 = wellKnownSymbol$j;\n\nvar MATCH = wellKnownSymbol$3('match');\n\nvar correctIsRegexpLogic = function (METHOD_NAME) {\n  var regexp = /./;\n  try {\n    '/./'[METHOD_NAME](regexp);\n  } catch (error1) {\n    try {\n      regexp[MATCH] = false;\n      return '/./'[METHOD_NAME](regexp);\n    } catch (error2) { /* empty */ }\n  } return false;\n};\n\nvar $$6 = _export;\nvar uncurryThis$b = functionUncurryThis;\nvar notARegExp = notARegexp;\nvar requireObjectCoercible$3 = requireObjectCoercible$6;\nvar toString$4 = toString$5;\nvar correctIsRegExpLogic = correctIsRegexpLogic;\n\nvar stringIndexOf = uncurryThis$b(''.indexOf);\n\n// `String.prototype.includes` method\n// https://tc39.es/ecma262/#sec-string.prototype.includes\n$$6({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~stringIndexOf(\n      toString$4(requireObjectCoercible$3(this)),\n      toString$4(notARegExp(searchString)),\n      arguments.length > 1 ? arguments[1] : undefined\n    );\n  }\n});\n\n// a string of all valid unicode whitespaces\nvar whitespaces$2 = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002' +\n  '\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n\nvar uncurryThis$a = functionUncurryThis;\nvar requireObjectCoercible$2 = requireObjectCoercible$6;\nvar toString$3 = toString$5;\nvar whitespaces$1 = whitespaces$2;\n\nvar replace$1 = uncurryThis$a(''.replace);\nvar whitespace = '[' + whitespaces$1 + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod$3 = function (TYPE) {\n  return function ($this) {\n    var string = toString$3(requireObjectCoercible$2($this));\n    if (TYPE & 1) string = replace$1(string, ltrim, '');\n    if (TYPE & 2) string = replace$1(string, rtrim, '');\n    return string;\n  };\n};\n\nvar stringTrim = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.es/ecma262/#sec-string.prototype.trimstart\n  start: createMethod$3(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.es/ecma262/#sec-string.prototype.trimend\n  end: createMethod$3(2),\n  // `String.prototype.trim` method\n  // https://tc39.es/ecma262/#sec-string.prototype.trim\n  trim: createMethod$3(3)\n};\n\nvar PROPER_FUNCTION_NAME$1 = functionName.PROPER;\nvar fails$e = fails$s;\nvar whitespaces = whitespaces$2;\n\nvar non = '\\u200B\\u0085\\u180E';\n\n// check that a method works with the correct list\n// of whitespaces and has a correct name\nvar stringTrimForced = function (METHOD_NAME) {\n  return fails$e(function () {\n    return !!whitespaces[METHOD_NAME]()\n      || non[METHOD_NAME]() !== non\n      || (PROPER_FUNCTION_NAME$1 && whitespaces[METHOD_NAME].name !== METHOD_NAME);\n  });\n};\n\nvar $$5 = _export;\nvar $trim = stringTrim.trim;\nvar forcedStringTrimMethod = stringTrimForced;\n\n// `String.prototype.trim` method\n// https://tc39.es/ecma262/#sec-string.prototype.trim\n$$5({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {\n  trim: function trim() {\n    return $trim(this);\n  }\n});\n\nvar DESCRIPTORS$3 = descriptors;\nvar uncurryThis$9 = functionUncurryThis;\nvar call$7 = functionCall;\nvar fails$d = fails$s;\nvar objectKeys = objectKeys$2;\nvar getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;\nvar propertyIsEnumerableModule = objectPropertyIsEnumerable;\nvar toObject$4 = toObject$7;\nvar IndexedObject$2 = indexedObject;\n\n// eslint-disable-next-line es-x/no-object-assign -- safe\nvar $assign = Object.assign;\n// eslint-disable-next-line es-x/no-object-defineproperty -- required for testing\nvar defineProperty$2 = Object.defineProperty;\nvar concat = uncurryThis$9([].concat);\n\n// `Object.assign` method\n// https://tc39.es/ecma262/#sec-object.assign\nvar objectAssign = !$assign || fails$d(function () {\n  // should have correct order of operations (Edge bug)\n  if (DESCRIPTORS$3 && $assign({ b: 1 }, $assign(defineProperty$2({}, 'a', {\n    enumerable: true,\n    get: function () {\n      defineProperty$2(this, 'b', {\n        value: 3,\n        enumerable: false\n      });\n    }\n  }), { b: 2 })).b !== 1) return true;\n  // should work with symbols and should have deterministic property order (V8 bug)\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line es-x/no-symbol -- safe\n  var symbol = Symbol();\n  var alphabet = 'abcdefghijklmnopqrst';\n  A[symbol] = 7;\n  alphabet.split('').forEach(function (chr) { B[chr] = chr; });\n  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`\n  var T = toObject$4(target);\n  var argumentsLength = arguments.length;\n  var index = 1;\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  var propertyIsEnumerable = propertyIsEnumerableModule.f;\n  while (argumentsLength > index) {\n    var S = IndexedObject$2(arguments[index++]);\n    var keys = getOwnPropertySymbols ? concat(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) {\n      key = keys[j++];\n      if (!DESCRIPTORS$3 || call$7(propertyIsEnumerable, S, key)) T[key] = S[key];\n    }\n  } return T;\n} : $assign;\n\nvar $$4 = _export;\nvar assign = objectAssign;\n\n// `Object.assign` method\n// https://tc39.es/ecma262/#sec-object.assign\n// eslint-disable-next-line es-x/no-object-assign -- required for testing\n$$4({ target: 'Object', stat: true, arity: 2, forced: Object.assign !== assign }, {\n  assign: assign\n});\n\nclass EventEmitter {\n  constructor() {\n    this.emitter = new events.EventEmitter();\n  }\n  on(eventName, callback) {\n    this.emitter.on(eventName, callback);\n    return {\n      remove: () => this.emitter.off(eventName, callback)\n    };\n  }\n  off(eventName, callback) {\n    this.emitter.off(eventName, callback);\n  }\n  emit(eventName, event) {\n    this.emitter.emit(eventName, event);\n  }\n}\n\nconst PACKAGE_NAME = \"near-wallet-selector\";\nconst RECENTLY_SIGNED_IN_WALLETS = \"recentlySignedInWallets\";\nconst CONTRACT = \"contract\";\nconst PENDING_CONTRACT = \"contract:pending\";\nconst SELECTED_WALLET_ID = `selectedWalletId`;\nconst PENDING_SELECTED_WALLET_ID = `selectedWalletId:pending`;\n\nclass WalletModules {\n  constructor({\n    factories,\n    storage,\n    options,\n    store,\n    emitter,\n    provider\n  }) {\n    this.factories = factories;\n    this.storage = storage;\n    this.options = options;\n    this.store = store;\n    this.emitter = emitter;\n    this.provider = provider;\n    this.modules = [];\n    this.instances = {};\n  }\n  validateWallet(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let accounts = [];\n      const wallet = yield this.getWallet(id);\n      if (wallet) {\n        // Ensure our persistent state aligns with the selected wallet.\n        // For example a wallet is selected, but it returns no accounts (not signed in).\n        accounts = yield wallet.getAccounts().catch(err => {\n          logger.log(`Failed to validate ${wallet.id} during setup`);\n          logger.error(err);\n          return [];\n        });\n      }\n      return accounts;\n    });\n  }\n  resolveStorageState() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const jsonStorage = new JsonStorage(this.storage, PACKAGE_NAME);\n      const pendingSelectedWalletId = yield jsonStorage.getItem(PENDING_SELECTED_WALLET_ID);\n      const pendingContract = yield jsonStorage.getItem(PENDING_CONTRACT);\n      if (pendingSelectedWalletId && pendingContract) {\n        const _accounts = yield this.validateWallet(pendingSelectedWalletId);\n        yield jsonStorage.removeItem(PENDING_SELECTED_WALLET_ID);\n        yield jsonStorage.removeItem(PENDING_CONTRACT);\n        if (_accounts.length) {\n          const {\n            selectedWalletId: _selectedWalletId\n          } = this.store.getState();\n          const selectedWallet = yield this.getWallet(_selectedWalletId);\n          if (selectedWallet && pendingSelectedWalletId !== _selectedWalletId) {\n            yield selectedWallet.signOut().catch(err => {\n              logger.log(\"Failed to sign out existing wallet\");\n              logger.error(err);\n            });\n          }\n          const recentlySignedInWalletsFromPending = yield this.setWalletAsRecentlySignedIn(pendingSelectedWalletId);\n          return {\n            accounts: _accounts,\n            contract: pendingContract,\n            selectedWalletId: pendingSelectedWalletId,\n            recentlySignedInWallets: recentlySignedInWalletsFromPending\n          };\n        }\n      }\n      const {\n        contract,\n        selectedWalletId\n      } = this.store.getState();\n      const accounts = yield this.validateWallet(selectedWalletId);\n      const recentlySignedInWallets = yield jsonStorage.getItem(RECENTLY_SIGNED_IN_WALLETS);\n      if (!accounts.length) {\n        return {\n          accounts: [],\n          contract: null,\n          selectedWalletId: null,\n          recentlySignedInWallets: recentlySignedInWallets || []\n        };\n      }\n      return {\n        accounts,\n        contract,\n        selectedWalletId,\n        recentlySignedInWallets: recentlySignedInWallets || []\n      };\n    });\n  }\n  setWalletAsRecentlySignedIn(walletId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const jsonStorage = new JsonStorage(this.storage, PACKAGE_NAME);\n      let recentlySignedInWallets = yield jsonStorage.getItem(RECENTLY_SIGNED_IN_WALLETS);\n      if (!recentlySignedInWallets) {\n        recentlySignedInWallets = [];\n      }\n      if (!recentlySignedInWallets.includes(walletId)) {\n        recentlySignedInWallets.unshift(walletId);\n        recentlySignedInWallets = recentlySignedInWallets.slice(0, 5);\n        yield jsonStorage.setItem(RECENTLY_SIGNED_IN_WALLETS, recentlySignedInWallets);\n      }\n      return recentlySignedInWallets;\n    });\n  }\n  signOutWallet(walletId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wallet = yield this.getWallet(walletId);\n      yield wallet.signOut().catch(err => {\n        logger.log(`Failed to sign out ${wallet.id}`);\n        logger.error(err);\n        // At least clean up state on our side.\n        this.onWalletSignedOut(wallet.id);\n      });\n    });\n  }\n  onWalletSignedIn(walletId, {\n    accounts,\n    contractId,\n    methodNames\n  }) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        selectedWalletId\n      } = this.store.getState();\n      const jsonStorage = new JsonStorage(this.storage, PACKAGE_NAME);\n      const contract = {\n        contractId,\n        methodNames\n      };\n      if (!accounts.length) {\n        const module = this.getModule(walletId);\n        // We can't guarantee the user will actually sign in with browser wallets.\n        // Best we can do is set in storage and validate on init.\n        if (module.type === \"browser\") {\n          yield jsonStorage.setItem(PENDING_SELECTED_WALLET_ID, walletId);\n          yield jsonStorage.setItem(PENDING_CONTRACT, contract);\n        }\n        return;\n      }\n      if (selectedWalletId && selectedWalletId !== walletId) {\n        yield this.signOutWallet(selectedWalletId);\n      }\n      const recentlySignedInWallets = yield this.setWalletAsRecentlySignedIn(walletId);\n      this.store.dispatch({\n        type: \"WALLET_CONNECTED\",\n        payload: {\n          walletId,\n          contract,\n          accounts,\n          recentlySignedInWallets\n        }\n      });\n      this.emitter.emit(\"signedIn\", {\n        walletId,\n        contractId,\n        methodNames,\n        accounts\n      });\n    });\n  }\n  onWalletSignedOut(walletId) {\n    this.store.dispatch({\n      type: \"WALLET_DISCONNECTED\",\n      payload: {\n        walletId\n      }\n    });\n    this.emitter.emit(\"signedOut\", {\n      walletId\n    });\n  }\n  setupWalletEmitter(module) {\n    const emitter = new EventEmitter();\n    emitter.on(\"signedOut\", () => {\n      this.onWalletSignedOut(module.id);\n    });\n    emitter.on(\"signedIn\", event => {\n      this.onWalletSignedIn(module.id, event);\n    });\n    emitter.on(\"accountsChanged\", ({\n      accounts\n    }) => __awaiter(this, void 0, void 0, function* () {\n      this.emitter.emit(\"accountsChanged\", {\n        walletId: module.id,\n        accounts\n      });\n      if (!accounts.length) {\n        return this.signOutWallet(module.id);\n      }\n      this.store.dispatch({\n        type: \"ACCOUNTS_CHANGED\",\n        payload: {\n          walletId: module.id,\n          accounts\n        }\n      });\n    }));\n    emitter.on(\"networkChanged\", ({\n      networkId\n    }) => {\n      this.emitter.emit(\"networkChanged\", {\n        walletId: module.id,\n        networkId\n      });\n    });\n    emitter.on(\"uriChanged\", ({\n      uri\n    }) => {\n      this.emitter.emit(\"uriChanged\", {\n        walletId: module.id,\n        uri\n      });\n    });\n    return emitter;\n  }\n  validateSignMessageParams({\n    message,\n    nonce,\n    recipient\n  }) {\n    if (!message || message.trim() === \"\") {\n      throw new Error(\"Invalid message. It must be a non-empty string.\");\n    }\n    if (!Buffer.isBuffer(nonce) || nonce.length !== 32) {\n      throw new Error(\"Invalid nonce. It must be a Buffer with a length of 32 bytes.\");\n    }\n    if (!recipient || recipient.trim() === \"\") {\n      throw new Error(\"Invalid recipient. It must be a non-empty string.\");\n    }\n  }\n  decorateWallet(wallet) {\n    const _signIn = wallet.signIn;\n    const _signOut = wallet.signOut;\n    const _signMessage = wallet.signMessage;\n    wallet.signIn = params => __awaiter(this, void 0, void 0, function* () {\n      const accounts = yield _signIn(params);\n      const {\n        contractId,\n        methodNames = []\n      } = params;\n      yield this.onWalletSignedIn(wallet.id, {\n        accounts,\n        contractId,\n        methodNames\n      });\n      return accounts;\n    });\n    wallet.signOut = () => __awaiter(this, void 0, void 0, function* () {\n      yield _signOut();\n      this.onWalletSignedOut(wallet.id);\n    });\n    wallet.signMessage = params => __awaiter(this, void 0, void 0, function* () {\n      if (_signMessage === undefined) {\n        throw Error(`The signMessage method is not supported by ${wallet.metadata.name}`);\n      }\n      this.validateSignMessageParams(params);\n      return yield _signMessage(params);\n    });\n    return wallet;\n  }\n  setupInstance(module) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!module.metadata.available) {\n        const message = module.type === \"injected\" ? \"not installed\" : \"not available\";\n        throw Error(`${module.metadata.name} is ${message}`);\n      }\n      const wallet = Object.assign({\n        id: module.id,\n        type: module.type,\n        metadata: module.metadata\n      }, yield module.init({\n        id: module.id,\n        type: module.type,\n        metadata: module.metadata,\n        options: this.options,\n        store: this.store.toReadOnly(),\n        provider: this.provider,\n        emitter: this.setupWalletEmitter(module),\n        logger: new Logger(module.id),\n        storage: new JsonStorage(this.storage, [PACKAGE_NAME, module.id])\n      }));\n      return this.decorateWallet(wallet);\n    });\n  }\n  getModule(id) {\n    return this.modules.find(x => x.id === id);\n  }\n  getWallet(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const module = this.getModule(id);\n      if (!module) {\n        return null;\n      }\n      const {\n        selectedWalletId\n      } = this.store.getState();\n      // If user uninstalled/removed a wallet which was previously signed in with\n      // best we can do is clean up state on our side.\n      if (!module.metadata.available && selectedWalletId) {\n        this.onWalletSignedOut(selectedWalletId);\n        return null;\n      }\n      return yield module.wallet();\n    });\n  }\n  setup() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const modules = [];\n      for (let i = 0; i < this.factories.length; i += 1) {\n        const module = yield this.factories[i]({\n          options: this.options\n        }).catch(err => {\n          logger.log(\"Failed to setup module\");\n          logger.error(err);\n          return null;\n        });\n        // Filter out wallets that aren't available.\n        if (!module) {\n          continue;\n        }\n        // Skip duplicated module.\n        if (modules.some(x => x.id === module.id)) {\n          continue;\n        }\n        modules.push({\n          id: module.id,\n          type: module.type,\n          metadata: module.metadata,\n          wallet: () => __awaiter(this, void 0, void 0, function* () {\n            let instance = this.instances[module.id];\n            if (instance) {\n              return instance;\n            }\n            instance = yield this.setupInstance(module);\n            this.instances[module.id] = instance;\n            return instance;\n          })\n        });\n      }\n      this.modules = modules;\n      const {\n        accounts,\n        contract,\n        selectedWalletId,\n        recentlySignedInWallets\n      } = yield this.resolveStorageState();\n      this.store.dispatch({\n        type: \"SETUP_WALLET_MODULES\",\n        payload: {\n          modules,\n          accounts,\n          contract,\n          selectedWalletId,\n          recentlySignedInWallets\n        }\n      });\n      for (let i = 0; i < this.modules.length; i++) {\n        if (this.modules[i].type !== \"instant-link\") {\n          continue;\n        }\n        const wallet = yield this.modules[i].wallet();\n        if (!wallet.metadata.runOnStartup) {\n          continue;\n        }\n        try {\n          yield wallet.signIn({\n            contractId: wallet.getContractId()\n          });\n        } catch (err) {\n          logger.error(\"Failed to sign in to wallet. \" + err);\n        }\n      }\n    });\n  }\n}\n\nconst getNetworkPreset = networkId => {\n  switch (networkId) {\n    case \"mainnet\":\n      return {\n        networkId,\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        helperUrl: \"https://helper.mainnet.near.org\",\n        explorerUrl: \"https://explorer.near.org\",\n        indexerUrl: \"https://api.kitwallet.app\"\n      };\n    case \"testnet\":\n      return {\n        networkId,\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        helperUrl: \"https://helper.testnet.near.org\",\n        explorerUrl: \"https://explorer.testnet.near.org\",\n        indexerUrl: \"https://testnet-api.kitwallet.app\"\n      };\n    default:\n      throw Error(`Failed to find config for: '${networkId}'`);\n  }\n};\nconst resolveNetwork = network => {\n  return typeof network === \"string\" ? getNetworkPreset(network) : network;\n};\nconst resolveOptions = params => {\n  const options = {\n    languageCode: params.languageCode || undefined,\n    network: resolveNetwork(params.network),\n    debug: params.debug || false,\n    optimizeWalletOrder: params.optimizeWalletOrder === false ? false : true,\n    randomizeWalletOrder: params.randomizeWalletOrder || false,\n    relayerUrl: params.relayerUrl || undefined\n  };\n  return {\n    options,\n    storage: params.storage || new WebStorageService()\n  };\n};\n\nconst reducer = (state, action) => {\n  logger.log(\"Store Action\", action);\n  switch (action.type) {\n    case \"SETUP_WALLET_MODULES\":\n      {\n        const {\n          modules,\n          accounts,\n          contract,\n          selectedWalletId,\n          recentlySignedInWallets\n        } = action.payload;\n        const accountStates = accounts.map((account, i) => {\n          return Object.assign(Object.assign({}, account), {\n            active: i === 0\n          });\n        });\n        return Object.assign(Object.assign({}, state), {\n          modules,\n          accounts: accountStates,\n          contract,\n          selectedWalletId,\n          recentlySignedInWallets\n        });\n      }\n    case \"WALLET_CONNECTED\":\n      {\n        const {\n          walletId,\n          contract,\n          accounts,\n          recentlySignedInWallets\n        } = action.payload;\n        if (!accounts.length) {\n          return state;\n        }\n        const activeAccountIndex = state.accounts.findIndex(account => account.active);\n        const accountStates = accounts.map((account, i) => {\n          return Object.assign(Object.assign({}, account), {\n            active: i === (activeAccountIndex > -1 ? activeAccountIndex : 0)\n          });\n        });\n        return Object.assign(Object.assign({}, state), {\n          contract,\n          accounts: accountStates,\n          selectedWalletId: walletId,\n          recentlySignedInWallets\n        });\n      }\n    case \"WALLET_DISCONNECTED\":\n      {\n        const {\n          walletId\n        } = action.payload;\n        if (walletId !== state.selectedWalletId) {\n          return state;\n        }\n        return Object.assign(Object.assign({}, state), {\n          contract: null,\n          accounts: [],\n          selectedWalletId: null\n        });\n      }\n    case \"ACCOUNTS_CHANGED\":\n      {\n        const {\n          walletId,\n          accounts\n        } = action.payload;\n        if (walletId !== state.selectedWalletId) {\n          return state;\n        }\n        const activeAccount = state.accounts.find(account => account.active);\n        const isActiveAccountRemoved = !accounts.some(account => account.accountId === (activeAccount === null || activeAccount === void 0 ? void 0 : activeAccount.accountId));\n        const accountStates = accounts.map((account, i) => {\n          return Object.assign(Object.assign({}, account), {\n            active: isActiveAccountRemoved ? i === 0 : account.accountId === (activeAccount === null || activeAccount === void 0 ? void 0 : activeAccount.accountId)\n          });\n        });\n        return Object.assign(Object.assign({}, state), {\n          accounts: accountStates\n        });\n      }\n    case \"SET_ACTIVE_ACCOUNT\":\n      {\n        const {\n          accountId\n        } = action.payload;\n        const accountStates = state.accounts.map(account => {\n          return Object.assign(Object.assign({}, account), {\n            active: account.accountId === accountId\n          });\n        });\n        return Object.assign(Object.assign({}, state), {\n          accounts: accountStates\n        });\n      }\n    default:\n      return state;\n  }\n};\nconst createStore = storage => __awaiter(void 0, void 0, void 0, function* () {\n  const jsonStorage = new JsonStorage(storage, PACKAGE_NAME);\n  const initialState = {\n    modules: [],\n    accounts: [],\n    contract: yield jsonStorage.getItem(CONTRACT),\n    selectedWalletId: yield jsonStorage.getItem(SELECTED_WALLET_ID),\n    recentlySignedInWallets: (yield jsonStorage.getItem(RECENTLY_SIGNED_IN_WALLETS)) || []\n  };\n  const state$ = new rxjs.BehaviorSubject(initialState);\n  const actions$ = new rxjs.Subject();\n  actions$.pipe(rxjs.scan(reducer, initialState)).subscribe(state$);\n  const syncStorage = (prevState, state, storageKey, property) => __awaiter(void 0, void 0, void 0, function* () {\n    if (state[property] === prevState[property]) {\n      return;\n    }\n    if (state[property]) {\n      yield jsonStorage.setItem(storageKey, state[property]);\n      return;\n    }\n    yield jsonStorage.removeItem(storageKey);\n  });\n  let prevState = state$.getValue();\n  state$.subscribe(state => {\n    syncStorage(prevState, state, SELECTED_WALLET_ID, \"selectedWalletId\");\n    syncStorage(prevState, state, CONTRACT, \"contract\");\n    syncStorage(prevState, state, RECENTLY_SIGNED_IN_WALLETS, \"recentlySignedInWallets\");\n    prevState = state;\n  });\n  return {\n    observable: state$,\n    getState: () => state$.getValue(),\n    dispatch: action => actions$.next(action),\n    toReadOnly: () => ({\n      getState: () => state$.getValue(),\n      observable: state$.asObservable()\n    })\n  };\n});\n\nlet walletSelectorInstance = null;\nconst createSelector = (options, store, walletModules, emitter) => {\n  return {\n    options,\n    store: store.toReadOnly(),\n    wallet: id => __awaiter(void 0, void 0, void 0, function* () {\n      const {\n        selectedWalletId\n      } = store.getState();\n      const wallet = yield walletModules.getWallet(id || selectedWalletId);\n      if (!wallet) {\n        if (id) {\n          throw new Error(\"Invalid wallet id\");\n        }\n        throw new Error(\"No wallet selected\");\n      }\n      return wallet;\n    }),\n    setActiveAccount: accountId => {\n      const {\n        accounts\n      } = store.getState();\n      if (!accounts.some(account => account.accountId === accountId)) {\n        throw new Error(\"Invalid account id\");\n      }\n      store.dispatch({\n        type: \"SET_ACTIVE_ACCOUNT\",\n        payload: {\n          accountId\n        }\n      });\n    },\n    isSignedIn() {\n      const {\n        accounts\n      } = store.getState();\n      return Boolean(accounts.length);\n    },\n    on: (eventName, callback) => {\n      return emitter.on(eventName, callback);\n    },\n    off: (eventName, callback) => {\n      emitter.off(eventName, callback);\n    }\n  };\n};\n/**\r\n * Initiates a wallet selector instance\r\n * @param {WalletSelectorParams} params Selector parameters (network, modules...)\r\n * @returns {Promise<WalletSelector>} Returns a WalletSelector object\r\n */\nconst setupWalletSelector = params => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    options,\n    storage\n  } = resolveOptions(params);\n  Logger.debug = options.debug;\n  const emitter = new EventEmitter();\n  const store = yield createStore(storage);\n  const walletModules = new WalletModules({\n    factories: params.modules,\n    storage,\n    options,\n    store,\n    emitter,\n    provider: new Provider(options.network.nodeUrl)\n  });\n  yield walletModules.setup();\n  if (params.allowMultipleSelectors) {\n    return createSelector(options, store, walletModules, emitter);\n  }\n  if (!walletSelectorInstance) {\n    walletSelectorInstance = createSelector(options, store, walletModules, emitter);\n  }\n  return walletSelectorInstance;\n});\n\nconst wait = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\nconst poll = (cb, interval, remaining) => __awaiter(void 0, void 0, void 0, function* () {\n  const result = cb();\n  if (result) {\n    return result;\n  }\n  if (!remaining) {\n    throw new Error(\"Exceeded timeout\");\n  }\n  return wait(interval).then(() => poll(cb, interval, remaining - 1));\n});\nconst waitFor = (cb, opts = {}) => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    timeout = 100,\n    interval = 50\n  } = opts;\n  return Promise.race([wait(timeout).then(() => {\n    throw new Error(\"Exceeded timeout\");\n  }), poll(cb, interval, Math.floor(timeout / interval))]);\n});\n\nconst getActiveAccount = state => {\n  return state.accounts.find(account => account.active) || null;\n};\n\nvar aCallable$1 = aCallable$9;\nvar toObject$3 = toObject$7;\nvar IndexedObject$1 = indexedObject;\nvar lengthOfArrayLike$5 = lengthOfArrayLike$8;\n\nvar $TypeError$2 = TypeError;\n\n// `Array.prototype.{ reduce, reduceRight }` methods implementation\nvar createMethod$2 = function (IS_RIGHT) {\n  return function (that, callbackfn, argumentsLength, memo) {\n    aCallable$1(callbackfn);\n    var O = toObject$3(that);\n    var self = IndexedObject$1(O);\n    var length = lengthOfArrayLike$5(O);\n    var index = IS_RIGHT ? length - 1 : 0;\n    var i = IS_RIGHT ? -1 : 1;\n    if (argumentsLength < 2) while (true) {\n      if (index in self) {\n        memo = self[index];\n        index += i;\n        break;\n      }\n      index += i;\n      if (IS_RIGHT ? index < 0 : length <= index) {\n        throw $TypeError$2('Reduce of empty array with no initial value');\n      }\n    }\n    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {\n      memo = callbackfn(memo, self[index], index, O);\n    }\n    return memo;\n  };\n};\n\nvar arrayReduce = {\n  // `Array.prototype.reduce` method\n  // https://tc39.es/ecma262/#sec-array.prototype.reduce\n  left: createMethod$2(false),\n  // `Array.prototype.reduceRight` method\n  // https://tc39.es/ecma262/#sec-array.prototype.reduceright\n  right: createMethod$2(true)\n};\n\nvar fails$c = fails$s;\n\nvar arrayMethodIsStrict$1 = function (METHOD_NAME, argument) {\n  var method = [][METHOD_NAME];\n  return !!method && fails$c(function () {\n    // eslint-disable-next-line no-useless-call -- required for testing\n    method.call(null, argument || function () { return 1; }, 1);\n  });\n};\n\nvar $$3 = _export;\nvar $reduce = arrayReduce.left;\nvar arrayMethodIsStrict = arrayMethodIsStrict$1;\nvar CHROME_VERSION = engineV8Version;\nvar IS_NODE = engineIsNode;\n\nvar STRICT_METHOD = arrayMethodIsStrict('reduce');\n// Chrome 80-82 has a critical bug\n// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982\nvar CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;\n\n// `Array.prototype.reduce` method\n// https://tc39.es/ecma262/#sec-array.prototype.reduce\n$$3({ target: 'Array', proto: true, forced: !STRICT_METHOD || CHROME_BUG }, {\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    var length = arguments.length;\n    return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : undefined);\n  }\n});\n\nvar anObject$3 = anObject$e;\n\n// `RegExp.prototype.flags` getter implementation\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags\nvar regexpFlags$1 = function () {\n  var that = anObject$3(this);\n  var result = '';\n  if (that.hasIndices) result += 'd';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.dotAll) result += 's';\n  if (that.unicode) result += 'u';\n  if (that.unicodeSets) result += 'v';\n  if (that.sticky) result += 'y';\n  return result;\n};\n\nvar fails$b = fails$s;\nvar global$a = global$t;\n\n// babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError\nvar $RegExp$2 = global$a.RegExp;\n\nvar UNSUPPORTED_Y$2 = fails$b(function () {\n  var re = $RegExp$2('a', 'y');\n  re.lastIndex = 2;\n  return re.exec('abcd') != null;\n});\n\n// UC Browser bug\n// https://github.com/zloirock/core-js/issues/1008\nvar MISSED_STICKY = UNSUPPORTED_Y$2 || fails$b(function () {\n  return !$RegExp$2('a', 'y').sticky;\n});\n\nvar BROKEN_CARET = UNSUPPORTED_Y$2 || fails$b(function () {\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687\n  var re = $RegExp$2('^r', 'gy');\n  re.lastIndex = 2;\n  return re.exec('str') != null;\n});\n\nvar regexpStickyHelpers = {\n  BROKEN_CARET: BROKEN_CARET,\n  MISSED_STICKY: MISSED_STICKY,\n  UNSUPPORTED_Y: UNSUPPORTED_Y$2\n};\n\nvar fails$a = fails$s;\nvar global$9 = global$t;\n\n// babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError\nvar $RegExp$1 = global$9.RegExp;\n\nvar regexpUnsupportedDotAll = fails$a(function () {\n  var re = $RegExp$1('.', 's');\n  return !(re.dotAll && re.exec('\\n') && re.flags === 's');\n});\n\nvar fails$9 = fails$s;\nvar global$8 = global$t;\n\n// babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError\nvar $RegExp = global$8.RegExp;\n\nvar regexpUnsupportedNcg = fails$9(function () {\n  var re = $RegExp('(?<a>b)', 'g');\n  return re.exec('b').groups.a !== 'b' ||\n    'b'.replace(re, '$<a>c') !== 'bc';\n});\n\n/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */\n/* eslint-disable regexp/no-useless-quantifier -- testing */\nvar call$6 = functionCall;\nvar uncurryThis$8 = functionUncurryThis;\nvar toString$2 = toString$5;\nvar regexpFlags = regexpFlags$1;\nvar stickyHelpers$1 = regexpStickyHelpers;\nvar shared = shared$4.exports;\nvar create$1 = objectCreate;\nvar getInternalState$3 = internalState.get;\nvar UNSUPPORTED_DOT_ALL = regexpUnsupportedDotAll;\nvar UNSUPPORTED_NCG = regexpUnsupportedNcg;\n\nvar nativeReplace = shared('native-string-replace', String.prototype.replace);\nvar nativeExec = RegExp.prototype.exec;\nvar patchedExec = nativeExec;\nvar charAt$2 = uncurryThis$8(''.charAt);\nvar indexOf = uncurryThis$8(''.indexOf);\nvar replace = uncurryThis$8(''.replace);\nvar stringSlice$2 = uncurryThis$8(''.slice);\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/;\n  var re2 = /b*/g;\n  call$6(nativeExec, re1, 'a');\n  call$6(nativeExec, re2, 'a');\n  return re1.lastIndex !== 0 || re2.lastIndex !== 0;\n})();\n\nvar UNSUPPORTED_Y$1 = stickyHelpers$1.BROKEN_CARET;\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$1 || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;\n\nif (PATCH) {\n  patchedExec = function exec(string) {\n    var re = this;\n    var state = getInternalState$3(re);\n    var str = toString$2(string);\n    var raw = state.raw;\n    var result, reCopy, lastIndex, match, i, object, group;\n\n    if (raw) {\n      raw.lastIndex = re.lastIndex;\n      result = call$6(patchedExec, raw, str);\n      re.lastIndex = raw.lastIndex;\n      return result;\n    }\n\n    var groups = state.groups;\n    var sticky = UNSUPPORTED_Y$1 && re.sticky;\n    var flags = call$6(regexpFlags, re);\n    var source = re.source;\n    var charsAdded = 0;\n    var strCopy = str;\n\n    if (sticky) {\n      flags = replace(flags, 'y', '');\n      if (indexOf(flags, 'g') === -1) {\n        flags += 'g';\n      }\n\n      strCopy = stringSlice$2(str, re.lastIndex);\n      // Support anchored sticky behavior.\n      if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt$2(str, re.lastIndex - 1) !== '\\n')) {\n        source = '(?: ' + source + ')';\n        strCopy = ' ' + strCopy;\n        charsAdded++;\n      }\n      // ^(? + rx + ) is needed, in combination with some str slicing, to\n      // simulate the 'y' flag.\n      reCopy = new RegExp('^(?:' + source + ')', flags);\n    }\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + source + '$(?!\\\\s)', flags);\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;\n\n    match = call$6(nativeExec, sticky ? reCopy : re, strCopy);\n\n    if (sticky) {\n      if (match) {\n        match.input = stringSlice$2(match.input, charsAdded);\n        match[0] = stringSlice$2(match[0], charsAdded);\n        match.index = re.lastIndex;\n        re.lastIndex += match[0].length;\n      } else re.lastIndex = 0;\n    } else if (UPDATES_LAST_INDEX_WRONG && match) {\n      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      call$6(nativeReplace, match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    if (match && groups) {\n      match.groups = object = create$1(null);\n      for (i = 0; i < groups.length; i++) {\n        group = groups[i];\n        object[group[0]] = match[group[1]];\n      }\n    }\n\n    return match;\n  };\n}\n\nvar regexpExec$3 = patchedExec;\n\nvar $$2 = _export;\nvar exec$1 = regexpExec$3;\n\n// `RegExp.prototype.exec` method\n// https://tc39.es/ecma262/#sec-regexp.prototype.exec\n$$2({ target: 'RegExp', proto: true, forced: /./.exec !== exec$1 }, {\n  exec: exec$1\n});\n\n/* eslint-disable no-useless-escape */\n// https://github.com/DamonOehlman/detect-browser/blob/master/src/index.ts\nconst SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;\nconst userAgentRules = [[\"aol\", /AOLShield\\/([0-9\\._]+)/], [\"edge\", /Edge\\/([0-9\\._]+)/], [\"edge-ios\", /EdgiOS\\/([0-9\\._]+)/], [\"yandexbrowser\", /YaBrowser\\/([0-9\\._]+)/], [\"kakaotalk\", /KAKAOTALK\\s([0-9\\.]+)/], [\"samsung\", /SamsungBrowser\\/([0-9\\.]+)/], [\"silk\", /\\bSilk\\/([0-9._-]+)\\b/], [\"miui\", /MiuiBrowser\\/([0-9\\.]+)$/], [\"beaker\", /BeakerBrowser\\/([0-9\\.]+)/], [\"edge-chromium\", /EdgA?\\/([0-9\\.]+)/], [\"chromium-webview\", /(?!Chrom.*OPR)wv\\).*Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/], [\"chrome\", /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/], [\"phantomjs\", /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/], [\"crios\", /CriOS\\/([0-9\\.]+)(:?\\s|$)/], [\"firefox\", /Firefox\\/([0-9\\.]+)(?:\\s|$)/], [\"fxios\", /FxiOS\\/([0-9\\.]+)/], [\"opera-mini\", /Opera Mini.*Version\\/([0-9\\.]+)/], [\"opera\", /Opera\\/([0-9\\.]+)(?:\\s|$)/], [\"opera\", /OPR\\/([0-9\\.]+)(:?\\s|$)/], [\"pie\", /^Microsoft Pocket Internet Explorer\\/(\\d+\\.\\d+)$/], [\"pie\", /^Mozilla\\/\\d\\.\\d+\\s\\(compatible;\\s(?:MSP?IE|MSInternet Explorer) (\\d+\\.\\d+);.*Windows CE.*\\)$/], [\"netfront\", /^Mozilla\\/\\d\\.\\d+.*NetFront\\/(\\d.\\d)/], [\"ie\", /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/], [\"ie\", /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/], [\"ie\", /MSIE\\s(7\\.0)/], [\"bb10\", /BB10;\\sTouch.*Version\\/([0-9\\.]+)/], [\"android\", /Android\\s([0-9\\.]+)/], [\"ios\", /Version\\/([0-9\\._]+).*Mobile.*Safari.*/], [\"safari\", /Version\\/([0-9\\._]+).*Safari/], [\"facebook\", /FB[AS]V\\/([0-9\\.]+)/], [\"instagram\", /Instagram\\s([0-9\\.]+)/], [\"ios-webview\", /AppleWebKit\\/([0-9\\.]+).*Mobile/], [\"ios-webview\", /AppleWebKit\\/([0-9\\.]+).*Gecko\\)$/], [\"curl\", /^curl\\/([0-9\\.]+)$/], [\"searchbot\", SEARCHBOX_UA_REGEX]];\nconst matchUserAgent = ua => {\n  return ua !== \"\" && userAgentRules.reduce((matched, [browser, regex]) => {\n    if (matched) {\n      return matched;\n    }\n    const uaMatch = regex.exec(ua);\n    return !!uaMatch && [browser, uaMatch];\n  }, false);\n};\nconst isCurrentBrowserSupported = supportedBrowser => {\n  if (typeof navigator === \"undefined\") {\n    return false;\n  }\n  const matchedRule = matchUserAgent(navigator.userAgent);\n  if (!matchedRule) {\n    return false;\n  }\n  const [name] = matchedRule;\n  if (name === \"searchbot\") {\n    return false;\n  }\n  return !!supportedBrowser.find(item => item === name);\n};\n\n// eslint-disable-next-line es-x/no-typed-arrays -- safe\nvar arrayBufferNative = typeof ArrayBuffer != 'undefined' && typeof DataView != 'undefined';\n\nvar NATIVE_ARRAY_BUFFER$1 = arrayBufferNative;\nvar DESCRIPTORS$2 = descriptors;\nvar global$7 = global$t;\nvar isCallable$2 = isCallable$n;\nvar isObject$4 = isObject$d;\nvar hasOwn$1 = hasOwnProperty_1;\nvar classof$4 = classof$9;\nvar tryToString = tryToString$5;\nvar createNonEnumerableProperty$3 = createNonEnumerableProperty$8;\nvar defineBuiltIn$2 = defineBuiltIn$8;\nvar defineProperty$1 = objectDefineProperty.f;\nvar isPrototypeOf$1 = objectIsPrototypeOf;\nvar getPrototypeOf$1 = objectGetPrototypeOf;\nvar setPrototypeOf$3 = objectSetPrototypeOf;\nvar wellKnownSymbol$2 = wellKnownSymbol$j;\nvar uid = uid$3;\nvar InternalStateModule$2 = internalState;\n\nvar enforceInternalState$1 = InternalStateModule$2.enforce;\nvar getInternalState$2 = InternalStateModule$2.get;\nvar Int8Array$4 = global$7.Int8Array;\nvar Int8ArrayPrototype$1 = Int8Array$4 && Int8Array$4.prototype;\nvar Uint8ClampedArray$1 = global$7.Uint8ClampedArray;\nvar Uint8ClampedArrayPrototype = Uint8ClampedArray$1 && Uint8ClampedArray$1.prototype;\nvar TypedArray$1 = Int8Array$4 && getPrototypeOf$1(Int8Array$4);\nvar TypedArrayPrototype$1 = Int8ArrayPrototype$1 && getPrototypeOf$1(Int8ArrayPrototype$1);\nvar ObjectPrototype$1 = Object.prototype;\nvar TypeError$1 = global$7.TypeError;\n\nvar TO_STRING_TAG = wellKnownSymbol$2('toStringTag');\nvar TYPED_ARRAY_TAG$1 = uid('TYPED_ARRAY_TAG');\nvar TYPED_ARRAY_CONSTRUCTOR = 'TypedArrayConstructor';\n// Fixing native typed arrays in Opera Presto crashes the browser, see #595\nvar NATIVE_ARRAY_BUFFER_VIEWS$2 = NATIVE_ARRAY_BUFFER$1 && !!setPrototypeOf$3 && classof$4(global$7.opera) !== 'Opera';\nvar TYPED_ARRAY_TAG_REQUIRED = false;\nvar NAME, Constructor, Prototype;\n\nvar TypedArrayConstructorsList = {\n  Int8Array: 1,\n  Uint8Array: 1,\n  Uint8ClampedArray: 1,\n  Int16Array: 2,\n  Uint16Array: 2,\n  Int32Array: 4,\n  Uint32Array: 4,\n  Float32Array: 4,\n  Float64Array: 8\n};\n\nvar BigIntArrayConstructorsList = {\n  BigInt64Array: 8,\n  BigUint64Array: 8\n};\n\nvar isView = function isView(it) {\n  if (!isObject$4(it)) return false;\n  var klass = classof$4(it);\n  return klass === 'DataView'\n    || hasOwn$1(TypedArrayConstructorsList, klass)\n    || hasOwn$1(BigIntArrayConstructorsList, klass);\n};\n\nvar getTypedArrayConstructor = function (it) {\n  var proto = getPrototypeOf$1(it);\n  if (!isObject$4(proto)) return;\n  var state = getInternalState$2(proto);\n  return (state && hasOwn$1(state, TYPED_ARRAY_CONSTRUCTOR)) ? state[TYPED_ARRAY_CONSTRUCTOR] : getTypedArrayConstructor(proto);\n};\n\nvar isTypedArray$1 = function (it) {\n  if (!isObject$4(it)) return false;\n  var klass = classof$4(it);\n  return hasOwn$1(TypedArrayConstructorsList, klass)\n    || hasOwn$1(BigIntArrayConstructorsList, klass);\n};\n\nvar aTypedArray$4 = function (it) {\n  if (isTypedArray$1(it)) return it;\n  throw TypeError$1('Target is not a typed array');\n};\n\nvar aTypedArrayConstructor$2 = function (C) {\n  if (isCallable$2(C) && (!setPrototypeOf$3 || isPrototypeOf$1(TypedArray$1, C))) return C;\n  throw TypeError$1(tryToString(C) + ' is not a typed array constructor');\n};\n\nvar exportTypedArrayMethod$4 = function (KEY, property, forced, options) {\n  if (!DESCRIPTORS$2) return;\n  if (forced) for (var ARRAY in TypedArrayConstructorsList) {\n    var TypedArrayConstructor = global$7[ARRAY];\n    if (TypedArrayConstructor && hasOwn$1(TypedArrayConstructor.prototype, KEY)) try {\n      delete TypedArrayConstructor.prototype[KEY];\n    } catch (error) {\n      // old WebKit bug - some methods are non-configurable\n      try {\n        TypedArrayConstructor.prototype[KEY] = property;\n      } catch (error2) { /* empty */ }\n    }\n  }\n  if (!TypedArrayPrototype$1[KEY] || forced) {\n    defineBuiltIn$2(TypedArrayPrototype$1, KEY, forced ? property\n      : NATIVE_ARRAY_BUFFER_VIEWS$2 && Int8ArrayPrototype$1[KEY] || property, options);\n  }\n};\n\nvar exportTypedArrayStaticMethod$1 = function (KEY, property, forced) {\n  var ARRAY, TypedArrayConstructor;\n  if (!DESCRIPTORS$2) return;\n  if (setPrototypeOf$3) {\n    if (forced) for (ARRAY in TypedArrayConstructorsList) {\n      TypedArrayConstructor = global$7[ARRAY];\n      if (TypedArrayConstructor && hasOwn$1(TypedArrayConstructor, KEY)) try {\n        delete TypedArrayConstructor[KEY];\n      } catch (error) { /* empty */ }\n    }\n    if (!TypedArray$1[KEY] || forced) {\n      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable\n      try {\n        return defineBuiltIn$2(TypedArray$1, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS$2 && TypedArray$1[KEY] || property);\n      } catch (error) { /* empty */ }\n    } else return;\n  }\n  for (ARRAY in TypedArrayConstructorsList) {\n    TypedArrayConstructor = global$7[ARRAY];\n    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {\n      defineBuiltIn$2(TypedArrayConstructor, KEY, property);\n    }\n  }\n};\n\nfor (NAME in TypedArrayConstructorsList) {\n  Constructor = global$7[NAME];\n  Prototype = Constructor && Constructor.prototype;\n  if (Prototype) enforceInternalState$1(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;\n  else NATIVE_ARRAY_BUFFER_VIEWS$2 = false;\n}\n\nfor (NAME in BigIntArrayConstructorsList) {\n  Constructor = global$7[NAME];\n  Prototype = Constructor && Constructor.prototype;\n  if (Prototype) enforceInternalState$1(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;\n}\n\n// WebKit bug - typed arrays constructors prototype is Object.prototype\nif (!NATIVE_ARRAY_BUFFER_VIEWS$2 || !isCallable$2(TypedArray$1) || TypedArray$1 === Function.prototype) {\n  // eslint-disable-next-line no-shadow -- safe\n  TypedArray$1 = function TypedArray() {\n    throw TypeError$1('Incorrect invocation');\n  };\n  if (NATIVE_ARRAY_BUFFER_VIEWS$2) for (NAME in TypedArrayConstructorsList) {\n    if (global$7[NAME]) setPrototypeOf$3(global$7[NAME], TypedArray$1);\n  }\n}\n\nif (!NATIVE_ARRAY_BUFFER_VIEWS$2 || !TypedArrayPrototype$1 || TypedArrayPrototype$1 === ObjectPrototype$1) {\n  TypedArrayPrototype$1 = TypedArray$1.prototype;\n  if (NATIVE_ARRAY_BUFFER_VIEWS$2) for (NAME in TypedArrayConstructorsList) {\n    if (global$7[NAME]) setPrototypeOf$3(global$7[NAME].prototype, TypedArrayPrototype$1);\n  }\n}\n\n// WebKit bug - one more object in Uint8ClampedArray prototype chain\nif (NATIVE_ARRAY_BUFFER_VIEWS$2 && getPrototypeOf$1(Uint8ClampedArrayPrototype) !== TypedArrayPrototype$1) {\n  setPrototypeOf$3(Uint8ClampedArrayPrototype, TypedArrayPrototype$1);\n}\n\nif (DESCRIPTORS$2 && !hasOwn$1(TypedArrayPrototype$1, TO_STRING_TAG)) {\n  TYPED_ARRAY_TAG_REQUIRED = true;\n  defineProperty$1(TypedArrayPrototype$1, TO_STRING_TAG, { get: function () {\n    return isObject$4(this) ? this[TYPED_ARRAY_TAG$1] : undefined;\n  } });\n  for (NAME in TypedArrayConstructorsList) if (global$7[NAME]) {\n    createNonEnumerableProperty$3(global$7[NAME], TYPED_ARRAY_TAG$1, NAME);\n  }\n}\n\nvar arrayBufferViewCore = {\n  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS$2,\n  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG$1,\n  aTypedArray: aTypedArray$4,\n  aTypedArrayConstructor: aTypedArrayConstructor$2,\n  exportTypedArrayMethod: exportTypedArrayMethod$4,\n  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod$1,\n  getTypedArrayConstructor: getTypedArrayConstructor,\n  isView: isView,\n  isTypedArray: isTypedArray$1,\n  TypedArray: TypedArray$1,\n  TypedArrayPrototype: TypedArrayPrototype$1\n};\n\n/* eslint-disable no-new -- required for testing */\n\nvar global$6 = global$t;\nvar fails$8 = fails$s;\nvar checkCorrectnessOfIteration = checkCorrectnessOfIteration$2;\nvar NATIVE_ARRAY_BUFFER_VIEWS$1 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;\n\nvar ArrayBuffer$3 = global$6.ArrayBuffer;\nvar Int8Array$3 = global$6.Int8Array;\n\nvar typedArrayConstructorsRequireWrappers = !NATIVE_ARRAY_BUFFER_VIEWS$1 || !fails$8(function () {\n  Int8Array$3(1);\n}) || !fails$8(function () {\n  new Int8Array$3(-1);\n}) || !checkCorrectnessOfIteration(function (iterable) {\n  new Int8Array$3();\n  new Int8Array$3(null);\n  new Int8Array$3(1.5);\n  new Int8Array$3(iterable);\n}, true) || fails$8(function () {\n  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill\n  return new Int8Array$3(new ArrayBuffer$3(2), 1, undefined).length !== 1;\n});\n\nvar bind$1 = functionBindContext;\nvar call$5 = functionCall;\nvar aConstructor = aConstructor$2;\nvar toObject$2 = toObject$7;\nvar lengthOfArrayLike$4 = lengthOfArrayLike$8;\nvar getIterator = getIterator$2;\nvar getIteratorMethod = getIteratorMethod$3;\nvar isArrayIteratorMethod = isArrayIteratorMethod$2;\nvar aTypedArrayConstructor$1 = arrayBufferViewCore.aTypedArrayConstructor;\n\nvar typedArrayFrom$2 = function from(source /* , mapfn, thisArg */) {\n  var C = aConstructor(this);\n  var O = toObject$2(source);\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  var iteratorMethod = getIteratorMethod(O);\n  var i, length, result, step, iterator, next;\n  if (iteratorMethod && !isArrayIteratorMethod(iteratorMethod)) {\n    iterator = getIterator(O, iteratorMethod);\n    next = iterator.next;\n    O = [];\n    while (!(step = call$5(next, iterator)).done) {\n      O.push(step.value);\n    }\n  }\n  if (mapping && argumentsLength > 2) {\n    mapfn = bind$1(mapfn, arguments[2]);\n  }\n  length = lengthOfArrayLike$4(O);\n  result = new (aTypedArrayConstructor$1(C))(length);\n  for (i = 0; length > i; i++) {\n    result[i] = mapping ? mapfn(O[i], i) : O[i];\n  }\n  return result;\n};\n\nvar TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS$1 = typedArrayConstructorsRequireWrappers;\nvar exportTypedArrayStaticMethod = arrayBufferViewCore.exportTypedArrayStaticMethod;\nvar typedArrayFrom$1 = typedArrayFrom$2;\n\n// `%TypedArray%.from` method\n// https://tc39.es/ecma262/#sec-%typedarray%.from\nexportTypedArrayStaticMethod('from', typedArrayFrom$1, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS$1);\n\nvar defineBuiltIn$1 = defineBuiltIn$8;\n\nvar defineBuiltIns$1 = function (target, src, options) {\n  for (var key in src) defineBuiltIn$1(target, key, src[key], options);\n  return target;\n};\n\nvar toIntegerOrInfinity$3 = toIntegerOrInfinity$6;\nvar toLength$4 = toLength$6;\n\nvar $RangeError$2 = RangeError;\n\n// `ToIndex` abstract operation\n// https://tc39.es/ecma262/#sec-toindex\nvar toIndex$2 = function (it) {\n  if (it === undefined) return 0;\n  var number = toIntegerOrInfinity$3(it);\n  var length = toLength$4(number);\n  if (number !== length) throw $RangeError$2('Wrong length or index');\n  return length;\n};\n\n// IEEE754 conversions based on https://github.com/feross/ieee754\nvar $Array$2 = Array;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar floor$2 = Math.floor;\nvar log = Math.log;\nvar LN2 = Math.LN2;\n\nvar pack = function (number, mantissaLength, bytes) {\n  var buffer = $Array$2(bytes);\n  var exponentLength = bytes * 8 - mantissaLength - 1;\n  var eMax = (1 << exponentLength) - 1;\n  var eBias = eMax >> 1;\n  var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;\n  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;\n  var index = 0;\n  var exponent, mantissa, c;\n  number = abs(number);\n  // eslint-disable-next-line no-self-compare -- NaN check\n  if (number != number || number === Infinity) {\n    // eslint-disable-next-line no-self-compare -- NaN check\n    mantissa = number != number ? 1 : 0;\n    exponent = eMax;\n  } else {\n    exponent = floor$2(log(number) / LN2);\n    c = pow(2, -exponent);\n    if (number * c < 1) {\n      exponent--;\n      c *= 2;\n    }\n    if (exponent + eBias >= 1) {\n      number += rt / c;\n    } else {\n      number += rt * pow(2, 1 - eBias);\n    }\n    if (number * c >= 2) {\n      exponent++;\n      c /= 2;\n    }\n    if (exponent + eBias >= eMax) {\n      mantissa = 0;\n      exponent = eMax;\n    } else if (exponent + eBias >= 1) {\n      mantissa = (number * c - 1) * pow(2, mantissaLength);\n      exponent = exponent + eBias;\n    } else {\n      mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);\n      exponent = 0;\n    }\n  }\n  while (mantissaLength >= 8) {\n    buffer[index++] = mantissa & 255;\n    mantissa /= 256;\n    mantissaLength -= 8;\n  }\n  exponent = exponent << mantissaLength | mantissa;\n  exponentLength += mantissaLength;\n  while (exponentLength > 0) {\n    buffer[index++] = exponent & 255;\n    exponent /= 256;\n    exponentLength -= 8;\n  }\n  buffer[--index] |= sign * 128;\n  return buffer;\n};\n\nvar unpack = function (buffer, mantissaLength) {\n  var bytes = buffer.length;\n  var exponentLength = bytes * 8 - mantissaLength - 1;\n  var eMax = (1 << exponentLength) - 1;\n  var eBias = eMax >> 1;\n  var nBits = exponentLength - 7;\n  var index = bytes - 1;\n  var sign = buffer[index--];\n  var exponent = sign & 127;\n  var mantissa;\n  sign >>= 7;\n  while (nBits > 0) {\n    exponent = exponent * 256 + buffer[index--];\n    nBits -= 8;\n  }\n  mantissa = exponent & (1 << -nBits) - 1;\n  exponent >>= -nBits;\n  nBits += mantissaLength;\n  while (nBits > 0) {\n    mantissa = mantissa * 256 + buffer[index--];\n    nBits -= 8;\n  }\n  if (exponent === 0) {\n    exponent = 1 - eBias;\n  } else if (exponent === eMax) {\n    return mantissa ? NaN : sign ? -Infinity : Infinity;\n  } else {\n    mantissa = mantissa + pow(2, mantissaLength);\n    exponent = exponent - eBias;\n  } return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);\n};\n\nvar ieee754 = {\n  pack: pack,\n  unpack: unpack\n};\n\nvar toObject$1 = toObject$7;\nvar toAbsoluteIndex$2 = toAbsoluteIndex$4;\nvar lengthOfArrayLike$3 = lengthOfArrayLike$8;\n\n// `Array.prototype.fill` method implementation\n// https://tc39.es/ecma262/#sec-array.prototype.fill\nvar arrayFill$1 = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject$1(this);\n  var length = lengthOfArrayLike$3(O);\n  var argumentsLength = arguments.length;\n  var index = toAbsoluteIndex$2(argumentsLength > 1 ? arguments[1] : undefined, length);\n  var end = argumentsLength > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex$2(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n\nvar toPropertyKey$1 = toPropertyKey$4;\nvar definePropertyModule$1 = objectDefineProperty;\nvar createPropertyDescriptor$1 = createPropertyDescriptor$5;\n\nvar createProperty$1 = function (object, key, value) {\n  var propertyKey = toPropertyKey$1(key);\n  if (propertyKey in object) definePropertyModule$1.f(object, propertyKey, createPropertyDescriptor$1(0, value));\n  else object[propertyKey] = value;\n};\n\nvar toAbsoluteIndex$1 = toAbsoluteIndex$4;\nvar lengthOfArrayLike$2 = lengthOfArrayLike$8;\nvar createProperty = createProperty$1;\n\nvar $Array$1 = Array;\nvar max = Math.max;\n\nvar arraySliceSimple = function (O, start, end) {\n  var length = lengthOfArrayLike$2(O);\n  var k = toAbsoluteIndex$1(start, length);\n  var fin = toAbsoluteIndex$1(end === undefined ? length : end, length);\n  var result = $Array$1(max(fin - k, 0));\n  for (var n = 0; k < fin; k++, n++) createProperty(result, n, O[k]);\n  result.length = n;\n  return result;\n};\n\nvar global$5 = global$t;\nvar uncurryThis$7 = functionUncurryThis;\nvar DESCRIPTORS$1 = descriptors;\nvar NATIVE_ARRAY_BUFFER = arrayBufferNative;\nvar FunctionName = functionName;\nvar createNonEnumerableProperty$2 = createNonEnumerableProperty$8;\nvar defineBuiltIns = defineBuiltIns$1;\nvar fails$7 = fails$s;\nvar anInstance$1 = anInstance$3;\nvar toIntegerOrInfinity$2 = toIntegerOrInfinity$6;\nvar toLength$3 = toLength$6;\nvar toIndex$1 = toIndex$2;\nvar IEEE754 = ieee754;\nvar getPrototypeOf = objectGetPrototypeOf;\nvar setPrototypeOf$2 = objectSetPrototypeOf;\nvar getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;\nvar defineProperty = objectDefineProperty.f;\nvar arrayFill = arrayFill$1;\nvar arraySlice$3 = arraySliceSimple;\nvar setToStringTag = setToStringTag$4;\nvar InternalStateModule$1 = internalState;\n\nvar PROPER_FUNCTION_NAME = FunctionName.PROPER;\nvar CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;\nvar getInternalState$1 = InternalStateModule$1.get;\nvar setInternalState$1 = InternalStateModule$1.set;\nvar ARRAY_BUFFER = 'ArrayBuffer';\nvar DATA_VIEW = 'DataView';\nvar PROTOTYPE = 'prototype';\nvar WRONG_LENGTH$1 = 'Wrong length';\nvar WRONG_INDEX = 'Wrong index';\nvar NativeArrayBuffer = global$5[ARRAY_BUFFER];\nvar $ArrayBuffer = NativeArrayBuffer;\nvar ArrayBufferPrototype$1 = $ArrayBuffer && $ArrayBuffer[PROTOTYPE];\nvar $DataView = global$5[DATA_VIEW];\nvar DataViewPrototype$1 = $DataView && $DataView[PROTOTYPE];\nvar ObjectPrototype = Object.prototype;\nvar Array$1 = global$5.Array;\nvar RangeError$3 = global$5.RangeError;\nvar fill = uncurryThis$7(arrayFill);\nvar reverse = uncurryThis$7([].reverse);\n\nvar packIEEE754 = IEEE754.pack;\nvar unpackIEEE754 = IEEE754.unpack;\n\nvar packInt8 = function (number) {\n  return [number & 0xFF];\n};\n\nvar packInt16 = function (number) {\n  return [number & 0xFF, number >> 8 & 0xFF];\n};\n\nvar packInt32 = function (number) {\n  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];\n};\n\nvar unpackInt32 = function (buffer) {\n  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];\n};\n\nvar packFloat32 = function (number) {\n  return packIEEE754(number, 23, 4);\n};\n\nvar packFloat64 = function (number) {\n  return packIEEE754(number, 52, 8);\n};\n\nvar addGetter$1 = function (Constructor, key) {\n  defineProperty(Constructor[PROTOTYPE], key, { get: function () { return getInternalState$1(this)[key]; } });\n};\n\nvar get = function (view, count, index, isLittleEndian) {\n  var intIndex = toIndex$1(index);\n  var store = getInternalState$1(view);\n  if (intIndex + count > store.byteLength) throw RangeError$3(WRONG_INDEX);\n  var bytes = getInternalState$1(store.buffer).bytes;\n  var start = intIndex + store.byteOffset;\n  var pack = arraySlice$3(bytes, start, start + count);\n  return isLittleEndian ? pack : reverse(pack);\n};\n\nvar set = function (view, count, index, conversion, value, isLittleEndian) {\n  var intIndex = toIndex$1(index);\n  var store = getInternalState$1(view);\n  if (intIndex + count > store.byteLength) throw RangeError$3(WRONG_INDEX);\n  var bytes = getInternalState$1(store.buffer).bytes;\n  var start = intIndex + store.byteOffset;\n  var pack = conversion(+value);\n  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];\n};\n\nif (!NATIVE_ARRAY_BUFFER) {\n  $ArrayBuffer = function ArrayBuffer(length) {\n    anInstance$1(this, ArrayBufferPrototype$1);\n    var byteLength = toIndex$1(length);\n    setInternalState$1(this, {\n      bytes: fill(Array$1(byteLength), 0),\n      byteLength: byteLength\n    });\n    if (!DESCRIPTORS$1) this.byteLength = byteLength;\n  };\n\n  ArrayBufferPrototype$1 = $ArrayBuffer[PROTOTYPE];\n\n  $DataView = function DataView(buffer, byteOffset, byteLength) {\n    anInstance$1(this, DataViewPrototype$1);\n    anInstance$1(buffer, ArrayBufferPrototype$1);\n    var bufferLength = getInternalState$1(buffer).byteLength;\n    var offset = toIntegerOrInfinity$2(byteOffset);\n    if (offset < 0 || offset > bufferLength) throw RangeError$3('Wrong offset');\n    byteLength = byteLength === undefined ? bufferLength - offset : toLength$3(byteLength);\n    if (offset + byteLength > bufferLength) throw RangeError$3(WRONG_LENGTH$1);\n    setInternalState$1(this, {\n      buffer: buffer,\n      byteLength: byteLength,\n      byteOffset: offset\n    });\n    if (!DESCRIPTORS$1) {\n      this.buffer = buffer;\n      this.byteLength = byteLength;\n      this.byteOffset = offset;\n    }\n  };\n\n  DataViewPrototype$1 = $DataView[PROTOTYPE];\n\n  if (DESCRIPTORS$1) {\n    addGetter$1($ArrayBuffer, 'byteLength');\n    addGetter$1($DataView, 'buffer');\n    addGetter$1($DataView, 'byteLength');\n    addGetter$1($DataView, 'byteOffset');\n  }\n\n  defineBuiltIns(DataViewPrototype$1, {\n    getInt8: function getInt8(byteOffset) {\n      return get(this, 1, byteOffset)[0] << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset) {\n      return get(this, 1, byteOffset)[0];\n    },\n    getInt16: function getInt16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);\n      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);\n      return bytes[1] << 8 | bytes[0];\n    },\n    getInt32: function getInt32(byteOffset /* , littleEndian */) {\n      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));\n    },\n    getUint32: function getUint32(byteOffset /* , littleEndian */) {\n      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;\n    },\n    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);\n    },\n    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);\n    },\n    setInt8: function setInt8(byteOffset, value) {\n      set(this, 1, byteOffset, packInt8, value);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      set(this, 1, byteOffset, packInt8, value);\n    },\n    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {\n      set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);\n    }\n  });\n} else {\n  var INCORRECT_ARRAY_BUFFER_NAME = PROPER_FUNCTION_NAME && NativeArrayBuffer.name !== ARRAY_BUFFER;\n  /* eslint-disable no-new -- required for testing */\n  if (!fails$7(function () {\n    NativeArrayBuffer(1);\n  }) || !fails$7(function () {\n    new NativeArrayBuffer(-1);\n  }) || fails$7(function () {\n    new NativeArrayBuffer();\n    new NativeArrayBuffer(1.5);\n    new NativeArrayBuffer(NaN);\n    return INCORRECT_ARRAY_BUFFER_NAME && !CONFIGURABLE_FUNCTION_NAME;\n  })) {\n  /* eslint-enable no-new -- required for testing */\n    $ArrayBuffer = function ArrayBuffer(length) {\n      anInstance$1(this, ArrayBufferPrototype$1);\n      return new NativeArrayBuffer(toIndex$1(length));\n    };\n\n    $ArrayBuffer[PROTOTYPE] = ArrayBufferPrototype$1;\n\n    for (var keys = getOwnPropertyNames$1(NativeArrayBuffer), j = 0, key; keys.length > j;) {\n      if (!((key = keys[j++]) in $ArrayBuffer)) {\n        createNonEnumerableProperty$2($ArrayBuffer, key, NativeArrayBuffer[key]);\n      }\n    }\n\n    ArrayBufferPrototype$1.constructor = $ArrayBuffer;\n  } else if (INCORRECT_ARRAY_BUFFER_NAME && CONFIGURABLE_FUNCTION_NAME) {\n    createNonEnumerableProperty$2(NativeArrayBuffer, 'name', ARRAY_BUFFER);\n  }\n\n  // WebKit bug - the same parent prototype for typed arrays and data view\n  if (setPrototypeOf$2 && getPrototypeOf(DataViewPrototype$1) !== ObjectPrototype) {\n    setPrototypeOf$2(DataViewPrototype$1, ObjectPrototype);\n  }\n\n  // iOS Safari 7.x bug\n  var testView = new $DataView(new $ArrayBuffer(2));\n  var $setInt8 = uncurryThis$7(DataViewPrototype$1.setInt8);\n  testView.setInt8(0, 2147483648);\n  testView.setInt8(1, 2147483649);\n  if (testView.getInt8(0) || !testView.getInt8(1)) defineBuiltIns(DataViewPrototype$1, {\n    setInt8: function setInt8(byteOffset, value) {\n      $setInt8(this, byteOffset, value << 24 >> 24);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      $setInt8(this, byteOffset, value << 24 >> 24);\n    }\n  }, { unsafe: true });\n}\n\nsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\nsetToStringTag($DataView, DATA_VIEW);\n\nvar arrayBuffer = {\n  ArrayBuffer: $ArrayBuffer,\n  DataView: $DataView\n};\n\nvar $$1 = _export;\nvar uncurryThis$6 = functionUncurryThis;\nvar fails$6 = fails$s;\nvar ArrayBufferModule$1 = arrayBuffer;\nvar anObject$2 = anObject$e;\nvar toAbsoluteIndex = toAbsoluteIndex$4;\nvar toLength$2 = toLength$6;\nvar speciesConstructor$1 = speciesConstructor$3;\n\nvar ArrayBuffer$2 = ArrayBufferModule$1.ArrayBuffer;\nvar DataView$2 = ArrayBufferModule$1.DataView;\nvar DataViewPrototype = DataView$2.prototype;\nvar un$ArrayBufferSlice = uncurryThis$6(ArrayBuffer$2.prototype.slice);\nvar getUint8 = uncurryThis$6(DataViewPrototype.getUint8);\nvar setUint8 = uncurryThis$6(DataViewPrototype.setUint8);\n\nvar INCORRECT_SLICE = fails$6(function () {\n  return !new ArrayBuffer$2(2).slice(1, undefined).byteLength;\n});\n\n// `ArrayBuffer.prototype.slice` method\n// https://tc39.es/ecma262/#sec-arraybuffer.prototype.slice\n$$1({ target: 'ArrayBuffer', proto: true, unsafe: true, forced: INCORRECT_SLICE }, {\n  slice: function slice(start, end) {\n    if (un$ArrayBufferSlice && end === undefined) {\n      return un$ArrayBufferSlice(anObject$2(this), start); // FF fix\n    }\n    var length = anObject$2(this).byteLength;\n    var first = toAbsoluteIndex(start, length);\n    var fin = toAbsoluteIndex(end === undefined ? length : end, length);\n    var result = new (speciesConstructor$1(this, ArrayBuffer$2))(toLength$2(fin - first));\n    var viewSource = new DataView$2(this);\n    var viewTarget = new DataView$2(result);\n    var index = 0;\n    while (first < fin) {\n      setUint8(viewTarget, index++, getUint8(viewSource, first++));\n    } return result;\n  }\n});\n\nvar typedArrayConstructor = {exports: {}};\n\nvar isObject$3 = isObject$d;\n\nvar floor$1 = Math.floor;\n\n// `IsIntegralNumber` abstract operation\n// https://tc39.es/ecma262/#sec-isintegralnumber\n// eslint-disable-next-line es-x/no-number-isinteger -- safe\nvar isIntegralNumber$1 = Number.isInteger || function isInteger(it) {\n  return !isObject$3(it) && isFinite(it) && floor$1(it) === it;\n};\n\nvar toIntegerOrInfinity$1 = toIntegerOrInfinity$6;\n\nvar $RangeError$1 = RangeError;\n\nvar toPositiveInteger$1 = function (it) {\n  var result = toIntegerOrInfinity$1(it);\n  if (result < 0) throw $RangeError$1(\"The argument can't be less than 0\");\n  return result;\n};\n\nvar toPositiveInteger = toPositiveInteger$1;\n\nvar $RangeError = RangeError;\n\nvar toOffset$2 = function (it, BYTES) {\n  var offset = toPositiveInteger(it);\n  if (offset % BYTES) throw $RangeError('Wrong offset');\n  return offset;\n};\n\nvar classof$3 = classofRaw$1;\n\n// `IsArray` abstract operation\n// https://tc39.es/ecma262/#sec-isarray\n// eslint-disable-next-line es-x/no-array-isarray -- safe\nvar isArray$1 = Array.isArray || function isArray(argument) {\n  return classof$3(argument) == 'Array';\n};\n\nvar isArray = isArray$1;\nvar isConstructor = isConstructor$2;\nvar isObject$2 = isObject$d;\nvar wellKnownSymbol$1 = wellKnownSymbol$j;\n\nvar SPECIES$1 = wellKnownSymbol$1('species');\nvar $Array = Array;\n\n// a part of `ArraySpeciesCreate` abstract operation\n// https://tc39.es/ecma262/#sec-arrayspeciescreate\nvar arraySpeciesConstructor$1 = function (originalArray) {\n  var C;\n  if (isArray(originalArray)) {\n    C = originalArray.constructor;\n    // cross-realm fallback\n    if (isConstructor(C) && (C === $Array || isArray(C.prototype))) C = undefined;\n    else if (isObject$2(C)) {\n      C = C[SPECIES$1];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? $Array : C;\n};\n\nvar arraySpeciesConstructor = arraySpeciesConstructor$1;\n\n// `ArraySpeciesCreate` abstract operation\n// https://tc39.es/ecma262/#sec-arrayspeciescreate\nvar arraySpeciesCreate$1 = function (originalArray, length) {\n  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);\n};\n\nvar bind = functionBindContext;\nvar uncurryThis$5 = functionUncurryThis;\nvar IndexedObject = indexedObject;\nvar toObject = toObject$7;\nvar lengthOfArrayLike$1 = lengthOfArrayLike$8;\nvar arraySpeciesCreate = arraySpeciesCreate$1;\n\nvar push$1 = uncurryThis$5([].push);\n\n// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation\nvar createMethod$1 = function (TYPE) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var IS_FILTER_REJECT = TYPE == 7;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  return function ($this, callbackfn, that, specificCreate) {\n    var O = toObject($this);\n    var self = IndexedObject(O);\n    var boundFunction = bind(callbackfn, that);\n    var length = lengthOfArrayLike$1(self);\n    var index = 0;\n    var create = specificCreate || arraySpeciesCreate;\n    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;\n    var value, result;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      value = self[index];\n      result = boundFunction(value, index, O);\n      if (TYPE) {\n        if (IS_MAP) target[index] = result; // map\n        else if (result) switch (TYPE) {\n          case 3: return true;              // some\n          case 5: return value;             // find\n          case 6: return index;             // findIndex\n          case 2: push$1(target, value);      // filter\n        } else switch (TYPE) {\n          case 4: return false;             // every\n          case 7: push$1(target, value);      // filterReject\n        }\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\n  };\n};\n\nvar arrayIteration = {\n  // `Array.prototype.forEach` method\n  // https://tc39.es/ecma262/#sec-array.prototype.foreach\n  forEach: createMethod$1(0),\n  // `Array.prototype.map` method\n  // https://tc39.es/ecma262/#sec-array.prototype.map\n  map: createMethod$1(1),\n  // `Array.prototype.filter` method\n  // https://tc39.es/ecma262/#sec-array.prototype.filter\n  filter: createMethod$1(2),\n  // `Array.prototype.some` method\n  // https://tc39.es/ecma262/#sec-array.prototype.some\n  some: createMethod$1(3),\n  // `Array.prototype.every` method\n  // https://tc39.es/ecma262/#sec-array.prototype.every\n  every: createMethod$1(4),\n  // `Array.prototype.find` method\n  // https://tc39.es/ecma262/#sec-array.prototype.find\n  find: createMethod$1(5),\n  // `Array.prototype.findIndex` method\n  // https://tc39.es/ecma262/#sec-array.prototype.findIndex\n  findIndex: createMethod$1(6),\n  // `Array.prototype.filterReject` method\n  // https://github.com/tc39/proposal-array-filtering\n  filterReject: createMethod$1(7)\n};\n\nvar isCallable$1 = isCallable$n;\nvar isObject$1 = isObject$d;\nvar setPrototypeOf$1 = objectSetPrototypeOf;\n\n// makes subclassing work correct for wrapped built-ins\nvar inheritIfRequired$1 = function ($this, dummy, Wrapper) {\n  var NewTarget, NewTargetPrototype;\n  if (\n    // it can work only with native `setPrototypeOf`\n    setPrototypeOf$1 &&\n    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this\n    isCallable$1(NewTarget = dummy.constructor) &&\n    NewTarget !== Wrapper &&\n    isObject$1(NewTargetPrototype = NewTarget.prototype) &&\n    NewTargetPrototype !== Wrapper.prototype\n  ) setPrototypeOf$1($this, NewTargetPrototype);\n  return $this;\n};\n\nvar $ = _export;\nvar global$4 = global$t;\nvar call$4 = functionCall;\nvar DESCRIPTORS = descriptors;\nvar TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = typedArrayConstructorsRequireWrappers;\nvar ArrayBufferViewCore$4 = arrayBufferViewCore;\nvar ArrayBufferModule = arrayBuffer;\nvar anInstance = anInstance$3;\nvar createPropertyDescriptor = createPropertyDescriptor$5;\nvar createNonEnumerableProperty$1 = createNonEnumerableProperty$8;\nvar isIntegralNumber = isIntegralNumber$1;\nvar toLength$1 = toLength$6;\nvar toIndex = toIndex$2;\nvar toOffset$1 = toOffset$2;\nvar toPropertyKey = toPropertyKey$4;\nvar hasOwn = hasOwnProperty_1;\nvar classof$2 = classof$9;\nvar isObject = isObject$d;\nvar isSymbol = isSymbol$3;\nvar create = objectCreate;\nvar isPrototypeOf = objectIsPrototypeOf;\nvar setPrototypeOf = objectSetPrototypeOf;\nvar getOwnPropertyNames = objectGetOwnPropertyNames.f;\nvar typedArrayFrom = typedArrayFrom$2;\nvar forEach = arrayIteration.forEach;\nvar setSpecies = setSpecies$2;\nvar definePropertyModule = objectDefineProperty;\nvar getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;\nvar InternalStateModule = internalState;\nvar inheritIfRequired = inheritIfRequired$1;\n\nvar getInternalState = InternalStateModule.get;\nvar setInternalState = InternalStateModule.set;\nvar enforceInternalState = InternalStateModule.enforce;\nvar nativeDefineProperty = definePropertyModule.f;\nvar nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\nvar round = Math.round;\nvar RangeError$2 = global$4.RangeError;\nvar ArrayBuffer$1 = ArrayBufferModule.ArrayBuffer;\nvar ArrayBufferPrototype = ArrayBuffer$1.prototype;\nvar DataView$1 = ArrayBufferModule.DataView;\nvar NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore$4.NATIVE_ARRAY_BUFFER_VIEWS;\nvar TYPED_ARRAY_TAG = ArrayBufferViewCore$4.TYPED_ARRAY_TAG;\nvar TypedArray = ArrayBufferViewCore$4.TypedArray;\nvar TypedArrayPrototype = ArrayBufferViewCore$4.TypedArrayPrototype;\nvar aTypedArrayConstructor = ArrayBufferViewCore$4.aTypedArrayConstructor;\nvar isTypedArray = ArrayBufferViewCore$4.isTypedArray;\nvar BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\nvar WRONG_LENGTH = 'Wrong length';\n\nvar fromList = function (C, list) {\n  aTypedArrayConstructor(C);\n  var index = 0;\n  var length = list.length;\n  var result = new C(length);\n  while (length > index) result[index] = list[index++];\n  return result;\n};\n\nvar addGetter = function (it, key) {\n  nativeDefineProperty(it, key, { get: function () {\n    return getInternalState(this)[key];\n  } });\n};\n\nvar isArrayBuffer = function (it) {\n  var klass;\n  return isPrototypeOf(ArrayBufferPrototype, it) || (klass = classof$2(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';\n};\n\nvar isTypedArrayIndex = function (target, key) {\n  return isTypedArray(target)\n    && !isSymbol(key)\n    && key in target\n    && isIntegralNumber(+key)\n    && key >= 0;\n};\n\nvar wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {\n  key = toPropertyKey(key);\n  return isTypedArrayIndex(target, key)\n    ? createPropertyDescriptor(2, target[key])\n    : nativeGetOwnPropertyDescriptor(target, key);\n};\n\nvar wrappedDefineProperty = function defineProperty(target, key, descriptor) {\n  key = toPropertyKey(key);\n  if (isTypedArrayIndex(target, key)\n    && isObject(descriptor)\n    && hasOwn(descriptor, 'value')\n    && !hasOwn(descriptor, 'get')\n    && !hasOwn(descriptor, 'set')\n    // TODO: add validation descriptor w/o calling accessors\n    && !descriptor.configurable\n    && (!hasOwn(descriptor, 'writable') || descriptor.writable)\n    && (!hasOwn(descriptor, 'enumerable') || descriptor.enumerable)\n  ) {\n    target[key] = descriptor.value;\n    return target;\n  } return nativeDefineProperty(target, key, descriptor);\n};\n\nif (DESCRIPTORS) {\n  if (!NATIVE_ARRAY_BUFFER_VIEWS) {\n    getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;\n    definePropertyModule.f = wrappedDefineProperty;\n    addGetter(TypedArrayPrototype, 'buffer');\n    addGetter(TypedArrayPrototype, 'byteOffset');\n    addGetter(TypedArrayPrototype, 'byteLength');\n    addGetter(TypedArrayPrototype, 'length');\n  }\n\n  $({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {\n    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,\n    defineProperty: wrappedDefineProperty\n  });\n\n  typedArrayConstructor.exports = function (TYPE, wrapper, CLAMPED) {\n    var BYTES = TYPE.match(/\\d+$/)[0] / 8;\n    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';\n    var GETTER = 'get' + TYPE;\n    var SETTER = 'set' + TYPE;\n    var NativeTypedArrayConstructor = global$4[CONSTRUCTOR_NAME];\n    var TypedArrayConstructor = NativeTypedArrayConstructor;\n    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;\n    var exported = {};\n\n    var getter = function (that, index) {\n      var data = getInternalState(that);\n      return data.view[GETTER](index * BYTES + data.byteOffset, true);\n    };\n\n    var setter = function (that, index, value) {\n      var data = getInternalState(that);\n      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;\n      data.view[SETTER](index * BYTES + data.byteOffset, value, true);\n    };\n\n    var addElement = function (that, index) {\n      nativeDefineProperty(that, index, {\n        get: function () {\n          return getter(this, index);\n        },\n        set: function (value) {\n          return setter(this, index, value);\n        },\n        enumerable: true\n      });\n    };\n\n    if (!NATIVE_ARRAY_BUFFER_VIEWS) {\n      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {\n        anInstance(that, TypedArrayConstructorPrototype);\n        var index = 0;\n        var byteOffset = 0;\n        var buffer, byteLength, length;\n        if (!isObject(data)) {\n          length = toIndex(data);\n          byteLength = length * BYTES;\n          buffer = new ArrayBuffer$1(byteLength);\n        } else if (isArrayBuffer(data)) {\n          buffer = data;\n          byteOffset = toOffset$1(offset, BYTES);\n          var $len = data.byteLength;\n          if ($length === undefined) {\n            if ($len % BYTES) throw RangeError$2(WRONG_LENGTH);\n            byteLength = $len - byteOffset;\n            if (byteLength < 0) throw RangeError$2(WRONG_LENGTH);\n          } else {\n            byteLength = toLength$1($length) * BYTES;\n            if (byteLength + byteOffset > $len) throw RangeError$2(WRONG_LENGTH);\n          }\n          length = byteLength / BYTES;\n        } else if (isTypedArray(data)) {\n          return fromList(TypedArrayConstructor, data);\n        } else {\n          return call$4(typedArrayFrom, TypedArrayConstructor, data);\n        }\n        setInternalState(that, {\n          buffer: buffer,\n          byteOffset: byteOffset,\n          byteLength: byteLength,\n          length: length,\n          view: new DataView$1(buffer)\n        });\n        while (index < length) addElement(that, index++);\n      });\n\n      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);\n      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);\n    } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {\n      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {\n        anInstance(dummy, TypedArrayConstructorPrototype);\n        return inheritIfRequired(function () {\n          if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));\n          if (isArrayBuffer(data)) return $length !== undefined\n            ? new NativeTypedArrayConstructor(data, toOffset$1(typedArrayOffset, BYTES), $length)\n            : typedArrayOffset !== undefined\n              ? new NativeTypedArrayConstructor(data, toOffset$1(typedArrayOffset, BYTES))\n              : new NativeTypedArrayConstructor(data);\n          if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);\n          return call$4(typedArrayFrom, TypedArrayConstructor, data);\n        }(), dummy, TypedArrayConstructor);\n      });\n\n      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);\n      forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {\n        if (!(key in TypedArrayConstructor)) {\n          createNonEnumerableProperty$1(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);\n        }\n      });\n      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;\n    }\n\n    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {\n      createNonEnumerableProperty$1(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);\n    }\n\n    enforceInternalState(TypedArrayConstructorPrototype).TypedArrayConstructor = TypedArrayConstructor;\n\n    if (TYPED_ARRAY_TAG) {\n      createNonEnumerableProperty$1(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);\n    }\n\n    var FORCED = TypedArrayConstructor != NativeTypedArrayConstructor;\n\n    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;\n\n    $({ global: true, constructor: true, forced: FORCED, sham: !NATIVE_ARRAY_BUFFER_VIEWS }, exported);\n\n    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {\n      createNonEnumerableProperty$1(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);\n    }\n\n    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {\n      createNonEnumerableProperty$1(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);\n    }\n\n    setSpecies(CONSTRUCTOR_NAME);\n  };\n} else typedArrayConstructor.exports = function () { /* empty */ };\n\nvar createTypedArrayConstructor = typedArrayConstructor.exports;\n\n// `Uint8Array` constructor\n// https://tc39.es/ecma262/#sec-typedarray-objects\ncreateTypedArrayConstructor('Uint8', function (init) {\n  return function Uint8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n\nvar toPrimitive = toPrimitive$2;\n\nvar $TypeError$1 = TypeError;\n\n// `ToBigInt` abstract operation\n// https://tc39.es/ecma262/#sec-tobigint\nvar toBigInt$1 = function (argument) {\n  var prim = toPrimitive(argument, 'number');\n  if (typeof prim == 'number') throw $TypeError$1(\"Can't convert number to bigint\");\n  // eslint-disable-next-line es-x/no-bigint -- safe\n  return BigInt(prim);\n};\n\nvar ArrayBufferViewCore$3 = arrayBufferViewCore;\nvar $fill = arrayFill$1;\nvar toBigInt = toBigInt$1;\nvar classof$1 = classof$9;\nvar call$3 = functionCall;\nvar uncurryThis$4 = functionUncurryThis;\nvar fails$5 = fails$s;\n\nvar aTypedArray$3 = ArrayBufferViewCore$3.aTypedArray;\nvar exportTypedArrayMethod$3 = ArrayBufferViewCore$3.exportTypedArrayMethod;\nvar slice = uncurryThis$4(''.slice);\n\n// V8 ~ Chrome < 59, Safari < 14.1, FF < 55, Edge <=18\nvar CONVERSION_BUG = fails$5(function () {\n  var count = 0;\n  // eslint-disable-next-line es-x/no-typed-arrays -- safe\n  new Int8Array(2).fill({ valueOf: function () { return count++; } });\n  return count !== 1;\n});\n\n// `%TypedArray%.prototype.fill` method\n// https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill\nexportTypedArrayMethod$3('fill', function fill(value /* , start, end */) {\n  var length = arguments.length;\n  aTypedArray$3(this);\n  var actualValue = slice(classof$1(this), 0, 3) === 'Big' ? toBigInt(value) : +value;\n  return call$3($fill, this, actualValue, length > 1 ? arguments[1] : undefined, length > 2 ? arguments[2] : undefined);\n}, CONVERSION_BUG);\n\nvar global$3 = global$t;\nvar call$2 = functionCall;\nvar ArrayBufferViewCore$2 = arrayBufferViewCore;\nvar lengthOfArrayLike = lengthOfArrayLike$8;\nvar toOffset = toOffset$2;\nvar toIndexedObject = toObject$7;\nvar fails$4 = fails$s;\n\nvar RangeError$1 = global$3.RangeError;\nvar Int8Array$2 = global$3.Int8Array;\nvar Int8ArrayPrototype = Int8Array$2 && Int8Array$2.prototype;\nvar $set = Int8ArrayPrototype && Int8ArrayPrototype.set;\nvar aTypedArray$2 = ArrayBufferViewCore$2.aTypedArray;\nvar exportTypedArrayMethod$2 = ArrayBufferViewCore$2.exportTypedArrayMethod;\n\nvar WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS = !fails$4(function () {\n  // eslint-disable-next-line es-x/no-typed-arrays -- required for testing\n  var array = new Uint8ClampedArray(2);\n  call$2($set, array, { length: 1, 0: 3 }, 1);\n  return array[1] !== 3;\n});\n\n// https://bugs.chromium.org/p/v8/issues/detail?id=11294 and other\nvar TO_OBJECT_BUG = WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS && ArrayBufferViewCore$2.NATIVE_ARRAY_BUFFER_VIEWS && fails$4(function () {\n  var array = new Int8Array$2(2);\n  array.set(1);\n  array.set('2', 1);\n  return array[0] !== 0 || array[1] !== 2;\n});\n\n// `%TypedArray%.prototype.set` method\n// https://tc39.es/ecma262/#sec-%typedarray%.prototype.set\nexportTypedArrayMethod$2('set', function set(arrayLike /* , offset */) {\n  aTypedArray$2(this);\n  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);\n  var src = toIndexedObject(arrayLike);\n  if (WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS) return call$2($set, this, src, offset);\n  var length = this.length;\n  var len = lengthOfArrayLike(src);\n  var index = 0;\n  if (len + offset > length) throw RangeError$1('Wrong length');\n  while (index < len) this[offset + index] = src[index++];\n}, !WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS || TO_OBJECT_BUG);\n\nvar arraySlice$2 = arraySliceSimple;\n\nvar floor = Math.floor;\n\nvar mergeSort = function (array, comparefn) {\n  var length = array.length;\n  var middle = floor(length / 2);\n  return length < 8 ? insertionSort(array, comparefn) : merge(\n    array,\n    mergeSort(arraySlice$2(array, 0, middle), comparefn),\n    mergeSort(arraySlice$2(array, middle), comparefn),\n    comparefn\n  );\n};\n\nvar insertionSort = function (array, comparefn) {\n  var length = array.length;\n  var i = 1;\n  var element, j;\n\n  while (i < length) {\n    j = i;\n    element = array[i];\n    while (j && comparefn(array[j - 1], element) > 0) {\n      array[j] = array[--j];\n    }\n    if (j !== i++) array[j] = element;\n  } return array;\n};\n\nvar merge = function (array, left, right, comparefn) {\n  var llength = left.length;\n  var rlength = right.length;\n  var lindex = 0;\n  var rindex = 0;\n\n  while (lindex < llength || rindex < rlength) {\n    array[lindex + rindex] = (lindex < llength && rindex < rlength)\n      ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]\n      : lindex < llength ? left[lindex++] : right[rindex++];\n  } return array;\n};\n\nvar arraySort = mergeSort;\n\nvar userAgent$1 = engineUserAgent;\n\nvar firefox = userAgent$1.match(/firefox\\/(\\d+)/i);\n\nvar engineFfVersion = !!firefox && +firefox[1];\n\nvar UA = engineUserAgent;\n\nvar engineIsIeOrEdge = /MSIE|Trident/.test(UA);\n\nvar userAgent = engineUserAgent;\n\nvar webkit = userAgent.match(/AppleWebKit\\/(\\d+)\\./);\n\nvar engineWebkitVersion = !!webkit && +webkit[1];\n\nvar global$2 = global$t;\nvar uncurryThis$3 = functionUncurryThis;\nvar fails$3 = fails$s;\nvar aCallable = aCallable$9;\nvar internalSort = arraySort;\nvar ArrayBufferViewCore$1 = arrayBufferViewCore;\nvar FF = engineFfVersion;\nvar IE_OR_EDGE = engineIsIeOrEdge;\nvar V8 = engineV8Version;\nvar WEBKIT = engineWebkitVersion;\n\nvar aTypedArray$1 = ArrayBufferViewCore$1.aTypedArray;\nvar exportTypedArrayMethod$1 = ArrayBufferViewCore$1.exportTypedArrayMethod;\nvar Uint16Array = global$2.Uint16Array;\nvar un$Sort = Uint16Array && uncurryThis$3(Uint16Array.prototype.sort);\n\n// WebKit\nvar ACCEPT_INCORRECT_ARGUMENTS = !!un$Sort && !(fails$3(function () {\n  un$Sort(new Uint16Array(2), null);\n}) && fails$3(function () {\n  un$Sort(new Uint16Array(2), {});\n}));\n\nvar STABLE_SORT = !!un$Sort && !fails$3(function () {\n  // feature detection can be too slow, so check engines versions\n  if (V8) return V8 < 74;\n  if (FF) return FF < 67;\n  if (IE_OR_EDGE) return true;\n  if (WEBKIT) return WEBKIT < 602;\n\n  var array = new Uint16Array(516);\n  var expected = Array(516);\n  var index, mod;\n\n  for (index = 0; index < 516; index++) {\n    mod = index % 4;\n    array[index] = 515 - index;\n    expected[index] = index - 2 * mod + 3;\n  }\n\n  un$Sort(array, function (a, b) {\n    return (a / 4 | 0) - (b / 4 | 0);\n  });\n\n  for (index = 0; index < 516; index++) {\n    if (array[index] !== expected[index]) return true;\n  }\n});\n\nvar getSortCompare = function (comparefn) {\n  return function (x, y) {\n    if (comparefn !== undefined) return +comparefn(x, y) || 0;\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (y !== y) return -1;\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (x !== x) return 1;\n    if (x === 0 && y === 0) return 1 / x > 0 && 1 / y < 0 ? 1 : -1;\n    return x > y;\n  };\n};\n\n// `%TypedArray%.prototype.sort` method\n// https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort\nexportTypedArrayMethod$1('sort', function sort(comparefn) {\n  if (comparefn !== undefined) aCallable(comparefn);\n  if (STABLE_SORT) return un$Sort(this, comparefn);\n\n  return internalSort(aTypedArray$1(this), getSortCompare(comparefn));\n}, !STABLE_SORT || ACCEPT_INCORRECT_ARGUMENTS);\n\nvar global$1 = global$t;\nvar apply$1 = functionApply;\nvar ArrayBufferViewCore = arrayBufferViewCore;\nvar fails$2 = fails$s;\nvar arraySlice$1 = arraySlice$5;\n\nvar Int8Array$1 = global$1.Int8Array;\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar $toLocaleString = [].toLocaleString;\n\n// iOS Safari 6.x fails here\nvar TO_LOCALE_STRING_BUG = !!Int8Array$1 && fails$2(function () {\n  $toLocaleString.call(new Int8Array$1(1));\n});\n\nvar FORCED = fails$2(function () {\n  return [1, 2].toLocaleString() != new Int8Array$1([1, 2]).toLocaleString();\n}) || !fails$2(function () {\n  Int8Array$1.prototype.toLocaleString.call([1, 2]);\n});\n\n// `%TypedArray%.prototype.toLocaleString` method\n// https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring\nexportTypedArrayMethod('toLocaleString', function toLocaleString() {\n  return apply$1(\n    $toLocaleString,\n    TO_LOCALE_STRING_BUG ? arraySlice$1(aTypedArray(this)) : aTypedArray(this),\n    arraySlice$1(arguments)\n  );\n}, FORCED);\n\nclass Payload {\n  constructor(data) {\n    // The tag's value is a hardcoded value as per\n    // defined in the NEP [NEP413](https://github.com/near/NEPs/blob/master/neps/nep-0413.md)\n    this.tag = 2147484061;\n    this.message = data.message;\n    this.nonce = data.nonce;\n    this.recipient = data.recipient;\n    if (data.callbackUrl) {\n      this.callbackUrl = data.callbackUrl;\n    }\n  }\n}\nconst payloadSchema = new Map([[Payload, {\n  kind: \"struct\",\n  fields: [[\"tag\", \"u32\"], [\"message\", \"string\"], [\"nonce\", [32]], [\"recipient\", \"string\"], [\"callbackUrl\", {\n    kind: \"option\",\n    type: \"string\"\n  }]]\n}]]);\nconst serializeNep413 = signMessageParams => {\n  const payload = new Payload(Object.assign({}, signMessageParams));\n  return Buffer.from(borsh.serialize(payloadSchema, payload));\n};\n\nconst verifySignature = ({\n  publicKey,\n  signature,\n  message,\n  nonce,\n  recipient,\n  callbackUrl\n}) => {\n  // Reconstruct the payload that was **actually signed**\n  const payload = new Payload({\n    message,\n    nonce,\n    recipient,\n    callbackUrl\n  });\n  // Serialize payload based on payloadSchema\n  const borshPayload = borsh.serialize(payloadSchema, payload);\n  // Hash the payload as in the NEP0413 referenced example\n  // https://github.com/near/NEPs/blob/master/neps/nep-0413.md#references\n  // https://github.com/gagdiez/near-login/blob/main/authenticate/wallet-authenticate.js#L21\n  const hashedPayload = Uint8Array.from(jsSha256.sha256.array(borshPayload));\n  // Convert real signature to buffer base64\n  const realSignature = Buffer.from(signature, \"base64\");\n  const pk = nearAPI.utils.PublicKey.from(publicKey);\n  // Verify the signature\n  return pk.verify(hashedPayload, realSignature);\n};\nconst fetchAllUserKeys = ({\n  accountId,\n  network,\n  publicKey\n}) => __awaiter(void 0, void 0, void 0, function* () {\n  const provider = new nearAPI.providers.JsonRpcProvider({\n    url: network.nodeUrl\n  });\n  const key = yield provider.query({\n    request_type: \"view_access_key\",\n    account_id: accountId,\n    finality: \"final\",\n    public_key: publicKey\n  });\n  return key;\n});\nconst verifyFullKeyBelongsToUser = ({\n  publicKey,\n  accountId,\n  network\n}) => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    permission\n  } = yield fetchAllUserKeys({\n    accountId,\n    network,\n    publicKey\n  });\n  return permission === \"FullAccess\";\n});\n\n// TODO: Remove from `core-js@4` since it's moved to entry points\n\nvar uncurryThis$2 = functionUncurryThis;\nvar defineBuiltIn = defineBuiltIn$8;\nvar regexpExec$2 = regexpExec$3;\nvar fails$1 = fails$s;\nvar wellKnownSymbol = wellKnownSymbol$j;\nvar createNonEnumerableProperty = createNonEnumerableProperty$8;\n\nvar SPECIES = wellKnownSymbol('species');\nvar RegExpPrototype = RegExp.prototype;\n\nvar fixRegexpWellKnownSymbolLogic = function (KEY, exec, FORCED, SHAM) {\n  var SYMBOL = wellKnownSymbol(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails$1(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails$1(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n\n    if (KEY === 'split') {\n      // We can't use real regex here since it causes deoptimization\n      // and serious performance degradation in V8\n      // https://github.com/zloirock/core-js/issues/306\n      re = {};\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n      re.flags = '';\n      re[SYMBOL] = /./[SYMBOL];\n    }\n\n    re.exec = function () { execCalled = true; return null; };\n\n    re[SYMBOL]('');\n    return !execCalled;\n  });\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    FORCED\n  ) {\n    var uncurriedNativeRegExpMethod = uncurryThis$2(/./[SYMBOL]);\n    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n      var uncurriedNativeMethod = uncurryThis$2(nativeMethod);\n      var $exec = regexp.exec;\n      if ($exec === regexpExec$2 || $exec === RegExpPrototype.exec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return { done: true, value: uncurriedNativeRegExpMethod(regexp, str, arg2) };\n        }\n        return { done: true, value: uncurriedNativeMethod(str, regexp, arg2) };\n      }\n      return { done: false };\n    });\n\n    defineBuiltIn(String.prototype, KEY, methods[0]);\n    defineBuiltIn(RegExpPrototype, SYMBOL, methods[1]);\n  }\n\n  if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);\n};\n\nvar uncurryThis$1 = functionUncurryThis;\nvar toIntegerOrInfinity = toIntegerOrInfinity$6;\nvar toString$1 = toString$5;\nvar requireObjectCoercible$1 = requireObjectCoercible$6;\n\nvar charAt$1 = uncurryThis$1(''.charAt);\nvar charCodeAt = uncurryThis$1(''.charCodeAt);\nvar stringSlice$1 = uncurryThis$1(''.slice);\n\nvar createMethod = function (CONVERT_TO_STRING) {\n  return function ($this, pos) {\n    var S = toString$1(requireObjectCoercible$1($this));\n    var position = toIntegerOrInfinity(pos);\n    var size = S.length;\n    var first, second;\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n    first = charCodeAt(S, position);\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size\n      || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF\n        ? CONVERT_TO_STRING\n          ? charAt$1(S, position)\n          : first\n        : CONVERT_TO_STRING\n          ? stringSlice$1(S, position, position + 2)\n          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  };\n};\n\nvar stringMultibyte = {\n  // `String.prototype.codePointAt` method\n  // https://tc39.es/ecma262/#sec-string.prototype.codepointat\n  codeAt: createMethod(false),\n  // `String.prototype.at` method\n  // https://github.com/mathiasbynens/String.prototype.at\n  charAt: createMethod(true)\n};\n\nvar charAt = stringMultibyte.charAt;\n\n// `AdvanceStringIndex` abstract operation\n// https://tc39.es/ecma262/#sec-advancestringindex\nvar advanceStringIndex$1 = function (S, index, unicode) {\n  return index + (unicode ? charAt(S, index).length : 1);\n};\n\nvar call$1 = functionCall;\nvar anObject$1 = anObject$e;\nvar isCallable = isCallable$n;\nvar classof = classofRaw$1;\nvar regexpExec$1 = regexpExec$3;\n\nvar $TypeError = TypeError;\n\n// `RegExpExec` abstract operation\n// https://tc39.es/ecma262/#sec-regexpexec\nvar regexpExecAbstract = function (R, S) {\n  var exec = R.exec;\n  if (isCallable(exec)) {\n    var result = call$1(exec, R, S);\n    if (result !== null) anObject$1(result);\n    return result;\n  }\n  if (classof(R) === 'RegExp') return call$1(regexpExec$1, R, S);\n  throw $TypeError('RegExp#exec called on incompatible receiver');\n};\n\nvar apply = functionApply;\nvar call = functionCall;\nvar uncurryThis = functionUncurryThis;\nvar fixRegExpWellKnownSymbolLogic = fixRegexpWellKnownSymbolLogic;\nvar isRegExp = isRegexp;\nvar anObject = anObject$e;\nvar requireObjectCoercible = requireObjectCoercible$6;\nvar speciesConstructor = speciesConstructor$3;\nvar advanceStringIndex = advanceStringIndex$1;\nvar toLength = toLength$6;\nvar toString = toString$5;\nvar getMethod = getMethod$4;\nvar arraySlice = arraySliceSimple;\nvar callRegExpExec = regexpExecAbstract;\nvar regexpExec = regexpExec$3;\nvar stickyHelpers = regexpStickyHelpers;\nvar fails = fails$s;\n\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;\nvar MAX_UINT32 = 0xFFFFFFFF;\nvar min = Math.min;\nvar $push = [].push;\nvar exec = uncurryThis(/./.exec);\nvar push = uncurryThis($push);\nvar stringSlice = uncurryThis(''.slice);\n\n// Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  // eslint-disable-next-line regexp/no-empty-group -- required for testing\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\n\n// @@split logic\nfixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'.split(/(b)*/)[1] == 'c' ||\n    // eslint-disable-next-line regexp/no-empty-group -- required for testing\n    'test'.split(/(?:)/, -1).length != 4 ||\n    'ab'.split(/(?:ab)*/).length != 2 ||\n    '.'.split(/(.?)(.?)/).length != 4 ||\n    // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing\n    '.'.split(/()()/).length > 1 ||\n    ''.split(/.?/).length\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = toString(requireObjectCoercible(this));\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (separator === undefined) return [string];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) {\n        return call(nativeSplit, string, separator, lim);\n      }\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = call(regexpExec, separatorCopy, string)) {\n        lastIndex = separatorCopy.lastIndex;\n        if (lastIndex > lastLastIndex) {\n          push(output, stringSlice(string, lastLastIndex, match.index));\n          if (match.length > 1 && match.index < string.length) apply($push, output, arraySlice(match, 1));\n          lastLength = match[0].length;\n          lastLastIndex = lastIndex;\n          if (output.length >= lim) break;\n        }\n        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string.length) {\n        if (lastLength || !exec(separatorCopy, '')) push(output, '');\n      } else push(output, stringSlice(string, lastLastIndex));\n      return output.length > lim ? arraySlice(output, 0, lim) : output;\n    };\n  // Chakra, V8\n  } else if ('0'.split(undefined, 0).length) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : call(nativeSplit, this, separator, limit);\n    };\n  } else internalSplit = nativeSplit;\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.es/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = requireObjectCoercible(this);\n      var splitter = separator == undefined ? undefined : getMethod(separator, SPLIT);\n      return splitter\n        ? call(splitter, separator, O, limit)\n        : call(internalSplit, toString(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (string, limit) {\n      var rx = anObject(this);\n      var S = toString(string);\n      var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);\n\n      if (res.done) return res.value;\n\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (UNSUPPORTED_Y ? 'g' : 'y');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;\n        var z = callRegExpExec(splitter, UNSUPPORTED_Y ? stringSlice(S, q) : S);\n        var e;\n        if (\n          z === null ||\n          (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          push(A, stringSlice(S, p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            push(A, z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      push(A, stringSlice(S, p));\n      return A;\n    }\n  ];\n}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);\n\nvar modal$b = {\n\twallet: {\n\t\tconnectYourWallet: \"Connect Your Wallet\",\n\t\twhatIsAWallet: \"What is a Wallet?\",\n\t\tsecureAndManage: \"Secure & Manage Your Digital Assets\",\n\t\tsafelyStore: \"Safely store and transfer your crypto and NFTs.\",\n\t\tlogInToAny: \"Log In to Any NEAR App\",\n\t\tnoNeedToCreate: \"No need to create new accounts or credentials. Connect your wallet and you are good to go!\",\n\t\tgetAWallet: \"Get a Wallet\",\n\t\tuseAWallet: \"Use a wallet to secure and manage your NEAR assets, and to log in to any NEAR app without the need for usernames and passwords.\",\n\t\tconnectionFailed: \"Connection Failed\",\n\t\tconnectionSuccessful: \"Connection Successful\",\n\t\tconnected: \"Connected\",\n\t\tconnectingTo: \"Connecting to\",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"Confirm the connection in the extension window\",\n\t\t\tbrowser: \"Confirm the connection in the wallet after redirect\",\n\t\t\thardware: \"Confirm the connection in the ledger device\",\n\t\t\tbridge: \"Confirm the connection in the wallet\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"Connect with Ledger\",\n\t\tmakeSureYourLedger: \"Make sure your Ledger is connected securely, and that the NEAR app is open on your device\",\n\t\t\"continue\": \"Continue\",\n\t\tspecifyHDPath: \"Specify HD Path\",\n\t\tenterYourPreferredHDPath: \"Enter your preferred HD path, then scan for any active accounts.\",\n\t\tscan: \"Scan\",\n\t\tretry: \"Retry\",\n\t\tledgerIsNotAvailable: \"Ledger is not available\",\n\t\taccessDeniedToUseLedgerDevice: \"Access denied to use Ledger device\",\n\t\tnoAccountsFound: \"No Accounts Found\",\n\t\tselectYourAccounts: \"Select Your Accounts\",\n\t\tconnecting1Account: \"Connecting 1 Account\",\n\t\tcantFindAnyAccount: \"Can't find any account associated with this Ledger. Please create a new NEAR account on\",\n\t\torConnectAnAnotherLedger: \"or connect an another Ledger.\",\n\t\tconnecting: \"Connecting\",\n\t\tofAccounts: \"of Accounts\",\n\t\tfailedToAutomatically: \"Failed to automatically find account id. Provide it manually:\",\n\t\toverviewTheListOfAuthorized: \"Overview the list of authorized account(s), complete sign in by clicking the button below.\",\n\t\tfinish: \"Finish\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"You'll need to install\",\n\t\ttoContinueAfterInstalling: \"to continue. After installing\",\n\t\trefreshThePage: \"refresh the page.\",\n\t\topen: \"Open\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"Copied to clipboard\",\n\t\tfailedToCopy: \"Failed to copy to clipboard\",\n\t\tscanWithYourMobile: \"Scan with Your Mobile Device\",\n\t\tcopyToClipboard: \" Copy to clipboard\",\n\t\tpreferTheOfficial: \"Prefer the official dialogue of\",\n\t\topen: \"Open\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Hardware Wallet\",\n\t\tbrowser: \"Browser Wallet\",\n\t\tinjected: \"Wallet Extension\",\n\t\tbridge: \"Bridge Wallet\",\n\t\tmobile: \"Mobile Wallet\",\n\t\t\"instant-link\": \"Instant Wallet\"\n\t},\n\texportAccounts: {\n\t\tchooseAWallet: \"Choose a Wallet\",\n\t\ttransferYourAccounts: \"Transfer Your Accounts\",\n\t\tselectAWallet: \"Select a wallet that fits your needs and supports your connected accounts.\",\n\t\tselectYourAccounts: \"Select Your Accounts\",\n\t\tafterDecide: \"After you decide on a wallet, you can select which accounts you want to transfer.\",\n\t\tdisclaimer: \"You won’t be able to transfer accounts that have never been funded or used on NEAR.\",\n\t\twarning: \"does not support account export at this time. Please select another wallet.\",\n\t\twalletTypes: {\n\t\t\thardware: \"Hardware Wallet\",\n\t\t\tbrowser: \"Browser Wallet\",\n\t\t\tinjected: \"Wallet Extension\",\n\t\t\tbridge: \"Bridge Wallet\",\n\t\t\tmobile: \"Mobile Wallet\"\n\t\t},\n\t\tselectAccounts: {\n\t\t\ttitle: \"Select Accounts to Transfer\",\n\t\t\tbutton: \"Continue\",\n\t\t\tdeselectAll: \"Deselect All\",\n\t\t\tselectAll: \"Select All\",\n\t\t\tunavailable: \"Transfer Unavailable\",\n\t\t\terror: \"Account does not exist\",\n\t\t\twarningLedger: \"Ledger support required\",\n\t\t\tnoBalance: \"Account not funded\"\n\t\t},\n\t\tgetPassphrase: {\n\t\t\ttitle: \"Copy Temporary Password\",\n\t\t\tdesc: \"You’ll need to enter this password when you begin exporting your accounts to a different wallet.\",\n\t\t\tbutton: \"Continue\",\n\t\t\ttransferButton: \"Transfer Accounts\",\n\t\t\tlabel: \"Click to Copy\",\n\t\t\tcheckLabel: \"I copied or wrote down the password\"\n\t\t},\n\t\tcomplete: {\n\t\t\ttitle: \"Complete the Transfer\",\n\t\t\tdescOne: \"You will now be redirected to the wallet you selected to complete the transfer.\",\n\t\t\tdescTwo: \"Once import part of process is completed from selected wallet, press button to complete the transfer process.\",\n\t\t\tstartOverButton: \"Start Over\",\n\t\t\tbutton: \"Complete\"\n\t\t}\n\t}\n};\nvar component$1 = {\n\tclickToCopy: {\n\t\tlabel: \"Copied\",\n\t\ttooltip: \"Click to copy\"\n\t}\n};\nvar en = {\n\tmodal: modal$b,\n\tcomponent: component$1\n};\n\nvar modal$a = {\n\twallet: {\n\t\tconnectYourWallet: \"Conecta Tu Billetera\",\n\t\twhatIsAWallet: \"¿Que es una Billetera?\",\n\t\tsecureAndManage: \"Resguarda y Administrar Tus Activos Digitales\",\n\t\tsafelyStore: \"Almacena de forma segura y transfiere tus cryptos y NFT's\",\n\t\tlogInToAny: \"Inicie sesión en Cualquier Aplicacion NEAR\",\n\t\tnoNeedToCreate: \"No es necesario crear nuevas cuentas o credenciales, ¡Conecta tu billetera y listo!\",\n\t\tgetAWallet: \"Obten una Billetera\",\n\t\tuseAWallet: \"Usa tu Billetera para resguardar y administrar tus activos en NEAR, e Iniciar sesión en cualquier aplicacion NEAR sin la necesidad de nombres de usuarios y contraseñas\",\n\t\tconnectionFailed: \"Conexión Fallida\",\n\t\tconnectionSuccessful: \"Conexión Existosa\",\n\t\tconnected: \"Conectado\",\n\t\tconnectingTo: \"Conectando a \",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"Confirme la conexión en la ventana de extensión\",\n\t\t\tbrowser: \"Confirme la conexión en la billetera después de la redirección\",\n\t\t\thardware: \"Confirme la conexión en el dispositivo de libro mayor\",\n\t\t\tbridge: \"Confirmar la conexión en la billetera\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"Conectar con Ledger\",\n\t\tmakeSureYourLedger: \"Asegúrese de que su ledger está conectada de forma segura y que la aplicacion NEAR esté abierta en su dispositivo\",\n\t\t\"continue\": \"Continuar\",\n\t\tspecifyHDPath: \"Especifique la ruta HD\",\n\t\tenterYourPreferredHDPath: \"Ingrese su ruta HD prerida,y luego busque cualquier cuenta activa.\",\n\t\tscan: \"Escanear\",\n\t\tretry: \"Reintentar\",\n\t\tledgerIsNotAvailable: \"El Ledger no está disponible\",\n\t\taccessDeniedToUseLedgerDevice: \"Acceso denegado para usar el dispositivo ledger\",\n\t\tnoAccountsFound: \"No se encontraron cuentas\",\n\t\tselectYourAccounts: \"Selecciona tus cuentas\",\n\t\tconnecting1Account: \"Conectando a 1 cuenta\",\n\t\tcantFindAnyAccount: \"No se pudo encontrar ninguna cuenta asociada con este ledger,Por favor crea una nueva cuenta en NEAR\",\n\t\torConnectAnAnotherLedger: \"o conecta otro ledger\",\n\t\tconnecting: \"Conectando\",\n\t\tofAccounts: \"de Cuentas\",\n\t\tfailedToAutomatically: \"No se pudo encontrar automaticamente el id de la cuenta,Ingresalo manualmente:\",\n\t\toverviewTheListOfAuthorized: \"Revise la lista de las cuentas autorizadas,Complete el inicio de sesión haciedo click a countinuacion.\",\n\t\tfinish: \"Finalizar\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"Tendrás que instalar\",\n\t\ttoContinueAfterInstalling: \"Para continuar, Despues de instalar\",\n\t\trefreshThePage: \"Recarga la pagina\",\n\t\topen: \"Abrir\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"Copiado al Portapapeles\",\n\t\tfailedToCopy: \"Falló la copia al Portapapeles\",\n\t\tscanWithYourMobile: \"Busca con tu dispositivo movil\",\n\t\tcopyToClipboard: \" Copiar al Portapapeles\",\n\t\tpreferTheOfficial: \"¿Prefires el diálogo oficial de\",\n\t\topen: \"Abrir\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Hardware Wallet\",\n\t\tbrowser: \"Browser Wallet\",\n\t\tinjected: \"Wallet Extension\",\n\t\tbridge: \"Bridge Wallet\",\n\t\tmobile: \"Mobile Wallet\",\n\t\t\"instant-link\": \"Instant Wallet\"\n\t}\n};\nvar es = {\n\tmodal: modal$a\n};\n\nvar modal$9 = {\n\twallet: {\n\t\tconnectYourWallet: \"连接你的钱包\",\n\t\twhatIsAWallet: \"什么是钱包？\",\n\t\tsecureAndManage: \"保护和管理你的数字资产\",\n\t\tsafelyStore: \"安全存储和转移你的加密货币和NFT\",\n\t\tlogInToAny: \"登录任何 NEAR 应用\",\n\t\tnoNeedToCreate: \"不需要创建新账户或密码。连接你的钱包，即可开始使用！\",\n\t\tgetAWallet: \"获取新账户\",\n\t\tuseAWallet: \"使用钱包来保护和管理你的 NEAR 资产，无需用户名和密码即可登录任何 NEAR 应用\",\n\t\tconnectionFailed: \"连接失败\",\n\t\tconnectionSuccessful: \"连接成功\",\n\t\tconnected: \"已连接\",\n\t\tconnectingTo: \"正在连接\"\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"连接 Ledger\",\n\t\tmakeSureYourLedger: \"确保你的 Ledger 已经安全连接，并且 NEAR 应用已经在你设备上打开\",\n\t\t\"continue\": \"继续\",\n\t\tspecifyHDPath: \"指定 HD 路径\",\n\t\tenterYourPreferredHDPath: \"输入你偏好的 HD 路径，然后为任意活跃账户扫码\",\n\t\tscan: \"扫码\",\n\t\tretry: \"重试\",\n\t\tledgerIsNotAvailable: \"Ledger 不可用\",\n\t\taccessDeniedToUseLedgerDevice: \"访问 Ledger 设备被拒绝\",\n\t\tnoAccountsFound: \"没有找到账户\",\n\t\tselectYourAccounts: \"选择你的账户\",\n\t\tconnecting1Account: \"正在连接1个账户\",\n\t\tcantFindAnyAccount: \"没有找到任何与这个 Ledger 相关联的账户。请创建新账户于\",\n\t\t\"orConnectAnAnotherLedger.\": \"或连接另一个 Ledger\",\n\t\tconnecting: \"正在连接\",\n\t\tofAccounts: \"个账户\",\n\t\tfailedToAutomatically: \"无法自动找到账户ID，请主动提供：\",\n\t\toverviewTheListOfAuthorized: \"请查看已授权的账户列表，点击以下按钮完成登录\",\n\t\tfinish: \"完成\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"你将需要安装\",\n\t\ttoContinueAfterInstalling: \"以继续。安装完\",\n\t\trefreshThePage: \"请刷新页面\",\n\t\topen: \"打开\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"复制到了剪贴板\",\n\t\tfailedToCopy: \"复制到剪贴板失败\",\n\t\tscanWithYourMobile: \"用你的移动设备扫码\",\n\t\tcopyToClipboard: \" 复制到剪贴板\",\n\t\tpreferTheOfficial: \"希望使用官方对话框于\",\n\t\topen: \"打开\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Hardware Wallet\",\n\t\tbrowser: \"Browser Wallet\",\n\t\tinjected: \"Wallet Extension\",\n\t\tbridge: \"Bridge Wallet\",\n\t\tmobile: \"Mobile Wallet\",\n\t\t\"instant-link\": \"Instant Wallet\"\n\t}\n};\nvar zh = {\n\tmodal: modal$9\n};\n\nvar modal$8 = {\n\twallet: {\n\t\tconnectYourWallet: \"Свържете вашия Портфейл\",\n\t\twhatIsAWallet: \"Какво е Портфейл?\",\n\t\tsecureAndManage: \"Защитете и управлявайте дигиталните си активи\",\n\t\tsafelyStore: \"Съхранявайте и прехвърляйте безопасно вашите крипто и NFT.\",\n\t\tlogInToAny: \"Използвайте всяко приложение на NEAR\",\n\t\tnoNeedToCreate: \"Няма нужда да създавате нови профили. Свържете портфейла си и сте готови!\",\n\t\tgetAWallet: \"Създайте Портфейл\",\n\t\tuseAWallet: \"Използвайте портфейла, за да защитите и управлявате активите си на NEAR както и да използвате всяко приложение на NEAR без нужда от потребителски имена и пароли.\",\n\t\tconnectionFailed: \"Свързването неуспешно\",\n\t\tconnectionSuccessful: \"Свързването успешно\",\n\t\tconnected: \"Свързан\",\n\t\tconnectingTo: \"Свързване към\",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"Потвърдете свързването в прозореца на разширението\",\n\t\t\tbrowser: \"Потвърдете свързването в портфейла след пренасочването\",\n\t\t\thardware: \"Потвърдете свързването в хардуерния портфейл\",\n\t\t\tbridge: \"Потвърдете връзката в портфейла\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"Свържете се с Ledger\",\n\t\tmakeSureYourLedger: \"Уверете се, че вашият Ledger е свързан и че приложението NEAR е отворено нa него.\",\n\t\t\"continue\": \"Продължете\",\n\t\tspecifyHDPath: \"Посочете HD път\",\n\t\tenterYourPreferredHDPath: \"Въведете предпочитания HD път, след което сканирайте за активни акаунти.\",\n\t\tscan: \"Сканирайте\",\n\t\tretry: \"Опитайте отново\",\n\t\tledgerIsNotAvailable: \"Ledger устройството не е достъпно\",\n\t\taccessDeniedToUseLedgerDevice: \"Достъпът за използване на Ledger е отказан\",\n\t\tnoAccountsFound: \"Няма намерени профили\",\n\t\tselectYourAccounts: \"Изберете вашите профили\",\n\t\tconnecting1Account: \"Свързване на 1 профил\",\n\t\tcantFindAnyAccount: \"Няма намерени профили, съврзани с този Ledger. Моля, създайте нов NEAR профил на\",\n\t\torConnectAnAnotherLedger: \"или свържете друг Ledger.\",\n\t\tconnecting: \"Свързване\",\n\t\tofAccounts: \"от профили\",\n\t\tfailedToAutomatically: \"Автоматичното намиране на профила не бе успешно. Въведете го ръчно:\",\n\t\toverviewTheListOfAuthorized: \"Прегледайте списъка с упълномощени профили, завършете влизането, като щракнете върху бутона по-долу..\",\n\t\tfinish: \"Завършете\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"Ще трябва да инсталирате\",\n\t\ttoContinueAfterInstalling: \"за да продължите. След инсталиране\",\n\t\trefreshThePage: \"презаредете страницата.\",\n\t\topen: \"Отворете\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"Копирано в клипборда\",\n\t\tfailedToCopy: \"Неуспешно копиране в клипборда\",\n\t\tscanWithYourMobile: \" Сканирайте с мобилното си устройство\",\n\t\tcopyToClipboard: \" Копирайте в клипборда\",\n\t\tpreferTheOfficial: \"Предпочитан език за кореспонденция\",\n\t\topen: \"Отворете\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Hardware Wallet\",\n\t\tbrowser: \"Browser Wallet\",\n\t\tinjected: \"Wallet Extension\",\n\t\tbridge: \"Bridge Wallet\",\n\t\tmobile: \"Mobile Wallet\",\n\t\t\"instant-link\": \"Instant Wallet\"\n\t}\n};\nvar bg = {\n\tmodal: modal$8\n};\n\nvar modal$7 = {\n\twallet: {\n\t\tconnectYourWallet: \"지갑 연결하기\",\n\t\twhatIsAWallet: \"지갑은 무슨 역할을 하나요?\",\n\t\tsecureAndManage: \"당신의 디지털 자산을 보호하고 관리합니다.\",\n\t\tsafelyStore: \"암호화폐와 NFT를 안전하게 저장하고 전송할 수 있습니다.\",\n\t\tlogInToAny: \"NEAR App에 로그인합니다.\",\n\t\tnoNeedToCreate: \"새로운 계정이나 비밀번호를 만들 필요 없이 지갑을 연결한 후 바로 사용할 수 있습니다.\",\n\t\tgetAWallet: \"지갑 가져오기\",\n\t\tuseAWallet: \"지갑을 사용하여 NEAR 자산을 보호·관리하고, 아이디와 비밀번호 없이 NEAR 앱에 로그인할 수 있습니다.\",\n\t\tconnectionFailed: \"연결 실패\",\n\t\tconnectionSuccessful: \"연결 성공\",\n\t\tconnected: \"Connected\",\n\t\tconnectingTo: \"연결 중: \",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"익스텐션 창에서 연결을 확인하세요\",\n\t\t\tbrowser: \"리다이렉트 된 지갑에서 연결을 확인하세요\",\n\t\t\thardware: \"Ledger 기기에서 연결을 확인하세요\",\n\t\t\tbridge: \"지갑에서 연결 확인\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"Ledger 연결하기\",\n\t\tmakeSureYourLedger: \"Ledger가 안전하게 연결되어 있고, NEAR 앱이 열려 있는 지 확인하세요\",\n\t\t\"continue\": \"계속하기\",\n\t\tspecifyHDPath: \"HD Path 지정하기\",\n\t\tenterYourPreferredHDPath: \"원하는 HD Path를 선택하고, 활성화된 계정이 있는 지 검색하세요\",\n\t\tscan: \"검색\",\n\t\tretry: \"다시 시도\",\n\t\tledgerIsNotAvailable: \"Ledger를 사용할 수 없습니다\",\n\t\taccessDeniedToUseLedgerDevice: \"Ledger 기기 접근 권한이 거부되었습니다\",\n\t\tnoAccountsFound: \"계정을 찾을 수 없습니다\",\n\t\tselectYourAccounts: \"계정 선택하기\",\n\t\tconnecting1Account: \"하나의 계정에 연결\",\n\t\tcantFindAnyAccount: \"Ledger와 연결된 계정을 찾을 수 없습니다. 새로운 계정을 생성하거나 \",\n\t\torConnectAnAnotherLedger: \"다른 Ledger를 연결하세요\",\n\t\tconnecting: \"계정 연결하기: \",\n\t\tofAccounts: \"개 계정을 찾았습니다\",\n\t\tfailedToAutomatically: \"계정 ID를 찾지 못했습니다. 수동으로 입력해주세요.\",\n\t\toverviewTheListOfAuthorized: \"인증된 계정 목록을 확인한 후 아래 버튼을 클릭하여 로그인을 완료하세요\",\n\t\tfinish: \"완료\"\n\t},\n\twalletTypes: {\n\t\thardware: \"하드웨어 지갑\",\n\t\tbrowser: \"브라우저 지갑\",\n\t\tinjected: \"지갑 확장\",\n\t\tbridge: \"브리지 지갑\",\n\t\tmobile: \"모바일 지갑\",\n\t\t\"instant-link\": \"인스턴트 지갑\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"다음 확장 프로그램을 설치해주세요:\",\n\t\ttoContinueAfterInstalling: \". 설치 완료 후 페이지 새로 고침이 필요합니다. \",\n\t\trefreshThePage: \"새로 고침\",\n\t\topen: \"Open\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"클립보드에 복사 완료\",\n\t\tfailedToCopy: \"클립보드에 복사 실패\",\n\t\tscanWithYourMobile: \"모바일 장치를 사용하여 스캔해주세요\",\n\t\tcopyToClipboard: \" 클립보드에 복사하기\",\n\t\tpreferTheOfficial: \"다음 프로그램에서 제공하는 공식 프로세스를 선호하십니까: \",\n\t\topen: \"Open\"\n\t}\n};\nvar ko = {\n\tmodal: modal$7\n};\n\nvar modal$6 = {\n\twallet: {\n\t\tconnectYourWallet: \"Kết nối ví của bạn\",\n\t\twhatIsAWallet: \"Ví là gì?\",\n\t\tsecureAndManage: \"Bảo mật & Quản lý tài sản số của bạn\",\n\t\tsafelyStore: \"Lưu trữ và chuyển tiền điện tử và NFT của bạn một cách an toàn.\",\n\t\tlogInToAny: \"Đăng nhập vào bất kỳ ứng dụng trên NEAR\",\n\t\tnoNeedToCreate: \"Không cần tạo tài khoản hoặc thông tin đăng nhập mới. Kết nối ví của bạn và bắt đầu!\",\n\t\tgetAWallet: \"Tạo Ví\",\n\t\tuseAWallet: \"Sử dụng ví để bảo mật và quản lý tài sản trên NEAR của bạn và đăng nhập vào bất kỳ ứng dụng NEAR nào, không cần tên người dùng và mật khẩu.\",\n\t\tconnectionFailed: \"Kết nối thất bại\",\n\t\tconnectionSuccessful: \"Kết nối thành công\",\n\t\tconnected: \"Đã kết nối\",\n\t\tconnectingTo: \"Đang kết nối tới\",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"Xác nhận kết nối trong cửa sổ tiện ích mở rộng\",\n\t\t\tbrowser: \"Xác nhận kết nối trong ví sau khi được chuyển hướng\",\n\t\t\thardware: \"Xác nhận kết nối với ví lạnh\",\n\t\t\tbridge: \"Xác nhận kết nối trong ví\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"Kết nối ví Ledger\",\n\t\tmakeSureYourLedger: \"Đảm bảo Ledger của bạn được kết nối an toàn và ứng dụng NEAR đang mở sẵn trên thiết bị\",\n\t\t\"continue\": \"Tiếp tục\",\n\t\tspecifyHDPath: \"Chỉ định HD Path\",\n\t\tenterYourPreferredHDPath: \"Nhập HD Path của bạn, sau đó quét tìm các tài khoản hoạt động\",\n\t\tscan: \"Quét\",\n\t\tretry: \"Thử lại\",\n\t\tledgerIsNotAvailable: \"Ledger không khả dụng\",\n\t\taccessDeniedToUseLedgerDevice: \"Truy cập Ledger bị từ chối\",\n\t\tnoAccountsFound: \"Không tìm thấy tài khoản\",\n\t\tselectYourAccounts: \"Chọn tài khoản của bạn\",\n\t\tconnecting1Account: \"Đang kết nối 1 tài khoản\",\n\t\tcantFindAnyAccount: \"Không thể tìm thấy bất kỳ tài khoản nào được liên kết với Ledger này. Vui lòng tạo một tài khoản NEAR mới\",\n\t\torConnectAnAnotherLedger: \"hoặc kết nối với ví Ledger khác.\",\n\t\tconnecting: \"Đang kết nối\",\n\t\tofAccounts: \"của tài khoản\",\n\t\tfailedToAutomatically: \"Không thể tự động tìm id tài khoản. Nhập thủ công:\",\n\t\toverviewTheListOfAuthorized: \"Tổng quan danh sách các tài khoản được ủy quyền, hoàn tất đăng nhập bằng cách bấm vào nút bên dưới.\",\n\t\tfinish: \"Hoàn thành\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"Bạn sẽ cần cài đặt\",\n\t\ttoContinueAfterInstalling: \"để bắt đầu. Sau khi cài đặt xong\",\n\t\trefreshThePage: \"Tải lại trang.\",\n\t\topen: \"Mở\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"Đã sao chép vào bảng ghi tạm\",\n\t\tfailedToCopy: \"Sao chép vào bảng ghi tạm thất bại\",\n\t\tscanWithYourMobile: \"Quét với điện thoại của bạn\",\n\t\tcopyToClipboard: \" Sao chép vào bảng ghi tạm\",\n\t\tpreferTheOfficial: \"Dialogue chính thức của\",\n\t\topen: \"Mở\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Ví lạnh\",\n\t\tbrowser: \"Ví trình duyệt\",\n\t\tinjected: \"Ví tiện ích mở rộng\",\n\t\tbridge: \"Ví Cầu\",\n\t\tmobile: \"Ví Mobile\",\n\t\t\"instant-link\": \"Ví tức thì\"\n\t},\n\texportAccounts: {\n\t\tchooseAWallet: \"Chọn ví\",\n\t\ttransferYourAccounts: \"Chuyển tài khoản\",\n\t\tselectAWallet: \"Chọn ví phù hợp với nhu cầu của bạn, ví được chọn cần hỗ trợ các tài khoản đang sử dụng.\",\n\t\tselectYourAccounts: \"Chọn tài khoản\",\n\t\tafterDecide: \"Sau khi chọn được tài khoản bạn có chuyển.\",\n\t\tdisclaimer: \"Bạn không thể chuyển tài khoản nếu tài khoản đó chưa được nhận tiền hoặc chưa phát sinh giao dịch trên NEAR.\",\n\t\twarning: \"không hỗ trợ xuất tài khoản. Vui lòng chọn ví khác.\",\n\t\twalletTypes: {\n\t\t\thardware: \"Ví lạnh\",\n\t\t\tbrowser: \"Ví trình duyệt\",\n\t\t\tinjected: \"Ví tiện ích mở rộng\",\n\t\t\tbridge: \"Ví Cầu\",\n\t\t\tmobile: \"Ví Mobile\"\n\t\t},\n\t\tselectAccounts: {\n\t\t\ttitle: \"Chọn tài khoản để chuyển\",\n\t\t\tbutton: \"Lấy cụm mật khẩu\",\n\t\t\tdeselectAll: \"Bỏ chọn tất cả\",\n\t\t\tselectAll: \"Chọn tất cả\",\n\t\t\tunavailable: \"Chuyển không khả dụng\",\n\t\t\terror: \"Tài khoản không tồn tại\",\n\t\t\twarningLedger: \"Yêu cầu hỗ trợ Ledger\",\n\t\t\tnoBalance: \"Tài khoản trống\"\n\t\t},\n\t\tgetPassphrase: {\n\t\t\ttitle: \"Sao chép mật khẩu tạm thời\",\n\t\t\tdesc: \"Bạn sẽ cần nhập mật khẩu khi bắt đầu xuất các khoản tới ví khác.\",\n\t\t\tbutton: \"Tiếp tục\",\n\t\t\tlabel: \"Bấm để sao chép\",\n\t\t\tcheckLabel: \"Tôi đã chép hoặc ghi lại mật khẩu\"\n\t\t},\n\t\tcomplete: {\n\t\t\ttitle: \"Hoàn thành chuyển\",\n\t\t\tdescOne: \"Bạn sẽ được chuyển hướng tới tài khoản đã chọn để hoàn tất quá trình.\",\n\t\t\tdescTwo: \"Sau khi nhập, nhấn nút để hoàn tất quy trình chuyển.\",\n\t\t\tbutton: \"Hoàn thành\"\n\t\t}\n\t}\n};\nvar component = {\n\tclickToCopy: {\n\t\tlabel: \"Đã sao chép\",\n\t\ttooltip: \"Bấm để sao chép\"\n\t}\n};\nvar vi = {\n\tmodal: modal$6,\n\tcomponent: component\n};\n\nvar modal$5 = {\n\twallet: {\n\t\tconnectYourWallet: \"अपना वॉलेट (Wallet) कनेक्ट करें।\",\n\t\twhatIsAWallet: \"वॉलेट क्या है?\",\n\t\tsecureAndManage: \"सुरक्षित और प्रबंधित करें।\",\n\t\tsafelyStore: \"अपनी क्रिप्टोकरेंसी और एनएफटी को सुरक्षित रूप से स्टोर और ट्रांसफर करें।\",\n\t\tlogInToAny: \"NEAR पर किसी भी ऐप में साइन इन करें।\",\n\t\tnoNeedToCreate: \"नए खाते या लॉगिन बनाने की आवश्यकता नहीं है। अपना वॉलेट(NEAR Wallet)कनेक्ट करें और आरंभ करें।\",\n\t\tgetAWallet: \"एक वॉलेट बनाएँ।\",\n\t\tuseAWallet: \"अपनी NEAR संपत्तियों को सुरक्षित और प्रबंधित करने के लिए वॉलेट का उपयोग करें और किसी भी NEAR ऐप (app) में लॉग इन करें, किसी उपयोगकर्ता (user) नाम और पासवर्ड की आवश्यकता नहीं है।\",\n\t\tconnectionFailed: \"कनेक्शन विफल|\",\n\t\tconnectionSuccessful: \"कनेक्शन सफल|\",\n\t\tconnected: \"वॉलेट जुड़ गया|\",\n\t\tconnectingTo: \"वॉलेट जुड़ रहा हे|\",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"एक्सटेंशन विंडो में कनेक्शन की पुष्टि करें|\",\n\t\t\tbrowser: \"रीडायरेक्ट होने के बाद वॉलेट में कनेक्शन की पुष्टि करें|\",\n\t\t\thardware: \"कोल्ड वॉलेट के साथ कनेक्शन की पुष्टि करें|\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"लेजर(Ledger)वॉलेट कनेक्ट करें|\",\n\t\tmakeSureYourLedger: \"सुनिश्चित करें कि आपका लेजर सुरक्षित रूप से जुड़ा हुआ है और NEAR ऐप आपके डिवाइस (Device)पर पहले से ही खुला है|\",\n\t\t\"continue\": \"जारी रखे|\",\n\t\tspecifyHDPath: \"हार्ड डिस्क(Hard Disk)पथ(Path)निर्धारित करे|\",\n\t\tenterYourPreferredHDPath: \"अपना एचडी पथ दर्ज करें, फिर सक्रिय खातों के लिए स्कैन करें|\",\n\t\tscan: \"स्कैन करे|\",\n\t\tretry: \"दोबारा प्रयास करे|\",\n\t\tledgerIsNotAvailable: \"लेजर उपलब्ध नहीं है|\",\n\t\taccessDeniedToUseLedgerDevice: \"लेजर डिवाइस का उपयोग करने के लिए प्रवेश निषेध|\",\n\t\tnoAccountsFound: \"खाता नहीं मिला|\",\n\t\tselectYourAccounts: \"अपने खाते चुनें|\",\n\t\tconnecting1Account: \"एक खाता कनेक्ट हो रहा है|\",\n\t\tcantFindAnyAccount: \"इस लेजर से जुड़ा कोई खाता नहीं मिला। कृपया एक नया NEAR खाता बनाएँ|\",\n\t\torConnectAnAnotherLedger: \"अथवा दूसरे लेजर वॉलेट से कनेक्ट करें।\",\n\t\tconnecting: \"जुड़ रहा हे|\",\n\t\tofAccounts: \"खाता अब जुड़ा नहीं हे|\",\n\t\tfailedToAutomatically: \"खाता आईडी स्वचालित रूप से खोजने में असमर्थ। मैन्युअल (Manuall) रूप से कोशिश करें|\",\n\t\toverviewTheListOfAuthorized: \"अवलोकन अधिकृत की सूची, नीचे दिए गए बटन पर क्लिक करके लॉगिन पूरा करें।\",\n\t\tfinish: \"समाप्त|\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"आपको इंस्टॉल करना होगा|\",\n\t\ttoContinueAfterInstalling: \"इंस्टॉल करने के बाद जारी रखे|\",\n\t\trefreshThePage: \"पुन: लोड करें।\",\n\t\topen: \"खोले|\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"क्लिपबोर्ड(Clipboard)पर कॉपी किया गया|\",\n\t\tfailedToCopy: \"क्लिपबोर्ड पर कॉपी करना विफल रहा|\",\n\t\tscanWithYourMobile: \"अपने फोन (Mobile)से स्कैन करें|\",\n\t\tcopyToClipboard: \" क्लिपबोर्ड पर कॉपी करें|\",\n\t\tpreferTheOfficial: \"आधिकारिक संवाद को प्राथमिकता दें|\",\n\t\topen: \"खोले|\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Hardware Wallet\",\n\t\tbrowser: \"Browser Wallet\",\n\t\tinjected: \"Wallet Extension\",\n\t\tbridge: \"Bridge Wallet\",\n\t\tmobile: \"Mobile Wallet\",\n\t\t\"instant-link\": \"Instant Wallet\"\n\t}\n};\nvar hi = {\n\tmodal: modal$5\n};\n\nvar modal$4 = {\n\twallet: {\n\t\tconnectYourWallet: \"صل محفظتك\",\n\t\twhatIsAWallet: \"ما هي المحفظة؟\",\n\t\tsecureAndManage: \"تأمين وإدارة الممتلكات الرقمية الخاصة بك\",\n\t\tsafelyStore: \"قم بتخزين و ارسال عملاتك و أصولك الرقمية بأمان\",\n\t\tlogInToAny: \"سجل الدخول إلى أي تطبيق يستخدم نير\",\n\t\tnoNeedToCreate: \".لا داعي لإنشاء حساب جديد. فقط قم بتوصيل محفظتك وانطلق\",\n\t\tgetAWallet: \"احصل على محفظة\",\n\t\tuseAWallet: \"استخدم محفظة لتأمين وإدارة أصول نير الخاصة بك، وادخل لأي تطبيق يستخدم نير دون الحاجة إلى اسم المستخدم وكلمةالمرور\",\n\t\tconnectionFailed: \"اتصال فاشل\",\n\t\tconnectionSuccessful: \"اتصال ناجح\",\n\t\tconnected: \"متصل\",\n\t\tconnectingTo: \"جاري الاتصال ب\",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"وافق على الاتصال في نافذة الإضافة\",\n\t\t\tbrowser: \"وافق على الاتصال في المحفظة بعد إعادة توجيه\",\n\t\t\thardware: \"وافق على الاتصال في جهاز ليدجر\",\n\t\t\tbridge: \"وافق على الاتصال في المحفظة\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"اتصل مع ليدجر\",\n\t\tmakeSureYourLedger: \"تأكد أن ليدجر متصل بأمان, و أن تطبيق نير مفتوح في جهازك\",\n\t\t\"continue\": \"تابع\",\n\t\tspecifyHDPath: \"حدد مسار الحساب\",\n\t\tenterYourPreferredHDPath: \"أدخل مسار الحساب المفضل، ثم ابحث عن كل الحسابات النشطة\",\n\t\tscan: \"مسح\",\n\t\tretry: \"أعد المحاولة\",\n\t\tledgerIsNotAvailable: \"ليدجر غير متوفر\",\n\t\taccessDeniedToUseLedgerDevice: \"تم رفض الاتصال بليدجر\",\n\t\tnoAccountsFound: \"لم يتم العثور على أي حسابات\",\n\t\tselectYourAccounts: \"حدد حساباتك\",\n\t\tconnecting1Account: \"جاري الاتصال بحساب واحد\",\n\t\tcantFindAnyAccount: \"لا يمكن العثور على أي حساب مرتبط بهذا ليدجر الرجاء إنشاء حساب نير جديد على\",\n\t\torConnectAnAnotherLedger: \"او اربط جهاز ليدجر آخر\",\n\t\tconnecting: \"جاري الاتصال\",\n\t\tofAccounts: \"من الحسابات\",\n\t\tfailedToAutomatically: \"فشل في الاتصال بالحساب تلقائيا. يرجى الاتصال بالحساب يدويا\",\n\t\toverviewTheListOfAuthorized: \"لائحة الحسابات المصرح بها, أكمل تسجيل الدخول بالنقر على الزر أدناه\",\n\t\tfinish: \"إنهاء\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"ستحتاج لتثبيت\",\n\t\ttoContinueAfterInstalling: \"للاستكمال. بعد التثبيت\",\n\t\trefreshThePage: \"قم بتحديث الصفحة\",\n\t\topen: \"افتح\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"تم النسخ\",\n\t\tfailedToCopy: \"فشل النسخ\",\n\t\tscanWithYourMobile: \"امسح بجهازك المحمول\",\n\t\tcopyToClipboard: \"نسخ\",\n\t\tpreferTheOfficial: \"تفضل الحوار الرسمي ل\",\n\t\topen: \"فتح\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Hardware Wallet\",\n\t\tbrowser: \"Browser Wallet\",\n\t\tinjected: \"Wallet Extension\",\n\t\tbridge: \"Bridge Wallet\",\n\t\tmobile: \"Mobile Wallet\",\n\t\t\"instant-link\": \"Instant Wallet\"\n\t}\n};\nvar ar = {\n\tmodal: modal$4\n};\n\nvar modal$3 = {\n\twallet: {\n\t\tconnectYourWallet: \"Spojite crypto novčanik!\",\n\t\twhatIsAWallet: \"Što je to crypto novčanik?\",\n\t\tsecureAndManage: \"Osigurajte i upravljajte svojom digitalnom imovinom.\",\n\t\tsafelyStore: \"Sigurno pohranite i prebacite svoj crypto i NFT-eve.\",\n\t\tlogInToAny: \" Prijavite se u bilo koju NEAR aplikaciju\",\n\t\tnoNeedToCreate: \"Nema potrebe za stvaranjem novih naloga ili korisničkih podataka. Spojite svoj crypto novčanik i spremni ste!\",\n\t\tgetAWallet: \"Otvorite crypto novčanik\",\n\t\tuseAWallet: \"Koristite crypto novčanik da biste osigurali i upravljali svojom NEAR imovinom, te se prijavite u bilo koju NEAR aplikaciju bez korisničkog imena i lozinke.\",\n\t\tconnectionFailed: \"Neuspješno povezivanje.\",\n\t\tconnectionSuccessful: \"Uspješno povezivanje.\",\n\t\tconnected: \"Povezano.\",\n\t\tconnectingTo: \"Povezivanje u tijeku\",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"Potvrdite vezu u eksternom prozoru\",\n\t\t\tbrowser: \"Nakon redirekcije, potvrdite vezu u novčaniku\",\n\t\t\thardware: \"Potvrdite vezu sa novčanikom\",\n\t\t\tbridge: \"Potvrdite vezu u novčaniku\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"Povežite se hardverskim novčanikom\",\n\t\tmakeSureYourLedger: \"Osigurajte sigurnu vezu s hardverskim novčanikom, te da je NEAR aplikacija otvorena na vašem uređaju\",\n\t\t\"continue\": \"Nastavite\",\n\t\tspecifyHDPath: \"Specificirajte HD putanju\",\n\t\tenterYourPreferredHDPath: \"Upišite preferiranu HD putanju, zatim skenirajte aktivne naloge\",\n\t\tscan: \"Skenirajte\",\n\t\tretry: \"Pokušajte ponovno\",\n\t\tledgerIsNotAvailable: \"Hardverski novčanik nije dostupan.\",\n\t\taccessDeniedToUseLedgerDevice: \"Odbijen pristup za korištenjem hardverskog novčanika\",\n\t\tnoAccountsFound: \"Nalozi nisu pronađeni\",\n\t\tselectYourAccounts: \"Odaberite svoje naloge\",\n\t\tconnecting1Account: \"Povezivanje 1 naloga\",\n\t\tcantFindAnyAccount: \"Nije moguće pronaći niti jedan nalog povezan s ovim hardverskim novčanikom. Molimo vas, kreirajte novi NEAR nalog\",\n\t\torConnectAnAnotherLedger: \"Ili povežite drugi hardverski novčanik.\",\n\t\tconnecting: \"Povezivanje\",\n\t\tofAccounts: \"naloga\",\n\t\tfailedToAutomatically: \"Neuspješno automatsko pronalaženje ID naloga. Unesite ručno:\",\n\t\toverviewTheListOfAuthorized: \"Pregledajte popis odobrenih naloga, završite prijavu pritiskom na niže prikazani gumb.\",\n\t\tfinish: \"Završite\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \" Potrebno je instalirati modal\",\n\t\ttoContinueAfterInstalling: \"za nastavak. Nakon instalacije\",\n\t\trefreshThePage: \"osvježite stranicu.\",\n\t\topen: \"Otvorite QR modal\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"Kopirano u međuspremnik\",\n\t\tfailedToCopy: \"Neupsješno kopiranje u međuspremnik\",\n\t\tscanWithYourMobile: \"Skenirajte svojim mobilnim uređajem\",\n\t\tcopyToClipboard: \" Kopirajte u međuspremnik\",\n\t\tpreferTheOfficial: \"Odaberite službeni dijalog\",\n\t\topen: \"Otvorite\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Hardware Wallet\",\n\t\tbrowser: \"Browser Wallet\",\n\t\tinjected: \"Wallet Extension\",\n\t\tbridge: \"Bridge Wallet\",\n\t\tmobile: \"Mobile Wallet\",\n\t\t\"instant-link\": \"Instant Wallet\"\n\t},\n\texportAccounts: {\n\t\tchooseAWallet: \"Odaberi Wallet\",\n\t\ttransferYourAccounts: \"Prenesi svoje naloge\",\n\t\tselectAWallet: \"Odaberite wallet koji odgovara vašim potrebama i podržava vaše povezane naloge.\",\n\t\tselectYourAccounts: \"Odaberi svoje naloge\",\n\t\tafterDecide: \"Nakon što odlučite koji wallet koristite, možete odabrati koje račune želite prebaciti.\",\n\t\tdisclaimer: \"Nećete moći prebaciti naloge koji nisu nikada bili korišteni na NEAR-u.\",\n\t\twarning: \"ne podržava izvoz naloga u ovom trenutku. Molimo odaberite drugi wallet.\",\n\t\twalletTypes: {\n\t\t\thardware: \"Hardware Wallet\",\n\t\t\tbrowser: \"Browser Wallet\",\n\t\t\tinjected: \"Wallet Extension\",\n\t\t\tbridge: \"Bridge Wallet\",\n\t\t\tmobile: \"Mobile Wallet\"\n\t\t},\n\t\tselectAccounts: {\n\t\t\ttitle: \"Odaberi naloge za prijenos\",\n\t\t\tbutton: \"Generiraj lozinku\",\n\t\t\tdeselectAll: \"Makni odabir sa svih\",\n\t\t\tselectAll: \"Odaberi sve\",\n\t\t\tunavailable: \"Prijenos nije dostupan\",\n\t\t\terror: \"Nalog ne postoji\",\n\t\t\twarningLedger: \"Potrebna ledger podrška\",\n\t\t\tnoBalance: \"Nalog nema sredstava\"\n\t\t},\n\t\tgetPassphrase: {\n\t\t\ttitle: \"Kopiraj privremenu lozinku\",\n\t\t\tdesc: \"Bit će potrebno unijeti ovu lozinku na početku izvoza naloga na drugi wallet.\",\n\t\t\tbutton: \"Nastavi\",\n\t\t\tlabel: \"Klikni za kopiju\",\n\t\t\tcheckLabel: \"Kopirao sam ili zapisao lozinku\"\n\t\t},\n\t\tcomplete: {\n\t\t\ttitle: \"Završi prijenos\",\n\t\t\tdescOne: \"You will now be redirected to the wallet you selected to complete the transfer.\",\n\t\t\tdescTwo: \"Kada je unos s odabranog walleta završen, pritisnite gumb da biste završili prijenos.\",\n\t\t\tbutton: \"Završi\"\n\t\t}\n\t}\n};\nvar hr = {\n\tmodal: modal$3\n};\n\nvar modal$2 = {\n\twallet: {\n\t\tconnectYourWallet: \"Поврзете го вашиот новчаник!\",\n\t\twhatIsAWallet: \"Што е новчаник?\",\n\t\tsecureAndManage: \"Заштитете ги и управувајте со вашите дигитални средства.\",\n\t\tsafelyStore: \"Безбедно складирајте и извршувајте трансакции со вашите крипто и NFT.\",\n\t\tlogInToAny: \"Најавете се на која било NEAR апликација\",\n\t\tnoNeedToCreate: \"Нема потреба да креирате нови сметки или ингеренции. Поврзете го вашиот паричник и сте подготвени!\",\n\t\tgetAWallet: \"Направете новчаник\",\n\t\tuseAWallet: \"Користете паричник за да ги заштитите и управувате вашите NEAR средства и да се најавите на која било NEAR апликација без потреба од кориснички имиња и лозинки.\",\n\t\tconnectionFailed: \"Поврзувањето не беше успешно.\",\n\t\tconnectionSuccessful: \"Успешно поврзување.\",\n\t\tconnected: \"Поврзано.\",\n\t\tconnectingTo: \"Поврзување со\",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"Потврдете го поврзувањето во екстерниот прозорец\",\n\t\t\tbrowser: \"По преусмерувањето, потврдете го поврзувањето од новчаниокт\",\n\t\t\thardware: \"Потврдете го поврзувањето со ладен новчаник\",\n\t\t\tbridge: \"Потврдете ја врската во новчаникот\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"Поврзете се со Леџер\",\n\t\tmakeSureYourLedger: \"Осигурајте се дека вашиот Леџер е поврзан безбедно, и дека NEAR апликацијата е отворена на вашиот уред\",\n\t\t\"continue\": \"Продолжете\",\n\t\tspecifyHDPath: \"Наведете ХД локација\",\n\t\tenterYourPreferredHDPath: \"Внесете ја вашата преферирана ХД локација, а потоа скенирајте да ги најдете активните сметки.\",\n\t\tscan: \"Скенирајте\",\n\t\tretry: \"Обидете се повторно\",\n\t\tledgerIsNotAvailable: \"Леџерот не е достапен.\",\n\t\taccessDeniedToUseLedgerDevice: \"Пристапот за користење на Леџер уред е одбиен\",\n\t\tnoAccountsFound: \"Нема најдени сметки\",\n\t\tselectYourAccounts: \"Изберете ги вашите сметки\",\n\t\tconnecting1Account: \"Поврзување на една сметка\",\n\t\tcantFindAnyAccount: \"Не се најдени сметки поврзани со овој Леџер. Ве молиме креирајте нова NEAR сметка \",\n\t\torConnectAnAnotherLedger: \"или поврзете друг Леџер.\",\n\t\tconnecting: \"Поврзување\",\n\t\tofAccounts: \"на сметки\",\n\t\tfailedToAutomatically: \"Неуспешно автоматско барање на ИД на сметката. Внесете го рачно:\",\n\t\toverviewTheListOfAuthorized: \"Преглед на листата на овластени сметки, завршете се најавата со кликнување на копчето подолу.\",\n\t\tfinish: \"Завршете\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"Треба да инсталирате\",\n\t\ttoContinueAfterInstalling: \"за да продолжите. По инсталирањето\",\n\t\trefreshThePage: \"Освежете ја страната.\",\n\t\topen: \"Отворете\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"Копирано на клипбордот\",\n\t\tfailedToCopy: \"Неуспешно копирање на клипборд\",\n\t\tscanWithYourMobile: \"Скенирајте со вашиот телефонски уред\",\n\t\tcopyToClipboard: \"Копирајте на клипборд\",\n\t\tpreferTheOfficial: \"Преферирајте официјален диалог на\",\n\t\topen: \"Отворете\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Хардверски новчаник\",\n\t\tbrowser: \"Новчаник на интернет прелистувач\",\n\t\tinjected: \"Екстензија за новчаник\",\n\t\tbridge: \"Bridge новчаник\",\n\t\tmobile: \"Мобилен новчаник\",\n\t\t\"instant-link\": \"Инстант паричник\"\n\t},\n\texportAccounts: {\n\t\tchooseAWallet: \"Одберете паричник\",\n\t\ttransferYourAccounts: \"Префрлете ги вашите кориснички сметки\",\n\t\tselectAWallet: \"Изберетен новчаник кој ги задоволува вашите баранња и ги поддржува вашите поврзани кориснички сметки.\",\n\t\tselectYourAccounts: \"Изберете ги вашите кориснички сметки\",\n\t\tafterDecide: \"Одкако ќе изберете новчаник, можете да изберете кои кориснички сметки сакате да ги префрлите.\",\n\t\tdisclaimer: \"Не можете да прфрлате кориснички сметки кои никогаш не биле надополнати или користени на NEAR.\",\n\t\twarning: \"не поддржува извезување на кориснички сметки во овој момент. Ве молиме изберете друг новчаник.\",\n\t\twalletTypes: {\n\t\t\thardware: \"Хардверски новчаник\",\n\t\t\tbrowser: \"Новчаник на интернет прелистувач\",\n\t\t\tinjected: \"Екстензија за новчаник\",\n\t\t\tbridge: \"Bridge новчаник\",\n\t\t\tmobile: \"Мобилен новчаник\"\n\t\t},\n\t\tselectAccounts: {\n\t\t\ttitle: \"Изберете ги корисничките сметки за да ги префрлите.\",\n\t\t\tbutton: \"Добијте лозинка\",\n\t\t\tdeselectAll: \"Отселектирајте се\",\n\t\t\tselectAll: \"Изберете се\",\n\t\t\tunavailable: \"Трансферот е недостапен\",\n\t\t\terror: \"Корисничката сметка не постои\",\n\t\t\twarningLedger: \"Потребна е поддршка од Леџер\",\n\t\t\tnoBalance: \"Сметката не е финансирана\"\n\t\t},\n\t\tgetPassphrase: {\n\t\t\ttitle: \"Копирајте ја привремената лозинка\",\n\t\t\tdesc: \"Ќе треба да ја внесете оваа лозинка кога ќе започнете да ги извезувате вашите сметки на друг новчаник.\",\n\t\t\tbutton: \"Продолжете\",\n\t\t\tlabel: \"Кликнете за да копирате\",\n\t\t\tcheckLabel: \"Ја копирав или запишав лозинката\"\n\t\t},\n\t\tcomplete: {\n\t\t\ttitle: \"Завршете го преносот\",\n\t\t\tdescOne: \"Сега ќе бидете пренасочени на избраниот новчаник за завршување на преносот.\",\n\t\t\tdescTwo: \"Откако ќе заврши увозот од избраниот новчаник, притиснете го копчето за да го завршите преносот.\",\n\t\t\tbutton: \"Завршете\"\n\t\t}\n\t}\n};\nvar mk = {\n\tmodal: modal$2\n};\n\nvar modal$1 = {\n\twallet: {\n\t\tconnectYourWallet: \"Povežite svojo denarnico!\",\n\t\twhatIsAWallet: \"Kaj je denarnica?\",\n\t\tsecureAndManage: \"Zavarujte in upravljajte svoja digitalna sredstva.\",\n\t\tsafelyStore: \"Varno shranjujte in prenašajte svoje kriptovalute in NFTje.\",\n\t\tlogInToAny: \"Prijavite se v katero koli aplikacijo na NEAR\",\n\t\tnoNeedToCreate: \"Ni vam treba ustvarjati novih računov. Povežite svojo denarnico in začnite!\",\n\t\tgetAWallet: \"Ustvarite denarnico\",\n\t\tuseAWallet: \"Uporabite denarnico, da bi zavarovali in upravljali s svoja NEAR digitalna sredstva, in se prijavite v katero koli aplikacijo ekosistema NEAR\",\n\t\tconnectionFailed: \"Povezava ni bila uspešna.\",\n\t\tconnectionSuccessful: \"Povezava je bila uspešna.\",\n\t\tconnected: \"Vaša denarnica je povezana.\",\n\t\tconnectingTo: \"Povezovanje z\",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"Potrdite povezavo v oknu razširitve\",\n\t\t\tbrowser: \"Po preusmeritvi potrdite povezavo v denarnici\",\n\t\t\thardware: \"Potrdite povezavo s hladno denarnico\",\n\t\t\tbridge: \"Potrdite povezavo v denarnici\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"Povežite se z Ledger\",\n\t\tmakeSureYourLedger: \"Prepričajte se, da je vaš Ledger varno povezan in da je aplikacija NEAR odprta v vaši napravi\",\n\t\t\"continue\": \"Nadaljuj\",\n\t\tspecifyHDPath: \"Določite HD pot\",\n\t\tenterYourPreferredHDPath: \"Vnesite želeno HD pot, nato poiščite vse aktivne račune.\",\n\t\tscan: \"Skenirajte\",\n\t\tretry: \"Poskusite znova\",\n\t\tledgerIsNotAvailable: \"Ledger ni na voljo\",\n\t\taccessDeniedToUseLedgerDevice: \"Dostop za uporabo naprave Ledger zavrnjen\",\n\t\tnoAccountsFound: \"Ni najdenih računov\",\n\t\tselectYourAccounts: \"Izberite Vaši računi\",\n\t\tconnecting1Account: \"Povezovanje enega računa\",\n\t\tcantFindAnyAccount: \"Ni mogoče najti nobenega računa, povezanega s tem Ledgerjem. Ustvarite nov NEAR račun \",\n\t\torConnectAnAnotherLedger: \"ali povežite drug Ledger..\",\n\t\tconnecting: \"Povezovanje\",\n\t\tofAccounts: \"računov\",\n\t\tfailedToAutomatically: \"ID-ja računa ni bilo mogoče samodejno najti. Zagotovite ga ročno:\",\n\t\toverviewTheListOfAuthorized: \"Oglejte si seznam pooblaščenih računov, dokončajte prijavo s klikom na spodnji gumb.\",\n\t\tfinish: \"Končajte\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"Morali ga boste namestiti\",\n\t\ttoContinueAfterInstalling: \"nadaljevati. Po namestitvi\",\n\t\trefreshThePage: \"Osvežite stran.\",\n\t\topen: \"Odprite\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"Kopirano v podložni mapi\",\n\t\tfailedToCopy: \"Kopiranje v podložni mapi ni uspelo\",\n\t\tscanWithYourMobile: \"Skenirajte s svojo mobilno napravo\",\n\t\tcopyToClipboard: \" Kopirajte v podložni mapi\",\n\t\tpreferTheOfficial: \"Preferirajte uradno pogovorno okno\",\n\t\topen: \"Odprite\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Hladna denarnica\",\n\t\tbrowser: \"Denarnica brskalnika\",\n\t\tinjected: \"Razširitev za denarnico\",\n\t\tbridge: \"Bridge denarnica\",\n\t\tmobile: \"Mobilna denarnica\",\n\t\t\"instant-link\": \"Takojšnja denarnica\"\n\t},\n\texportAccounts: {\n\t\tchooseAWallet: \"Izberite denarnico\",\n\t\ttransferYourAccounts: \"Prenesite svoje račune\",\n\t\tselectAWallet: \"Izberite denarnico, ki ustreza vašim potrebam in podpira vaše povezane račune.\",\n\t\tselectYourAccounts: \"Izberite vaši računi\",\n\t\tafterDecide: \"Ko se odločite za denarnico, lahko izberete, katere račune želite prenesti.\",\n\t\tdisclaimer: \"Ne boste mogli prenesti Računov, ki nikoli niso bili financirani ali uporabljeni na NEAR.\",\n\t\twarning: \"trenutno ne podpira izvoza računa. Izberite drugo denarnico\",\n\t\twalletTypes: {\n\t\t\thardware: \"Hladna denarnica\",\n\t\t\tbrowser: \"Denarnica brskalnika\",\n\t\t\tinjected: \"Razširitev za denarnico\",\n\t\t\tbridge: \"Bridge denarnica\",\n\t\t\tmobile: \"Mobilna denarnica\"\n\t\t},\n\t\tselectAccounts: {\n\t\t\ttitle: \"Izberite računi za prenos.\",\n\t\t\tbutton: \"Pridobite geslo\",\n\t\t\tdeselectAll: \"Prekliči izbiro vseh\",\n\t\t\tselectAll: \"Izberi vse\",\n\t\t\tunavailable: \"Prenos ni na voljo\",\n\t\t\terror: \"Račun ne obstaja\",\n\t\t\twarningLedger: \"Potrebna je podpora za Ledger\",\n\t\t\tnoBalance: \"Račun ni financiran\"\n\t\t},\n\t\tgetPassphrase: {\n\t\t\ttitle: \"Kopiraj začasno geslo\",\n\t\t\tdesc: \"To geslo boste morali vnesti, ko boste začeli izvažati svoje račune v drugo denarnico.\",\n\t\t\tbutton: \"Nadaljujte\",\n\t\t\tlabel: \"Kliknite za kopiranje\",\n\t\t\tcheckLabel: \"Geslo sem kopiral ali zapisal\"\n\t\t},\n\t\tcomplete: {\n\t\t\ttitle: \"Dokončajte prenos\",\n\t\t\tdescOne: \"Zdaj boste preusmerjeni v denarnico, ki ste jo izbrali za dokončanje prenosa.\",\n\t\t\tdescTwo: \"Ko je uvozni del postopka končan iz izbrane denarnice, pritisnite gumb za dokončanje postopka prenosa.\",\n\t\t\tbutton: \"Končajte\"\n\t\t}\n\t}\n};\nvar sl = {\n\tmodal: modal$1\n};\n\nvar modal = {\n\twallet: {\n\t\tconnectYourWallet: \"Повежите свој новчаник!\",\n\t\twhatIsAWallet: \"Шта је новчаник?\",\n\t\tsecureAndManage: \"Обезбедите и управљајте својом дигиталном имовином.\",\n\t\tsafelyStore: \"Безбедно чувајте и преносите своје криптовалуте и NFT.\",\n\t\tlogInToAny: \"Пријавите се на било коју апликацију NEAR\",\n\t\tnoNeedToCreate: \"Нема потребе да креирате нове налоге или акредитиве. Повежите новчаник и спремни стe!\",\n\t\tgetAWallet: \"Набавите новчаник\",\n\t\tuseAWallet: \"Користите новчаник да обезбедите и управљате својим NEAR средствима и да се пријавите у било коју апликацију NEAR без потребе за корисничким именима и лозинкама.\",\n\t\tconnectionFailed: \"Веза није успостављена.\",\n\t\tconnectionSuccessful: \"Веза је успела.\",\n\t\tconnected: \"Повезан.\",\n\t\tconnectingTo: \"Повезивање на\",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"Потврдите везу у спољном прозору\",\n\t\t\tbrowser: \"Након преусмеравања, потврдите везу у новчанику\",\n\t\t\thardware: \"Потврдите везу са хладним новчаником\",\n\t\t\tbridge: \"Потврдите везу са новчаником\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"Повежите се са Ledger\",\n\t\tmakeSureYourLedger: \"Уверите се да је ваш Ledger безбедно повезан и да је апликација NEAR отворена на вашем уређају\",\n\t\t\"continue\": \"Настави\",\n\t\tspecifyHDPath: \"Наведите ХД путању\",\n\t\tenterYourPreferredHDPath: \"Унесите жељену жељену ХД путању, а затим скенирајте све активне налоге.\",\n\t\tscan: \"Скенирајте\",\n\t\tretry: \"Покушај поново\",\n\t\tledgerIsNotAvailable: \"Ledger није доступан.\",\n\t\taccessDeniedToUseLedgerDevice: \"Приступ је одбијен за коришћење Ledger уређаја\",\n\t\tnoAccountsFound: \"Наlози нису пронађени\",\n\t\tselectYourAccounts: \"Изаберите Ваш наlог\",\n\t\tconnecting1Account: \"Повезати 1 наlог\",\n\t\tcantFindAnyAccount: \"Није могуће пронаћи ниједан наlог повезан са овим Ledger-ом. Направите нови NEAR наlог\",\n\t\torConnectAnAnotherLedger: \"или повежите други Ledger.\",\n\t\tconnecting: \"Повезивање\",\n\t\tofAccounts: \"наlога\",\n\t\tfailedToAutomatically: \"Аутоматско проналажење ID-a наlога није успело. Наведите га ручно:\",\n\t\toverviewTheListOfAuthorized: \"Прегледајте листу овлашћених рачуна, завршите пријаву кликом на дугме испод.\",\n\t\tfinish: \"Заврши\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"Мораћете да инсталирате\",\n\t\ttoContinueAfterInstalling: \"за наставак. Након инсталирања\",\n\t\trefreshThePage: \"поново учитати страницу.\",\n\t\topen: \"Отвори\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"Копирано у међуспремник\",\n\t\tfailedToCopy: \"Копирање у међуспремник није успело\",\n\t\tscanWithYourMobile: \"Скенирајте помоћу мобилног уређаја\",\n\t\tcopyToClipboard: \" Копирај у међуспремник\",\n\t\tpreferTheOfficial: \"Преферирате званични дијалог од\",\n\t\topen: \"Отвори\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Хардверски новчаник\",\n\t\tbrowser: \"Новчаник претраживача,\",\n\t\tinjected: \"Додатак за новчаник,\",\n\t\tbridge: \"Bridge новчаник\",\n\t\tmobile: \"Мобилни новчаник\",\n\t\t\"instant-link\": \"Инстант новчаник\"\n\t},\n\texportAccounts: {\n\t\tchooseAWallet: \"Изаберите новчаник\",\n\t\ttransferYourAccounts: \"Пренесите своје налоге\",\n\t\tselectAWallet: \"Изаберите новчаник који одговара вашим потребама и који подржава ваше повезане налоге.\",\n\t\tselectYourAccounts: \"Изаберите ваше налоге\",\n\t\tafterDecide: \"Након што се одлучите за новчаник, можете изабрати које налоге желите да пренесете.\",\n\t\tdisclaimer: \"Нећете моћи да пренесете налоге који никада нису били финансирани или коришћени на  NEAR.\",\n\t\twarning: \"тренутно не подржава извоз налога. Изаберите други новчаник.\",\n\t\twalletTypes: {\n\t\t\thardware: \"Хардверски новчаник\",\n\t\t\tbrowser: \"Новчаник претраживача,\",\n\t\t\tinjected: \"Додатак за новчаник,\",\n\t\t\tbridge: \"Bridge новчаник\",\n\t\t\tmobile: \"Мобилни новчаник\"\n\t\t},\n\t\tselectAccounts: {\n\t\t\ttitle: \"Изаберите налоге за пренос.\",\n\t\t\tbutton: \"Добијте приступну фразу\",\n\t\t\tdeselectAll: \"Поништите избор\",\n\t\t\tselectAll: \"Изаберите све\",\n\t\t\tunavailable: \"Трансфер није доступан\",\n\t\t\terror: \"Налог не постоји\",\n\t\t\twarningLedger: \"Потребна подршка за Ledger\",\n\t\t\tnoBalance: \"Налог није финансиран\"\n\t\t},\n\t\tgetPassphrase: {\n\t\t\ttitle: \"Копирај привремену лозинку\",\n\t\t\tdesc: \"Мораћете да унесете ову лозинку када почнете да извозите своје налоге у други новчаник.\",\n\t\t\tbutton: \"Наставите\",\n\t\t\tlabel: \"Кликните да бисте копирали\",\n\t\t\tcheckLabel: \"Копирао сам или записао лозинку\"\n\t\t},\n\t\tcomplete: {\n\t\t\ttitle: \"Довршите трансфер\",\n\t\t\tdescOne: \"Сада ћете бити преусмерени на новчаник који сте изабрали да завршите трансфер.\",\n\t\t\tdescTwo: \"Када се део процеса увоза заврши из изабраног новчаника, притисните дугме да завршите процес преноса.\",\n\t\t\tbutton: \"Завршите\"\n\t\t}\n\t}\n};\nvar sr = {\n\tmodal: modal\n};\n\nconst getLanguage = languageCode => {\n  switch (languageCode) {\n    case \"en\":\n      return en;\n    case \"es\":\n      return es;\n    case \"zh\":\n      return zh;\n    case \"bg\":\n      return bg;\n    case \"ko\":\n      return ko;\n    case \"vi\":\n      return vi;\n    case \"hi\":\n      return hi;\n    case \"ar\":\n      return ar;\n    case \"hr\":\n      return hr;\n    case \"mk\":\n      return mk;\n    case \"sl\":\n      return sl;\n    case \"sr\":\n      return sr;\n    default:\n      return en;\n  }\n};\nlet chosenLang;\nconst allowOnlyLanguage = langCode => {\n  chosenLang = langCode;\n};\n// (i.e en-CA returns just en)\nconst shortenLanguageCode = lang => {\n  return lang.indexOf(\"-\") !== -1 ? lang.split(\"-\")[0] : lang.split(\"_\")[0];\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst findObjectPropByStringPath = (obj, prop) => {\n  if (!obj) {\n    return \"\";\n  }\n  const _index = prop.indexOf(\".\");\n  if (_index > -1) {\n    const currentProp = prop.substring(0, _index);\n    const nextProp = prop.substring(_index + 1);\n    return findObjectPropByStringPath(obj[currentProp], nextProp);\n  }\n  return obj[prop];\n};\nconst translate = path => {\n  let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n  browserLang = browserLang || window.navigator.language;\n  const languageCode = shortenLanguageCode(chosenLang || browserLang);\n  const selectedLanguage = getLanguage(languageCode);\n  const text = findObjectPropByStringPath(selectedLanguage, path);\n  return text && typeof text === \"string\" ? text : path;\n};\n\nexports.EventEmitter = EventEmitter;\nexports.allowOnlyLanguage = allowOnlyLanguage;\nexports.getActiveAccount = getActiveAccount;\nexports.isCurrentBrowserSupported = isCurrentBrowserSupported;\nexports.serializeNep413 = serializeNep413;\nexports.setupWalletSelector = setupWalletSelector;\nexports.translate = translate;\nexports.verifyFullKeyBelongsToUser = verifyFullKeyBelongsToUser;\nexports.verifySignature = verifySignature;\nexports.waitFor = waitFor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-wallet-selector+core@8.7.1_near-api-js@2.1.4/node_modules/@near-wallet-selector/core/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-wallet-selector+core@8.7.1_near-api-js@2.1.4/node_modules/@near-wallet-selector/core/index.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-wallet-selector+core@8.7.1_near-api-js@2.1.4/node_modules/@near-wallet-selector/core/index.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventEmitter: () => (/* binding */ EventEmitter),\n/* harmony export */   allowOnlyLanguage: () => (/* binding */ allowOnlyLanguage),\n/* harmony export */   getActiveAccount: () => (/* binding */ getActiveAccount),\n/* harmony export */   isCurrentBrowserSupported: () => (/* binding */ isCurrentBrowserSupported),\n/* harmony export */   serializeNep413: () => (/* binding */ serializeNep413),\n/* harmony export */   setupWalletSelector: () => (/* binding */ setupWalletSelector),\n/* harmony export */   translate: () => (/* binding */ translate),\n/* harmony export */   verifyFullKeyBelongsToUser: () => (/* binding */ verifyFullKeyBelongsToUser),\n/* harmony export */   verifySignature: () => (/* binding */ verifySignature),\n/* harmony export */   waitFor: () => (/* binding */ waitFor)\n/* harmony export */ });\n/* harmony import */ var near_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! near-api-js */ \"(ssr)/./node_modules/.pnpm/near-api-js@2.1.4/node_modules/near-api-js/lib/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/Subject.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.1/node_modules/rxjs/dist/esm5/internal/operators/scan.js\");\n/* harmony import */ var borsh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! borsh */ \"(ssr)/./node_modules/.pnpm/borsh@0.7.0/node_modules/borsh/lib/index.js\");\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! js-sha256 */ \"(ssr)/./node_modules/.pnpm/js-sha256@0.9.0/node_modules/js-sha256/src/sha256.js\");\n\n\n\n\n\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nclass Provider {\n  constructor(url) {\n    this.provider = new near_api_js__WEBPACK_IMPORTED_MODULE_0__.providers.JsonRpcProvider({\n      url\n    });\n  }\n  query(params) {\n    return this.provider.query(params);\n  }\n  viewAccessKey({\n    accountId,\n    publicKey\n  }) {\n    return this.query({\n      request_type: \"view_access_key\",\n      finality: \"final\",\n      account_id: accountId,\n      public_key: publicKey\n    });\n  }\n  block(reference) {\n    return this.provider.block(reference);\n  }\n  sendTransaction(signedTransaction) {\n    return this.provider.sendTransaction(signedTransaction);\n  }\n}\n\nconst KEY_DELIMITER = \":\";\nclass JsonStorage {\n  constructor(storage, namespace) {\n    this.storage = storage;\n    this.namespace = Array.isArray(namespace) ? namespace.join(KEY_DELIMITER) : namespace;\n  }\n  resolveKey(key) {\n    return [this.namespace, key].join(KEY_DELIMITER);\n  }\n  getItem(key) {\n    return this.storage.getItem(this.resolveKey(key)).then(item => {\n      return typeof item === \"string\" ? JSON.parse(item) : null;\n    });\n  }\n  setItem(key, value) {\n    return this.storage.setItem(this.resolveKey(key), JSON.stringify(value));\n  }\n  removeItem(key) {\n    return this.storage.removeItem(this.resolveKey(key));\n  }\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nvar check = function (it) {\n  return it && it.Math == Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global$t =\n  // eslint-disable-next-line es-x/no-global-this -- safe\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  // eslint-disable-next-line no-restricted-globals -- safe\n  check(typeof self == 'object' && self) ||\n  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||\n  // eslint-disable-next-line no-new-func -- fallback\n  (function () { return this; })() || Function('return this')();\n\nvar objectGetOwnPropertyDescriptor = {};\n\nvar fails$s = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n\nvar fails$r = fails$s;\n\n// Detect IE8's incomplete defineProperty implementation\nvar descriptors = !fails$r(function () {\n  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;\n});\n\nvar fails$q = fails$s;\n\nvar functionBindNative = !fails$q(function () {\n  // eslint-disable-next-line es-x/no-function-prototype-bind -- safe\n  var test = (function () { /* empty */ }).bind();\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return typeof test != 'function' || test.hasOwnProperty('prototype');\n});\n\nvar NATIVE_BIND$3 = functionBindNative;\n\nvar call$l = Function.prototype.call;\n\nvar functionCall = NATIVE_BIND$3 ? call$l.bind(call$l) : function () {\n  return call$l.apply(call$l, arguments);\n};\n\nvar objectPropertyIsEnumerable = {};\n\nvar $propertyIsEnumerable = {}.propertyIsEnumerable;\n// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe\nvar getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor$2 && !$propertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\nobjectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor$2(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : $propertyIsEnumerable;\n\nvar createPropertyDescriptor$5 = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\nvar NATIVE_BIND$2 = functionBindNative;\n\nvar FunctionPrototype$2 = Function.prototype;\nvar bind$7 = FunctionPrototype$2.bind;\nvar call$k = FunctionPrototype$2.call;\nvar uncurryThis$p = NATIVE_BIND$2 && bind$7.bind(call$k, call$k);\n\nvar functionUncurryThis = NATIVE_BIND$2 ? function (fn) {\n  return fn && uncurryThis$p(fn);\n} : function (fn) {\n  return fn && function () {\n    return call$k.apply(fn, arguments);\n  };\n};\n\nvar uncurryThis$o = functionUncurryThis;\n\nvar toString$7 = uncurryThis$o({}.toString);\nvar stringSlice$3 = uncurryThis$o(''.slice);\n\nvar classofRaw$1 = function (it) {\n  return stringSlice$3(toString$7(it), 8, -1);\n};\n\nvar uncurryThis$n = functionUncurryThis;\nvar fails$p = fails$s;\nvar classof$b = classofRaw$1;\n\nvar $Object$4 = Object;\nvar split = uncurryThis$n(''.split);\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar indexedObject = fails$p(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return !$Object$4('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof$b(it) == 'String' ? split(it, '') : $Object$4(it);\n} : $Object$4;\n\nvar $TypeError$f = TypeError;\n\n// `RequireObjectCoercible` abstract operation\n// https://tc39.es/ecma262/#sec-requireobjectcoercible\nvar requireObjectCoercible$6 = function (it) {\n  if (it == undefined) throw $TypeError$f(\"Can't call method on \" + it);\n  return it;\n};\n\n// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject$3 = indexedObject;\nvar requireObjectCoercible$5 = requireObjectCoercible$6;\n\nvar toIndexedObject$6 = function (it) {\n  return IndexedObject$3(requireObjectCoercible$5(it));\n};\n\n// `IsCallable` abstract operation\n// https://tc39.es/ecma262/#sec-iscallable\nvar isCallable$n = function (argument) {\n  return typeof argument == 'function';\n};\n\nvar isCallable$m = isCallable$n;\n\nvar isObject$d = function (it) {\n  return typeof it == 'object' ? it !== null : isCallable$m(it);\n};\n\nvar global$s = global$t;\nvar isCallable$l = isCallable$n;\n\nvar aFunction = function (argument) {\n  return isCallable$l(argument) ? argument : undefined;\n};\n\nvar getBuiltIn$8 = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(global$s[namespace]) : global$s[namespace] && global$s[namespace][method];\n};\n\nvar uncurryThis$m = functionUncurryThis;\n\nvar objectIsPrototypeOf = uncurryThis$m({}.isPrototypeOf);\n\nvar getBuiltIn$7 = getBuiltIn$8;\n\nvar engineUserAgent = getBuiltIn$7('navigator', 'userAgent') || '';\n\nvar global$r = global$t;\nvar userAgent$5 = engineUserAgent;\n\nvar process$3 = global$r.process;\nvar Deno$1 = global$r.Deno;\nvar versions = process$3 && process$3.versions || Deno$1 && Deno$1.version;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  // in old Chrome, versions of V8 isn't V8 = Chrome / 10\n  // but their correct versions are not interesting for us\n  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);\n}\n\n// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`\n// so check `userAgent` even if `.v8` exists, but 0\nif (!version && userAgent$5) {\n  match = userAgent$5.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent$5.match(/Chrome\\/(\\d+)/);\n    if (match) version = +match[1];\n  }\n}\n\nvar engineV8Version = version;\n\n/* eslint-disable es-x/no-symbol -- required for testing */\n\nvar V8_VERSION$1 = engineV8Version;\nvar fails$o = fails$s;\n\n// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- required for testing\nvar nativeSymbol = !!Object.getOwnPropertySymbols && !fails$o(function () {\n  var symbol = Symbol();\n  // Chrome 38 Symbol has incorrect toString conversion\n  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances\n  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||\n    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances\n    !Symbol.sham && V8_VERSION$1 && V8_VERSION$1 < 41;\n});\n\n/* eslint-disable es-x/no-symbol -- required for testing */\n\nvar NATIVE_SYMBOL$1 = nativeSymbol;\n\nvar useSymbolAsUid = NATIVE_SYMBOL$1\n  && !Symbol.sham\n  && typeof Symbol.iterator == 'symbol';\n\nvar getBuiltIn$6 = getBuiltIn$8;\nvar isCallable$k = isCallable$n;\nvar isPrototypeOf$4 = objectIsPrototypeOf;\nvar USE_SYMBOL_AS_UID$1 = useSymbolAsUid;\n\nvar $Object$3 = Object;\n\nvar isSymbol$3 = USE_SYMBOL_AS_UID$1 ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  var $Symbol = getBuiltIn$6('Symbol');\n  return isCallable$k($Symbol) && isPrototypeOf$4($Symbol.prototype, $Object$3(it));\n};\n\nvar $String$3 = String;\n\nvar tryToString$5 = function (argument) {\n  try {\n    return $String$3(argument);\n  } catch (error) {\n    return 'Object';\n  }\n};\n\nvar isCallable$j = isCallable$n;\nvar tryToString$4 = tryToString$5;\n\nvar $TypeError$e = TypeError;\n\n// `Assert: IsCallable(argument) is true`\nvar aCallable$9 = function (argument) {\n  if (isCallable$j(argument)) return argument;\n  throw $TypeError$e(tryToString$4(argument) + ' is not a function');\n};\n\nvar aCallable$8 = aCallable$9;\n\n// `GetMethod` abstract operation\n// https://tc39.es/ecma262/#sec-getmethod\nvar getMethod$4 = function (V, P) {\n  var func = V[P];\n  return func == null ? undefined : aCallable$8(func);\n};\n\nvar call$j = functionCall;\nvar isCallable$i = isCallable$n;\nvar isObject$c = isObject$d;\n\nvar $TypeError$d = TypeError;\n\n// `OrdinaryToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-ordinarytoprimitive\nvar ordinaryToPrimitive$1 = function (input, pref) {\n  var fn, val;\n  if (pref === 'string' && isCallable$i(fn = input.toString) && !isObject$c(val = call$j(fn, input))) return val;\n  if (isCallable$i(fn = input.valueOf) && !isObject$c(val = call$j(fn, input))) return val;\n  if (pref !== 'string' && isCallable$i(fn = input.toString) && !isObject$c(val = call$j(fn, input))) return val;\n  throw $TypeError$d(\"Can't convert object to primitive value\");\n};\n\nvar shared$4 = {exports: {}};\n\nvar global$q = global$t;\n\n// eslint-disable-next-line es-x/no-object-defineproperty -- safe\nvar defineProperty$7 = Object.defineProperty;\n\nvar defineGlobalProperty$3 = function (key, value) {\n  try {\n    defineProperty$7(global$q, key, { value: value, configurable: true, writable: true });\n  } catch (error) {\n    global$q[key] = value;\n  } return value;\n};\n\nvar global$p = global$t;\nvar defineGlobalProperty$2 = defineGlobalProperty$3;\n\nvar SHARED = '__core-js_shared__';\nvar store$3 = global$p[SHARED] || defineGlobalProperty$2(SHARED, {});\n\nvar sharedStore = store$3;\n\nvar store$2 = sharedStore;\n\n(shared$4.exports = function (key, value) {\n  return store$2[key] || (store$2[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.23.3',\n  mode: 'global',\n  copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',\n  license: 'https://github.com/zloirock/core-js/blob/v3.23.3/LICENSE',\n  source: 'https://github.com/zloirock/core-js'\n});\n\nvar requireObjectCoercible$4 = requireObjectCoercible$6;\n\nvar $Object$2 = Object;\n\n// `ToObject` abstract operation\n// https://tc39.es/ecma262/#sec-toobject\nvar toObject$7 = function (argument) {\n  return $Object$2(requireObjectCoercible$4(argument));\n};\n\nvar uncurryThis$l = functionUncurryThis;\nvar toObject$6 = toObject$7;\n\nvar hasOwnProperty = uncurryThis$l({}.hasOwnProperty);\n\n// `HasOwnProperty` abstract operation\n// https://tc39.es/ecma262/#sec-hasownproperty\n// eslint-disable-next-line es-x/no-object-hasown -- safe\nvar hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {\n  return hasOwnProperty(toObject$6(it), key);\n};\n\nvar uncurryThis$k = functionUncurryThis;\n\nvar id = 0;\nvar postfix = Math.random();\nvar toString$6 = uncurryThis$k(1.0.toString);\n\nvar uid$3 = function (key) {\n  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString$6(++id + postfix, 36);\n};\n\nvar global$o = global$t;\nvar shared$3 = shared$4.exports;\nvar hasOwn$b = hasOwnProperty_1;\nvar uid$2 = uid$3;\nvar NATIVE_SYMBOL = nativeSymbol;\nvar USE_SYMBOL_AS_UID = useSymbolAsUid;\n\nvar WellKnownSymbolsStore = shared$3('wks');\nvar Symbol$1 = global$o.Symbol;\nvar symbolFor = Symbol$1 && Symbol$1['for'];\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid$2;\n\nvar wellKnownSymbol$j = function (name) {\n  if (!hasOwn$b(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {\n    var description = 'Symbol.' + name;\n    if (NATIVE_SYMBOL && hasOwn$b(Symbol$1, name)) {\n      WellKnownSymbolsStore[name] = Symbol$1[name];\n    } else if (USE_SYMBOL_AS_UID && symbolFor) {\n      WellKnownSymbolsStore[name] = symbolFor(description);\n    } else {\n      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);\n    }\n  } return WellKnownSymbolsStore[name];\n};\n\nvar call$i = functionCall;\nvar isObject$b = isObject$d;\nvar isSymbol$2 = isSymbol$3;\nvar getMethod$3 = getMethod$4;\nvar ordinaryToPrimitive = ordinaryToPrimitive$1;\nvar wellKnownSymbol$i = wellKnownSymbol$j;\n\nvar $TypeError$c = TypeError;\nvar TO_PRIMITIVE = wellKnownSymbol$i('toPrimitive');\n\n// `ToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-toprimitive\nvar toPrimitive$2 = function (input, pref) {\n  if (!isObject$b(input) || isSymbol$2(input)) return input;\n  var exoticToPrim = getMethod$3(input, TO_PRIMITIVE);\n  var result;\n  if (exoticToPrim) {\n    if (pref === undefined) pref = 'default';\n    result = call$i(exoticToPrim, input, pref);\n    if (!isObject$b(result) || isSymbol$2(result)) return result;\n    throw $TypeError$c(\"Can't convert object to primitive value\");\n  }\n  if (pref === undefined) pref = 'number';\n  return ordinaryToPrimitive(input, pref);\n};\n\nvar toPrimitive$1 = toPrimitive$2;\nvar isSymbol$1 = isSymbol$3;\n\n// `ToPropertyKey` abstract operation\n// https://tc39.es/ecma262/#sec-topropertykey\nvar toPropertyKey$4 = function (argument) {\n  var key = toPrimitive$1(argument, 'string');\n  return isSymbol$1(key) ? key : key + '';\n};\n\nvar global$n = global$t;\nvar isObject$a = isObject$d;\n\nvar document$3 = global$n.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS$1 = isObject$a(document$3) && isObject$a(document$3.createElement);\n\nvar documentCreateElement$2 = function (it) {\n  return EXISTS$1 ? document$3.createElement(it) : {};\n};\n\nvar DESCRIPTORS$d = descriptors;\nvar fails$n = fails$s;\nvar createElement$1 = documentCreateElement$2;\n\n// Thanks to IE8 for its funny defineProperty\nvar ie8DomDefine = !DESCRIPTORS$d && !fails$n(function () {\n  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing\n  return Object.defineProperty(createElement$1('div'), 'a', {\n    get: function () { return 7; }\n  }).a != 7;\n});\n\nvar DESCRIPTORS$c = descriptors;\nvar call$h = functionCall;\nvar propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;\nvar createPropertyDescriptor$4 = createPropertyDescriptor$5;\nvar toIndexedObject$5 = toIndexedObject$6;\nvar toPropertyKey$3 = toPropertyKey$4;\nvar hasOwn$a = hasOwnProperty_1;\nvar IE8_DOM_DEFINE$1 = ie8DomDefine;\n\n// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\nobjectGetOwnPropertyDescriptor.f = DESCRIPTORS$c ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject$5(O);\n  P = toPropertyKey$3(P);\n  if (IE8_DOM_DEFINE$1) try {\n    return $getOwnPropertyDescriptor$1(O, P);\n  } catch (error) { /* empty */ }\n  if (hasOwn$a(O, P)) return createPropertyDescriptor$4(!call$h(propertyIsEnumerableModule$1.f, O, P), O[P]);\n};\n\nvar objectDefineProperty = {};\n\nvar DESCRIPTORS$b = descriptors;\nvar fails$m = fails$s;\n\n// V8 ~ Chrome 36-\n// https://bugs.chromium.org/p/v8/issues/detail?id=3334\nvar v8PrototypeDefineBug = DESCRIPTORS$b && fails$m(function () {\n  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing\n  return Object.defineProperty(function () { /* empty */ }, 'prototype', {\n    value: 42,\n    writable: false\n  }).prototype != 42;\n});\n\nvar isObject$9 = isObject$d;\n\nvar $String$2 = String;\nvar $TypeError$b = TypeError;\n\n// `Assert: Type(argument) is Object`\nvar anObject$e = function (argument) {\n  if (isObject$9(argument)) return argument;\n  throw $TypeError$b($String$2(argument) + ' is not an object');\n};\n\nvar DESCRIPTORS$a = descriptors;\nvar IE8_DOM_DEFINE = ie8DomDefine;\nvar V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;\nvar anObject$d = anObject$e;\nvar toPropertyKey$2 = toPropertyKey$4;\n\nvar $TypeError$a = TypeError;\n// eslint-disable-next-line es-x/no-object-defineproperty -- safe\nvar $defineProperty = Object.defineProperty;\n// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar ENUMERABLE = 'enumerable';\nvar CONFIGURABLE$1 = 'configurable';\nvar WRITABLE = 'writable';\n\n// `Object.defineProperty` method\n// https://tc39.es/ecma262/#sec-object.defineproperty\nobjectDefineProperty.f = DESCRIPTORS$a ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty(O, P, Attributes) {\n  anObject$d(O);\n  P = toPropertyKey$2(P);\n  anObject$d(Attributes);\n  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {\n    var current = $getOwnPropertyDescriptor(O, P);\n    if (current && current[WRITABLE]) {\n      O[P] = Attributes.value;\n      Attributes = {\n        configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],\n        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],\n        writable: false\n      };\n    }\n  } return $defineProperty(O, P, Attributes);\n} : $defineProperty : function defineProperty(O, P, Attributes) {\n  anObject$d(O);\n  P = toPropertyKey$2(P);\n  anObject$d(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return $defineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw $TypeError$a('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\nvar DESCRIPTORS$9 = descriptors;\nvar definePropertyModule$6 = objectDefineProperty;\nvar createPropertyDescriptor$3 = createPropertyDescriptor$5;\n\nvar createNonEnumerableProperty$8 = DESCRIPTORS$9 ? function (object, key, value) {\n  return definePropertyModule$6.f(object, key, createPropertyDescriptor$3(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\nvar makeBuiltIn$2 = {exports: {}};\n\nvar DESCRIPTORS$8 = descriptors;\nvar hasOwn$9 = hasOwnProperty_1;\n\nvar FunctionPrototype$1 = Function.prototype;\n// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe\nvar getDescriptor = DESCRIPTORS$8 && Object.getOwnPropertyDescriptor;\n\nvar EXISTS = hasOwn$9(FunctionPrototype$1, 'name');\n// additional protection from minified / mangled / dropped function names\nvar PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';\nvar CONFIGURABLE = EXISTS && (!DESCRIPTORS$8 || (DESCRIPTORS$8 && getDescriptor(FunctionPrototype$1, 'name').configurable));\n\nvar functionName = {\n  EXISTS: EXISTS,\n  PROPER: PROPER,\n  CONFIGURABLE: CONFIGURABLE\n};\n\nvar uncurryThis$j = functionUncurryThis;\nvar isCallable$h = isCallable$n;\nvar store$1 = sharedStore;\n\nvar functionToString = uncurryThis$j(Function.toString);\n\n// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper\nif (!isCallable$h(store$1.inspectSource)) {\n  store$1.inspectSource = function (it) {\n    return functionToString(it);\n  };\n}\n\nvar inspectSource$4 = store$1.inspectSource;\n\nvar global$m = global$t;\nvar isCallable$g = isCallable$n;\nvar inspectSource$3 = inspectSource$4;\n\nvar WeakMap$1 = global$m.WeakMap;\n\nvar nativeWeakMap = isCallable$g(WeakMap$1) && /native code/.test(inspectSource$3(WeakMap$1));\n\nvar shared$2 = shared$4.exports;\nvar uid$1 = uid$3;\n\nvar keys$1 = shared$2('keys');\n\nvar sharedKey$3 = function (key) {\n  return keys$1[key] || (keys$1[key] = uid$1(key));\n};\n\nvar hiddenKeys$4 = {};\n\nvar NATIVE_WEAK_MAP = nativeWeakMap;\nvar global$l = global$t;\nvar uncurryThis$i = functionUncurryThis;\nvar isObject$8 = isObject$d;\nvar createNonEnumerableProperty$7 = createNonEnumerableProperty$8;\nvar hasOwn$8 = hasOwnProperty_1;\nvar shared$1 = sharedStore;\nvar sharedKey$2 = sharedKey$3;\nvar hiddenKeys$3 = hiddenKeys$4;\n\nvar OBJECT_ALREADY_INITIALIZED = 'Object already initialized';\nvar TypeError$3 = global$l.TypeError;\nvar WeakMap = global$l.WeakMap;\nvar set$2, get$1, has;\n\nvar enforce = function (it) {\n  return has(it) ? get$1(it) : set$2(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject$8(it) || (state = get$1(it)).type !== TYPE) {\n      throw TypeError$3('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP || shared$1.state) {\n  var store = shared$1.state || (shared$1.state = new WeakMap());\n  var wmget = uncurryThis$i(store.get);\n  var wmhas = uncurryThis$i(store.has);\n  var wmset = uncurryThis$i(store.set);\n  set$2 = function (it, metadata) {\n    if (wmhas(store, it)) throw new TypeError$3(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    wmset(store, it, metadata);\n    return metadata;\n  };\n  get$1 = function (it) {\n    return wmget(store, it) || {};\n  };\n  has = function (it) {\n    return wmhas(store, it);\n  };\n} else {\n  var STATE = sharedKey$2('state');\n  hiddenKeys$3[STATE] = true;\n  set$2 = function (it, metadata) {\n    if (hasOwn$8(it, STATE)) throw new TypeError$3(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    createNonEnumerableProperty$7(it, STATE, metadata);\n    return metadata;\n  };\n  get$1 = function (it) {\n    return hasOwn$8(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return hasOwn$8(it, STATE);\n  };\n}\n\nvar internalState = {\n  set: set$2,\n  get: get$1,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n\nvar fails$l = fails$s;\nvar isCallable$f = isCallable$n;\nvar hasOwn$7 = hasOwnProperty_1;\nvar DESCRIPTORS$7 = descriptors;\nvar CONFIGURABLE_FUNCTION_NAME$2 = functionName.CONFIGURABLE;\nvar inspectSource$2 = inspectSource$4;\nvar InternalStateModule$5 = internalState;\n\nvar enforceInternalState$2 = InternalStateModule$5.enforce;\nvar getInternalState$5 = InternalStateModule$5.get;\n// eslint-disable-next-line es-x/no-object-defineproperty -- safe\nvar defineProperty$6 = Object.defineProperty;\n\nvar CONFIGURABLE_LENGTH = DESCRIPTORS$7 && !fails$l(function () {\n  return defineProperty$6(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;\n});\n\nvar TEMPLATE = String(String).split('String');\n\nvar makeBuiltIn$1 = makeBuiltIn$2.exports = function (value, name, options) {\n  if (String(name).slice(0, 7) === 'Symbol(') {\n    name = '[' + String(name).replace(/^Symbol\\(([^)]*)\\)/, '$1') + ']';\n  }\n  if (options && options.getter) name = 'get ' + name;\n  if (options && options.setter) name = 'set ' + name;\n  if (!hasOwn$7(value, 'name') || (CONFIGURABLE_FUNCTION_NAME$2 && value.name !== name)) {\n    if (DESCRIPTORS$7) defineProperty$6(value, 'name', { value: name, configurable: true });\n    else value.name = name;\n  }\n  if (CONFIGURABLE_LENGTH && options && hasOwn$7(options, 'arity') && value.length !== options.arity) {\n    defineProperty$6(value, 'length', { value: options.arity });\n  }\n  try {\n    if (options && hasOwn$7(options, 'constructor') && options.constructor) {\n      if (DESCRIPTORS$7) defineProperty$6(value, 'prototype', { writable: false });\n    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable\n    } else if (value.prototype) value.prototype = undefined;\n  } catch (error) { /* empty */ }\n  var state = enforceInternalState$2(value);\n  if (!hasOwn$7(state, 'source')) {\n    state.source = TEMPLATE.join(typeof name == 'string' ? name : '');\n  } return value;\n};\n\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n// eslint-disable-next-line no-extend-native -- required\nFunction.prototype.toString = makeBuiltIn$1(function toString() {\n  return isCallable$f(this) && getInternalState$5(this).source || inspectSource$2(this);\n}, 'toString');\n\nvar isCallable$e = isCallable$n;\nvar definePropertyModule$5 = objectDefineProperty;\nvar makeBuiltIn = makeBuiltIn$2.exports;\nvar defineGlobalProperty$1 = defineGlobalProperty$3;\n\nvar defineBuiltIn$8 = function (O, key, value, options) {\n  if (!options) options = {};\n  var simple = options.enumerable;\n  var name = options.name !== undefined ? options.name : key;\n  if (isCallable$e(value)) makeBuiltIn(value, name, options);\n  if (options.global) {\n    if (simple) O[key] = value;\n    else defineGlobalProperty$1(key, value);\n  } else {\n    try {\n      if (!options.unsafe) delete O[key];\n      else if (O[key]) simple = true;\n    } catch (error) { /* empty */ }\n    if (simple) O[key] = value;\n    else definePropertyModule$5.f(O, key, {\n      value: value,\n      enumerable: false,\n      configurable: !options.nonConfigurable,\n      writable: !options.nonWritable\n    });\n  } return O;\n};\n\nvar objectGetOwnPropertyNames = {};\n\nvar ceil = Math.ceil;\nvar floor$3 = Math.floor;\n\n// `Math.trunc` method\n// https://tc39.es/ecma262/#sec-math.trunc\n// eslint-disable-next-line es-x/no-math-trunc -- safe\nvar mathTrunc = Math.trunc || function trunc(x) {\n  var n = +x;\n  return (n > 0 ? floor$3 : ceil)(n);\n};\n\nvar trunc = mathTrunc;\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nvar toIntegerOrInfinity$6 = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return number !== number || number === 0 ? 0 : trunc(number);\n};\n\nvar toIntegerOrInfinity$5 = toIntegerOrInfinity$6;\n\nvar max$1 = Math.max;\nvar min$2 = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nvar toAbsoluteIndex$4 = function (index, length) {\n  var integer = toIntegerOrInfinity$5(index);\n  return integer < 0 ? max$1(integer + length, 0) : min$2(integer, length);\n};\n\nvar toIntegerOrInfinity$4 = toIntegerOrInfinity$6;\n\nvar min$1 = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.es/ecma262/#sec-tolength\nvar toLength$6 = function (argument) {\n  return argument > 0 ? min$1(toIntegerOrInfinity$4(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n\nvar toLength$5 = toLength$6;\n\n// `LengthOfArrayLike` abstract operation\n// https://tc39.es/ecma262/#sec-lengthofarraylike\nvar lengthOfArrayLike$8 = function (obj) {\n  return toLength$5(obj.length);\n};\n\nvar toIndexedObject$4 = toIndexedObject$6;\nvar toAbsoluteIndex$3 = toAbsoluteIndex$4;\nvar lengthOfArrayLike$7 = lengthOfArrayLike$8;\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod$4 = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject$4($this);\n    var length = lengthOfArrayLike$7(O);\n    var index = toAbsoluteIndex$3(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare -- NaN check\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nvar arrayIncludes = {\n  // `Array.prototype.includes` method\n  // https://tc39.es/ecma262/#sec-array.prototype.includes\n  includes: createMethod$4(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.es/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod$4(false)\n};\n\nvar uncurryThis$h = functionUncurryThis;\nvar hasOwn$6 = hasOwnProperty_1;\nvar toIndexedObject$3 = toIndexedObject$6;\nvar indexOf$1 = arrayIncludes.indexOf;\nvar hiddenKeys$2 = hiddenKeys$4;\n\nvar push$2 = uncurryThis$h([].push);\n\nvar objectKeysInternal = function (object, names) {\n  var O = toIndexedObject$3(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !hasOwn$6(hiddenKeys$2, key) && hasOwn$6(O, key) && push$2(result, key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (hasOwn$6(O, key = names[i++])) {\n    ~indexOf$1(result, key) || push$2(result, key);\n  }\n  return result;\n};\n\n// IE8- don't enum bug keys\nvar enumBugKeys$3 = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n\nvar internalObjectKeys$1 = objectKeysInternal;\nvar enumBugKeys$2 = enumBugKeys$3;\n\nvar hiddenKeys$1 = enumBugKeys$2.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.es/ecma262/#sec-object.getownpropertynames\n// eslint-disable-next-line es-x/no-object-getownpropertynames -- safe\nobjectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys$1(O, hiddenKeys$1);\n};\n\nvar objectGetOwnPropertySymbols = {};\n\n// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- safe\nobjectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;\n\nvar getBuiltIn$5 = getBuiltIn$8;\nvar uncurryThis$g = functionUncurryThis;\nvar getOwnPropertyNamesModule = objectGetOwnPropertyNames;\nvar getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;\nvar anObject$c = anObject$e;\n\nvar concat$1 = uncurryThis$g([].concat);\n\n// all object keys, includes non-enumerable and symbols\nvar ownKeys$1 = getBuiltIn$5('Reflect', 'ownKeys') || function ownKeys(it) {\n  var keys = getOwnPropertyNamesModule.f(anObject$c(it));\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule$1.f;\n  return getOwnPropertySymbols ? concat$1(keys, getOwnPropertySymbols(it)) : keys;\n};\n\nvar hasOwn$5 = hasOwnProperty_1;\nvar ownKeys = ownKeys$1;\nvar getOwnPropertyDescriptorModule$1 = objectGetOwnPropertyDescriptor;\nvar definePropertyModule$4 = objectDefineProperty;\n\nvar copyConstructorProperties$1 = function (target, source, exceptions) {\n  var keys = ownKeys(source);\n  var defineProperty = definePropertyModule$4.f;\n  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule$1.f;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!hasOwn$5(target, key) && !(exceptions && hasOwn$5(exceptions, key))) {\n      defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n    }\n  }\n};\n\nvar fails$k = fails$s;\nvar isCallable$d = isCallable$n;\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced$2 = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value == POLYFILL ? true\n    : value == NATIVE ? false\n    : isCallable$d(detection) ? fails$k(detection)\n    : !!detection;\n};\n\nvar normalize = isForced$2.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced$2.data = {};\nvar NATIVE = isForced$2.NATIVE = 'N';\nvar POLYFILL = isForced$2.POLYFILL = 'P';\n\nvar isForced_1 = isForced$2;\n\nvar global$k = global$t;\nvar getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;\nvar createNonEnumerableProperty$6 = createNonEnumerableProperty$8;\nvar defineBuiltIn$7 = defineBuiltIn$8;\nvar defineGlobalProperty = defineGlobalProperty$3;\nvar copyConstructorProperties = copyConstructorProperties$1;\nvar isForced$1 = isForced_1;\n\n/*\n  options.target         - name of the target object\n  options.global         - target is the global object\n  options.stat           - export as static methods of target\n  options.proto          - export as prototype methods of target\n  options.real           - real prototype method for the `pure` version\n  options.forced         - export even if the native feature is available\n  options.bind           - bind methods to the target, required for the `pure` version\n  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe         - use the simple assignment of property instead of delete + defineProperty\n  options.sham           - add a flag to not completely full polyfills\n  options.enumerable     - export as enumerable property\n  options.dontCallGetSet - prevent calling a getter on target\n  options.name           - the .name of the function if it does not match the key\n*/\nvar _export = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n  if (GLOBAL) {\n    target = global$k;\n  } else if (STATIC) {\n    target = global$k[TARGET] || defineGlobalProperty(TARGET, {});\n  } else {\n    target = (global$k[TARGET] || {}).prototype;\n  }\n  if (target) for (key in source) {\n    sourceProperty = source[key];\n    if (options.dontCallGetSet) {\n      descriptor = getOwnPropertyDescriptor$1(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } else targetProperty = target[key];\n    FORCED = isForced$1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contained in target\n    if (!FORCED && targetProperty !== undefined) {\n      if (typeof sourceProperty == typeof targetProperty) continue;\n      copyConstructorProperties(sourceProperty, targetProperty);\n    }\n    // add a flag to not completely full polyfills\n    if (options.sham || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty$6(sourceProperty, 'sham', true);\n    }\n    defineBuiltIn$7(target, key, sourceProperty, options);\n  }\n};\n\nvar classof$a = classofRaw$1;\nvar global$j = global$t;\n\nvar engineIsNode = classof$a(global$j.process) == 'process';\n\nvar isCallable$c = isCallable$n;\n\nvar $String$1 = String;\nvar $TypeError$9 = TypeError;\n\nvar aPossiblePrototype$1 = function (argument) {\n  if (typeof argument == 'object' || isCallable$c(argument)) return argument;\n  throw $TypeError$9(\"Can't set \" + $String$1(argument) + ' as a prototype');\n};\n\n/* eslint-disable no-proto -- safe */\n\nvar uncurryThis$f = functionUncurryThis;\nvar anObject$b = anObject$e;\nvar aPossiblePrototype = aPossiblePrototype$1;\n\n// `Object.setPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n// eslint-disable-next-line es-x/no-object-setprototypeof -- safe\nvar objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe\n    setter = uncurryThis$f(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);\n    setter(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    anObject$b(O);\n    aPossiblePrototype(proto);\n    if (CORRECT_SETTER) setter(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n\nvar defineProperty$5 = objectDefineProperty.f;\nvar hasOwn$4 = hasOwnProperty_1;\nvar wellKnownSymbol$h = wellKnownSymbol$j;\n\nvar TO_STRING_TAG$4 = wellKnownSymbol$h('toStringTag');\n\nvar setToStringTag$4 = function (target, TAG, STATIC) {\n  if (target && !STATIC) target = target.prototype;\n  if (target && !hasOwn$4(target, TO_STRING_TAG$4)) {\n    defineProperty$5(target, TO_STRING_TAG$4, { configurable: true, value: TAG });\n  }\n};\n\nvar getBuiltIn$4 = getBuiltIn$8;\nvar definePropertyModule$3 = objectDefineProperty;\nvar wellKnownSymbol$g = wellKnownSymbol$j;\nvar DESCRIPTORS$6 = descriptors;\n\nvar SPECIES$4 = wellKnownSymbol$g('species');\n\nvar setSpecies$2 = function (CONSTRUCTOR_NAME) {\n  var Constructor = getBuiltIn$4(CONSTRUCTOR_NAME);\n  var defineProperty = definePropertyModule$3.f;\n\n  if (DESCRIPTORS$6 && Constructor && !Constructor[SPECIES$4]) {\n    defineProperty(Constructor, SPECIES$4, {\n      configurable: true,\n      get: function () { return this; }\n    });\n  }\n};\n\nvar isPrototypeOf$3 = objectIsPrototypeOf;\n\nvar $TypeError$8 = TypeError;\n\nvar anInstance$3 = function (it, Prototype) {\n  if (isPrototypeOf$3(Prototype, it)) return it;\n  throw $TypeError$8('Incorrect invocation');\n};\n\nvar wellKnownSymbol$f = wellKnownSymbol$j;\n\nvar TO_STRING_TAG$3 = wellKnownSymbol$f('toStringTag');\nvar test = {};\n\ntest[TO_STRING_TAG$3] = 'z';\n\nvar toStringTagSupport = String(test) === '[object z]';\n\nvar TO_STRING_TAG_SUPPORT = toStringTagSupport;\nvar isCallable$b = isCallable$n;\nvar classofRaw = classofRaw$1;\nvar wellKnownSymbol$e = wellKnownSymbol$j;\n\nvar TO_STRING_TAG$2 = wellKnownSymbol$e('toStringTag');\nvar $Object$1 = Object;\n\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (error) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nvar classof$9 = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = $Object$1(it), TO_STRING_TAG$2)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) == 'Object' && isCallable$b(O.callee) ? 'Arguments' : result;\n};\n\nvar uncurryThis$e = functionUncurryThis;\nvar fails$j = fails$s;\nvar isCallable$a = isCallable$n;\nvar classof$8 = classof$9;\nvar getBuiltIn$3 = getBuiltIn$8;\nvar inspectSource$1 = inspectSource$4;\n\nvar noop = function () { /* empty */ };\nvar empty = [];\nvar construct = getBuiltIn$3('Reflect', 'construct');\nvar constructorRegExp = /^\\s*(?:class|function)\\b/;\nvar exec$2 = uncurryThis$e(constructorRegExp.exec);\nvar INCORRECT_TO_STRING = !constructorRegExp.exec(noop);\n\nvar isConstructorModern = function isConstructor(argument) {\n  if (!isCallable$a(argument)) return false;\n  try {\n    construct(noop, empty, argument);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nvar isConstructorLegacy = function isConstructor(argument) {\n  if (!isCallable$a(argument)) return false;\n  switch (classof$8(argument)) {\n    case 'AsyncFunction':\n    case 'GeneratorFunction':\n    case 'AsyncGeneratorFunction': return false;\n  }\n  try {\n    // we can't check .prototype since constructors produced by .bind haven't it\n    // `Function#toString` throws on some built-it function in some legacy engines\n    // (for example, `DOMQuad` and similar in FF41-)\n    return INCORRECT_TO_STRING || !!exec$2(constructorRegExp, inspectSource$1(argument));\n  } catch (error) {\n    return true;\n  }\n};\n\nisConstructorLegacy.sham = true;\n\n// `IsConstructor` abstract operation\n// https://tc39.es/ecma262/#sec-isconstructor\nvar isConstructor$2 = !construct || fails$j(function () {\n  var called;\n  return isConstructorModern(isConstructorModern.call)\n    || !isConstructorModern(Object)\n    || !isConstructorModern(function () { called = true; })\n    || called;\n}) ? isConstructorLegacy : isConstructorModern;\n\nvar isConstructor$1 = isConstructor$2;\nvar tryToString$3 = tryToString$5;\n\nvar $TypeError$7 = TypeError;\n\n// `Assert: IsConstructor(argument) is true`\nvar aConstructor$2 = function (argument) {\n  if (isConstructor$1(argument)) return argument;\n  throw $TypeError$7(tryToString$3(argument) + ' is not a constructor');\n};\n\nvar anObject$a = anObject$e;\nvar aConstructor$1 = aConstructor$2;\nvar wellKnownSymbol$d = wellKnownSymbol$j;\n\nvar SPECIES$3 = wellKnownSymbol$d('species');\n\n// `SpeciesConstructor` abstract operation\n// https://tc39.es/ecma262/#sec-speciesconstructor\nvar speciesConstructor$3 = function (O, defaultConstructor) {\n  var C = anObject$a(O).constructor;\n  var S;\n  return C === undefined || (S = anObject$a(C)[SPECIES$3]) == undefined ? defaultConstructor : aConstructor$1(S);\n};\n\nvar NATIVE_BIND$1 = functionBindNative;\n\nvar FunctionPrototype = Function.prototype;\nvar apply$3 = FunctionPrototype.apply;\nvar call$g = FunctionPrototype.call;\n\n// eslint-disable-next-line es-x/no-reflect -- safe\nvar functionApply = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND$1 ? call$g.bind(apply$3) : function () {\n  return call$g.apply(apply$3, arguments);\n});\n\nvar uncurryThis$d = functionUncurryThis;\nvar aCallable$7 = aCallable$9;\nvar NATIVE_BIND = functionBindNative;\n\nvar bind$6 = uncurryThis$d(uncurryThis$d.bind);\n\n// optional / simple context binding\nvar functionBindContext = function (fn, that) {\n  aCallable$7(fn);\n  return that === undefined ? fn : NATIVE_BIND ? bind$6(fn, that) : function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\nvar getBuiltIn$2 = getBuiltIn$8;\n\nvar html$2 = getBuiltIn$2('document', 'documentElement');\n\nvar uncurryThis$c = functionUncurryThis;\n\nvar arraySlice$5 = uncurryThis$c([].slice);\n\nvar $TypeError$6 = TypeError;\n\nvar validateArgumentsLength$1 = function (passed, required) {\n  if (passed < required) throw $TypeError$6('Not enough arguments');\n  return passed;\n};\n\nvar userAgent$4 = engineUserAgent;\n\nvar engineIsIos = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent$4);\n\nvar global$i = global$t;\nvar apply$2 = functionApply;\nvar bind$5 = functionBindContext;\nvar isCallable$9 = isCallable$n;\nvar hasOwn$3 = hasOwnProperty_1;\nvar fails$i = fails$s;\nvar html$1 = html$2;\nvar arraySlice$4 = arraySlice$5;\nvar createElement = documentCreateElement$2;\nvar validateArgumentsLength = validateArgumentsLength$1;\nvar IS_IOS$1 = engineIsIos;\nvar IS_NODE$3 = engineIsNode;\n\nvar set$1 = global$i.setImmediate;\nvar clear = global$i.clearImmediate;\nvar process$2 = global$i.process;\nvar Dispatch = global$i.Dispatch;\nvar Function$1 = global$i.Function;\nvar MessageChannel = global$i.MessageChannel;\nvar String$1 = global$i.String;\nvar counter = 0;\nvar queue$1 = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar location, defer, channel, port;\n\ntry {\n  // Deno throws a ReferenceError on `location` access without `--location` flag\n  location = global$i.location;\n} catch (error) { /* empty */ }\n\nvar run = function (id) {\n  if (hasOwn$3(queue$1, id)) {\n    var fn = queue$1[id];\n    delete queue$1[id];\n    fn();\n  }\n};\n\nvar runner = function (id) {\n  return function () {\n    run(id);\n  };\n};\n\nvar listener = function (event) {\n  run(event.data);\n};\n\nvar post = function (id) {\n  // old engines have not location.origin\n  global$i.postMessage(String$1(id), location.protocol + '//' + location.host);\n};\n\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!set$1 || !clear) {\n  set$1 = function setImmediate(handler) {\n    validateArgumentsLength(arguments.length, 1);\n    var fn = isCallable$9(handler) ? handler : Function$1(handler);\n    var args = arraySlice$4(arguments, 1);\n    queue$1[++counter] = function () {\n      apply$2(fn, undefined, args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clear = function clearImmediate(id) {\n    delete queue$1[id];\n  };\n  // Node.js 0.8-\n  if (IS_NODE$3) {\n    defer = function (id) {\n      process$2.nextTick(runner(id));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(runner(id));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  // except iOS - https://github.com/zloirock/core-js/issues/624\n  } else if (MessageChannel && !IS_IOS$1) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = bind$5(port.postMessage, port);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (\n    global$i.addEventListener &&\n    isCallable$9(global$i.postMessage) &&\n    !global$i.importScripts &&\n    location && location.protocol !== 'file:' &&\n    !fails$i(post)\n  ) {\n    defer = post;\n    global$i.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in createElement('script')) {\n    defer = function (id) {\n      html$1.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {\n        html$1.removeChild(this);\n        run(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(runner(id), 0);\n    };\n  }\n}\n\nvar task$1 = {\n  set: set$1,\n  clear: clear\n};\n\nvar userAgent$3 = engineUserAgent;\nvar global$h = global$t;\n\nvar engineIsIosPebble = /ipad|iphone|ipod/i.test(userAgent$3) && global$h.Pebble !== undefined;\n\nvar userAgent$2 = engineUserAgent;\n\nvar engineIsWebosWebkit = /web0s(?!.*chrome)/i.test(userAgent$2);\n\nvar global$g = global$t;\nvar bind$4 = functionBindContext;\nvar getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;\nvar macrotask = task$1.set;\nvar IS_IOS = engineIsIos;\nvar IS_IOS_PEBBLE = engineIsIosPebble;\nvar IS_WEBOS_WEBKIT = engineIsWebosWebkit;\nvar IS_NODE$2 = engineIsNode;\n\nvar MutationObserver = global$g.MutationObserver || global$g.WebKitMutationObserver;\nvar document$2 = global$g.document;\nvar process$1 = global$g.process;\nvar Promise$1 = global$g.Promise;\n// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`\nvar queueMicrotaskDescriptor = getOwnPropertyDescriptor(global$g, 'queueMicrotask');\nvar queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;\n\nvar flush, head, last, notify$1, toggle, node, promise, then;\n\n// modern engines have queueMicrotask method\nif (!queueMicrotask) {\n  flush = function () {\n    var parent, fn;\n    if (IS_NODE$2 && (parent = process$1.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (error) {\n        if (head) notify$1();\n        else last = undefined;\n        throw error;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339\n  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898\n  if (!IS_IOS && !IS_NODE$2 && !IS_WEBOS_WEBKIT && MutationObserver && document$2) {\n    toggle = true;\n    node = document$2.createTextNode('');\n    new MutationObserver(flush).observe(node, { characterData: true });\n    notify$1 = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (!IS_IOS_PEBBLE && Promise$1 && Promise$1.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    promise = Promise$1.resolve(undefined);\n    // workaround of WebKit ~ iOS Safari 10.1 bug\n    promise.constructor = Promise$1;\n    then = bind$4(promise.then, promise);\n    notify$1 = function () {\n      then(flush);\n    };\n  // Node.js without promises\n  } else if (IS_NODE$2) {\n    notify$1 = function () {\n      process$1.nextTick(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessage\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    // strange IE + webpack dev server bug - use .bind(global)\n    macrotask = bind$4(macrotask, global$g);\n    notify$1 = function () {\n      macrotask(flush);\n    };\n  }\n}\n\nvar microtask$1 = queueMicrotask || function (fn) {\n  var task = { fn: fn, next: undefined };\n  if (last) last.next = task;\n  if (!head) {\n    head = task;\n    notify$1();\n  } last = task;\n};\n\nvar global$f = global$t;\n\nvar hostReportErrors$1 = function (a, b) {\n  var console = global$f.console;\n  if (console && console.error) {\n    arguments.length == 1 ? console.error(a) : console.error(a, b);\n  }\n};\n\nvar perform$3 = function (exec) {\n  try {\n    return { error: false, value: exec() };\n  } catch (error) {\n    return { error: true, value: error };\n  }\n};\n\nvar Queue$1 = function () {\n  this.head = null;\n  this.tail = null;\n};\n\nQueue$1.prototype = {\n  add: function (item) {\n    var entry = { item: item, next: null };\n    if (this.head) this.tail.next = entry;\n    else this.head = entry;\n    this.tail = entry;\n  },\n  get: function () {\n    var entry = this.head;\n    if (entry) {\n      this.head = entry.next;\n      if (this.tail === entry) this.tail = null;\n      return entry.item;\n    }\n  }\n};\n\nvar queue = Queue$1;\n\nvar global$e = global$t;\n\nvar promiseNativeConstructor = global$e.Promise;\n\nvar engineIsBrowser = typeof window == 'object' && typeof Deno != 'object';\n\nvar global$d = global$t;\nvar NativePromiseConstructor$3 = promiseNativeConstructor;\nvar isCallable$8 = isCallable$n;\nvar isForced = isForced_1;\nvar inspectSource = inspectSource$4;\nvar wellKnownSymbol$c = wellKnownSymbol$j;\nvar IS_BROWSER = engineIsBrowser;\nvar V8_VERSION = engineV8Version;\n\nNativePromiseConstructor$3 && NativePromiseConstructor$3.prototype;\nvar SPECIES$2 = wellKnownSymbol$c('species');\nvar SUBCLASSING = false;\nvar NATIVE_PROMISE_REJECTION_EVENT$1 = isCallable$8(global$d.PromiseRejectionEvent);\n\nvar FORCED_PROMISE_CONSTRUCTOR$5 = isForced('Promise', function () {\n  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor$3);\n  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor$3);\n  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n  // We can't detect it synchronously, so just check versions\n  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;\n  // We can't use @@species feature detection in V8 since it causes\n  // deoptimization and performance degradation\n  // https://github.com/zloirock/core-js/issues/679\n  if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false;\n  // Detect correctness of subclassing with @@species support\n  var promise = new NativePromiseConstructor$3(function (resolve) { resolve(1); });\n  var FakePromise = function (exec) {\n    exec(function () { /* empty */ }, function () { /* empty */ });\n  };\n  var constructor = promise.constructor = {};\n  constructor[SPECIES$2] = FakePromise;\n  SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;\n  if (!SUBCLASSING) return true;\n  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n  return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_PROMISE_REJECTION_EVENT$1;\n});\n\nvar promiseConstructorDetection = {\n  CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR$5,\n  REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT$1,\n  SUBCLASSING: SUBCLASSING\n};\n\nvar newPromiseCapability$2 = {};\n\nvar aCallable$6 = aCallable$9;\n\nvar PromiseCapability = function (C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aCallable$6(resolve);\n  this.reject = aCallable$6(reject);\n};\n\n// `NewPromiseCapability` abstract operation\n// https://tc39.es/ecma262/#sec-newpromisecapability\nnewPromiseCapability$2.f = function (C) {\n  return new PromiseCapability(C);\n};\n\nvar $$e = _export;\nvar IS_NODE$1 = engineIsNode;\nvar global$c = global$t;\nvar call$f = functionCall;\nvar defineBuiltIn$6 = defineBuiltIn$8;\nvar setPrototypeOf$5 = objectSetPrototypeOf;\nvar setToStringTag$3 = setToStringTag$4;\nvar setSpecies$1 = setSpecies$2;\nvar aCallable$5 = aCallable$9;\nvar isCallable$7 = isCallable$n;\nvar isObject$7 = isObject$d;\nvar anInstance$2 = anInstance$3;\nvar speciesConstructor$2 = speciesConstructor$3;\nvar task = task$1.set;\nvar microtask = microtask$1;\nvar hostReportErrors = hostReportErrors$1;\nvar perform$2 = perform$3;\nvar Queue = queue;\nvar InternalStateModule$4 = internalState;\nvar NativePromiseConstructor$2 = promiseNativeConstructor;\nvar PromiseConstructorDetection = promiseConstructorDetection;\nvar newPromiseCapabilityModule$3 = newPromiseCapability$2;\n\nvar PROMISE = 'Promise';\nvar FORCED_PROMISE_CONSTRUCTOR$4 = PromiseConstructorDetection.CONSTRUCTOR;\nvar NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;\nvar NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;\nvar getInternalPromiseState = InternalStateModule$4.getterFor(PROMISE);\nvar setInternalState$3 = InternalStateModule$4.set;\nvar NativePromisePrototype$1 = NativePromiseConstructor$2 && NativePromiseConstructor$2.prototype;\nvar PromiseConstructor = NativePromiseConstructor$2;\nvar PromisePrototype = NativePromisePrototype$1;\nvar TypeError$2 = global$c.TypeError;\nvar document$1 = global$c.document;\nvar process = global$c.process;\nvar newPromiseCapability$1 = newPromiseCapabilityModule$3.f;\nvar newGenericPromiseCapability = newPromiseCapability$1;\n\nvar DISPATCH_EVENT = !!(document$1 && document$1.createEvent && global$c.dispatchEvent);\nvar UNHANDLED_REJECTION = 'unhandledrejection';\nvar REJECTION_HANDLED = 'rejectionhandled';\nvar PENDING = 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\nvar HANDLED = 1;\nvar UNHANDLED = 2;\n\nvar Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject$7(it) && isCallable$7(then = it.then) ? then : false;\n};\n\nvar callReaction = function (reaction, state) {\n  var value = state.value;\n  var ok = state.state == FULFILLED;\n  var handler = ok ? reaction.ok : reaction.fail;\n  var resolve = reaction.resolve;\n  var reject = reaction.reject;\n  var domain = reaction.domain;\n  var result, then, exited;\n  try {\n    if (handler) {\n      if (!ok) {\n        if (state.rejection === UNHANDLED) onHandleUnhandled(state);\n        state.rejection = HANDLED;\n      }\n      if (handler === true) result = value;\n      else {\n        if (domain) domain.enter();\n        result = handler(value); // can throw\n        if (domain) {\n          domain.exit();\n          exited = true;\n        }\n      }\n      if (result === reaction.promise) {\n        reject(TypeError$2('Promise-chain cycle'));\n      } else if (then = isThenable(result)) {\n        call$f(then, result, resolve, reject);\n      } else resolve(result);\n    } else reject(value);\n  } catch (error) {\n    if (domain && !exited) domain.exit();\n    reject(error);\n  }\n};\n\nvar notify = function (state, isReject) {\n  if (state.notified) return;\n  state.notified = true;\n  microtask(function () {\n    var reactions = state.reactions;\n    var reaction;\n    while (reaction = reactions.get()) {\n      callReaction(reaction, state);\n    }\n    state.notified = false;\n    if (isReject && !state.rejection) onUnhandled(state);\n  });\n};\n\nvar dispatchEvent = function (name, promise, reason) {\n  var event, handler;\n  if (DISPATCH_EVENT) {\n    event = document$1.createEvent('Event');\n    event.promise = promise;\n    event.reason = reason;\n    event.initEvent(name, false, true);\n    global$c.dispatchEvent(event);\n  } else event = { promise: promise, reason: reason };\n  if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global$c['on' + name])) handler(event);\n  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);\n};\n\nvar onUnhandled = function (state) {\n  call$f(task, global$c, function () {\n    var promise = state.facade;\n    var value = state.value;\n    var IS_UNHANDLED = isUnhandled(state);\n    var result;\n    if (IS_UNHANDLED) {\n      result = perform$2(function () {\n        if (IS_NODE$1) {\n          process.emit('unhandledRejection', value, promise);\n        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      state.rejection = IS_NODE$1 || isUnhandled(state) ? UNHANDLED : HANDLED;\n      if (result.error) throw result.value;\n    }\n  });\n};\n\nvar isUnhandled = function (state) {\n  return state.rejection !== HANDLED && !state.parent;\n};\n\nvar onHandleUnhandled = function (state) {\n  call$f(task, global$c, function () {\n    var promise = state.facade;\n    if (IS_NODE$1) {\n      process.emit('rejectionHandled', promise);\n    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);\n  });\n};\n\nvar bind$3 = function (fn, state, unwrap) {\n  return function (value) {\n    fn(state, value, unwrap);\n  };\n};\n\nvar internalReject = function (state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  state.value = value;\n  state.state = REJECTED;\n  notify(state, true);\n};\n\nvar internalResolve = function (state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  try {\n    if (state.facade === value) throw TypeError$2(\"Promise can't be resolved itself\");\n    var then = isThenable(value);\n    if (then) {\n      microtask(function () {\n        var wrapper = { done: false };\n        try {\n          call$f(then, value,\n            bind$3(internalResolve, wrapper, state),\n            bind$3(internalReject, wrapper, state)\n          );\n        } catch (error) {\n          internalReject(wrapper, error, state);\n        }\n      });\n    } else {\n      state.value = value;\n      state.state = FULFILLED;\n      notify(state, false);\n    }\n  } catch (error) {\n    internalReject({ done: false }, error, state);\n  }\n};\n\n// constructor polyfill\nif (FORCED_PROMISE_CONSTRUCTOR$4) {\n  // 25.4.3.1 Promise(executor)\n  PromiseConstructor = function Promise(executor) {\n    anInstance$2(this, PromisePrototype);\n    aCallable$5(executor);\n    call$f(Internal, this);\n    var state = getInternalPromiseState(this);\n    try {\n      executor(bind$3(internalResolve, state), bind$3(internalReject, state));\n    } catch (error) {\n      internalReject(state, error);\n    }\n  };\n\n  PromisePrototype = PromiseConstructor.prototype;\n\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\n  Internal = function Promise(executor) {\n    setInternalState$3(this, {\n      type: PROMISE,\n      done: false,\n      notified: false,\n      parent: false,\n      reactions: new Queue(),\n      rejection: false,\n      state: PENDING,\n      value: undefined\n    });\n  };\n\n  // `Promise.prototype.then` method\n  // https://tc39.es/ecma262/#sec-promise.prototype.then\n  Internal.prototype = defineBuiltIn$6(PromisePrototype, 'then', function then(onFulfilled, onRejected) {\n    var state = getInternalPromiseState(this);\n    var reaction = newPromiseCapability$1(speciesConstructor$2(this, PromiseConstructor));\n    state.parent = true;\n    reaction.ok = isCallable$7(onFulfilled) ? onFulfilled : true;\n    reaction.fail = isCallable$7(onRejected) && onRejected;\n    reaction.domain = IS_NODE$1 ? process.domain : undefined;\n    if (state.state == PENDING) state.reactions.add(reaction);\n    else microtask(function () {\n      callReaction(reaction, state);\n    });\n    return reaction.promise;\n  });\n\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    var state = getInternalPromiseState(promise);\n    this.promise = promise;\n    this.resolve = bind$3(internalResolve, state);\n    this.reject = bind$3(internalReject, state);\n  };\n\n  newPromiseCapabilityModule$3.f = newPromiseCapability$1 = function (C) {\n    return C === PromiseConstructor || C === PromiseWrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n\n  if (isCallable$7(NativePromiseConstructor$2) && NativePromisePrototype$1 !== Object.prototype) {\n    nativeThen = NativePromisePrototype$1.then;\n\n    if (!NATIVE_PROMISE_SUBCLASSING) {\n      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs\n      defineBuiltIn$6(NativePromisePrototype$1, 'then', function then(onFulfilled, onRejected) {\n        var that = this;\n        return new PromiseConstructor(function (resolve, reject) {\n          call$f(nativeThen, that, resolve, reject);\n        }).then(onFulfilled, onRejected);\n      // https://github.com/zloirock/core-js/issues/640\n      }, { unsafe: true });\n    }\n\n    // make `.constructor === Promise` work for native promise-based APIs\n    try {\n      delete NativePromisePrototype$1.constructor;\n    } catch (error) { /* empty */ }\n\n    // make `instanceof Promise` work for native promise-based APIs\n    if (setPrototypeOf$5) {\n      setPrototypeOf$5(NativePromisePrototype$1, PromisePrototype);\n    }\n  }\n}\n\n$$e({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR$4 }, {\n  Promise: PromiseConstructor\n});\n\nsetToStringTag$3(PromiseConstructor, PROMISE, false);\nsetSpecies$1(PROMISE);\n\nvar iterators = {};\n\nvar wellKnownSymbol$b = wellKnownSymbol$j;\nvar Iterators$4 = iterators;\n\nvar ITERATOR$5 = wellKnownSymbol$b('iterator');\nvar ArrayPrototype$1 = Array.prototype;\n\n// check on default Array iterator\nvar isArrayIteratorMethod$2 = function (it) {\n  return it !== undefined && (Iterators$4.Array === it || ArrayPrototype$1[ITERATOR$5] === it);\n};\n\nvar classof$7 = classof$9;\nvar getMethod$2 = getMethod$4;\nvar Iterators$3 = iterators;\nvar wellKnownSymbol$a = wellKnownSymbol$j;\n\nvar ITERATOR$4 = wellKnownSymbol$a('iterator');\n\nvar getIteratorMethod$3 = function (it) {\n  if (it != undefined) return getMethod$2(it, ITERATOR$4)\n    || getMethod$2(it, '@@iterator')\n    || Iterators$3[classof$7(it)];\n};\n\nvar call$e = functionCall;\nvar aCallable$4 = aCallable$9;\nvar anObject$9 = anObject$e;\nvar tryToString$2 = tryToString$5;\nvar getIteratorMethod$2 = getIteratorMethod$3;\n\nvar $TypeError$5 = TypeError;\n\nvar getIterator$2 = function (argument, usingIterator) {\n  var iteratorMethod = arguments.length < 2 ? getIteratorMethod$2(argument) : usingIterator;\n  if (aCallable$4(iteratorMethod)) return anObject$9(call$e(iteratorMethod, argument));\n  throw $TypeError$5(tryToString$2(argument) + ' is not iterable');\n};\n\nvar call$d = functionCall;\nvar anObject$8 = anObject$e;\nvar getMethod$1 = getMethod$4;\n\nvar iteratorClose$1 = function (iterator, kind, value) {\n  var innerResult, innerError;\n  anObject$8(iterator);\n  try {\n    innerResult = getMethod$1(iterator, 'return');\n    if (!innerResult) {\n      if (kind === 'throw') throw value;\n      return value;\n    }\n    innerResult = call$d(innerResult, iterator);\n  } catch (error) {\n    innerError = true;\n    innerResult = error;\n  }\n  if (kind === 'throw') throw value;\n  if (innerError) throw innerResult;\n  anObject$8(innerResult);\n  return value;\n};\n\nvar bind$2 = functionBindContext;\nvar call$c = functionCall;\nvar anObject$7 = anObject$e;\nvar tryToString$1 = tryToString$5;\nvar isArrayIteratorMethod$1 = isArrayIteratorMethod$2;\nvar lengthOfArrayLike$6 = lengthOfArrayLike$8;\nvar isPrototypeOf$2 = objectIsPrototypeOf;\nvar getIterator$1 = getIterator$2;\nvar getIteratorMethod$1 = getIteratorMethod$3;\nvar iteratorClose = iteratorClose$1;\n\nvar $TypeError$4 = TypeError;\n\nvar Result = function (stopped, result) {\n  this.stopped = stopped;\n  this.result = result;\n};\n\nvar ResultPrototype = Result.prototype;\n\nvar iterate$2 = function (iterable, unboundFunction, options) {\n  var that = options && options.that;\n  var AS_ENTRIES = !!(options && options.AS_ENTRIES);\n  var IS_ITERATOR = !!(options && options.IS_ITERATOR);\n  var INTERRUPTED = !!(options && options.INTERRUPTED);\n  var fn = bind$2(unboundFunction, that);\n  var iterator, iterFn, index, length, result, next, step;\n\n  var stop = function (condition) {\n    if (iterator) iteratorClose(iterator, 'normal', condition);\n    return new Result(true, condition);\n  };\n\n  var callFn = function (value) {\n    if (AS_ENTRIES) {\n      anObject$7(value);\n      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);\n    } return INTERRUPTED ? fn(value, stop) : fn(value);\n  };\n\n  if (IS_ITERATOR) {\n    iterator = iterable;\n  } else {\n    iterFn = getIteratorMethod$1(iterable);\n    if (!iterFn) throw $TypeError$4(tryToString$1(iterable) + ' is not iterable');\n    // optimisation for array iterators\n    if (isArrayIteratorMethod$1(iterFn)) {\n      for (index = 0, length = lengthOfArrayLike$6(iterable); length > index; index++) {\n        result = callFn(iterable[index]);\n        if (result && isPrototypeOf$2(ResultPrototype, result)) return result;\n      } return new Result(false);\n    }\n    iterator = getIterator$1(iterable, iterFn);\n  }\n\n  next = iterator.next;\n  while (!(step = call$c(next, iterator)).done) {\n    try {\n      result = callFn(step.value);\n    } catch (error) {\n      iteratorClose(iterator, 'throw', error);\n    }\n    if (typeof result == 'object' && result && isPrototypeOf$2(ResultPrototype, result)) return result;\n  } return new Result(false);\n};\n\nvar wellKnownSymbol$9 = wellKnownSymbol$j;\n\nvar ITERATOR$3 = wellKnownSymbol$9('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var called = 0;\n  var iteratorWithReturn = {\n    next: function () {\n      return { done: !!called++ };\n    },\n    'return': function () {\n      SAFE_CLOSING = true;\n    }\n  };\n  iteratorWithReturn[ITERATOR$3] = function () {\n    return this;\n  };\n  // eslint-disable-next-line es-x/no-array-from, no-throw-literal -- required for testing\n  Array.from(iteratorWithReturn, function () { throw 2; });\n} catch (error) { /* empty */ }\n\nvar checkCorrectnessOfIteration$2 = function (exec, SKIP_CLOSING) {\n  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;\n  var ITERATION_SUPPORT = false;\n  try {\n    var object = {};\n    object[ITERATOR$3] = function () {\n      return {\n        next: function () {\n          return { done: ITERATION_SUPPORT = true };\n        }\n      };\n    };\n    exec(object);\n  } catch (error) { /* empty */ }\n  return ITERATION_SUPPORT;\n};\n\nvar NativePromiseConstructor$1 = promiseNativeConstructor;\nvar checkCorrectnessOfIteration$1 = checkCorrectnessOfIteration$2;\nvar FORCED_PROMISE_CONSTRUCTOR$3 = promiseConstructorDetection.CONSTRUCTOR;\n\nvar promiseStaticsIncorrectIteration = FORCED_PROMISE_CONSTRUCTOR$3 || !checkCorrectnessOfIteration$1(function (iterable) {\n  NativePromiseConstructor$1.all(iterable).then(undefined, function () { /* empty */ });\n});\n\nvar $$d = _export;\nvar call$b = functionCall;\nvar aCallable$3 = aCallable$9;\nvar newPromiseCapabilityModule$2 = newPromiseCapability$2;\nvar perform$1 = perform$3;\nvar iterate$1 = iterate$2;\nvar PROMISE_STATICS_INCORRECT_ITERATION$1 = promiseStaticsIncorrectIteration;\n\n// `Promise.all` method\n// https://tc39.es/ecma262/#sec-promise.all\n$$d({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION$1 }, {\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule$2.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform$1(function () {\n      var $promiseResolve = aCallable$3(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate$1(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        remaining++;\n        call$b($promiseResolve, C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n\nvar $$c = _export;\nvar FORCED_PROMISE_CONSTRUCTOR$2 = promiseConstructorDetection.CONSTRUCTOR;\nvar NativePromiseConstructor = promiseNativeConstructor;\nvar getBuiltIn$1 = getBuiltIn$8;\nvar isCallable$6 = isCallable$n;\nvar defineBuiltIn$5 = defineBuiltIn$8;\n\nvar NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;\n\n// `Promise.prototype.catch` method\n// https://tc39.es/ecma262/#sec-promise.prototype.catch\n$$c({ target: 'Promise', proto: true, forced: FORCED_PROMISE_CONSTRUCTOR$2, real: true }, {\n  'catch': function (onRejected) {\n    return this.then(undefined, onRejected);\n  }\n});\n\n// makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`\nif (isCallable$6(NativePromiseConstructor)) {\n  var method = getBuiltIn$1('Promise').prototype['catch'];\n  if (NativePromisePrototype['catch'] !== method) {\n    defineBuiltIn$5(NativePromisePrototype, 'catch', method, { unsafe: true });\n  }\n}\n\nvar $$b = _export;\nvar call$a = functionCall;\nvar aCallable$2 = aCallable$9;\nvar newPromiseCapabilityModule$1 = newPromiseCapability$2;\nvar perform = perform$3;\nvar iterate = iterate$2;\nvar PROMISE_STATICS_INCORRECT_ITERATION = promiseStaticsIncorrectIteration;\n\n// `Promise.race` method\n// https://tc39.es/ecma262/#sec-promise.race\n$$b({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule$1.f(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      var $promiseResolve = aCallable$2(C.resolve);\n      iterate(iterable, function (promise) {\n        call$a($promiseResolve, C, promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n\nvar $$a = _export;\nvar call$9 = functionCall;\nvar newPromiseCapabilityModule = newPromiseCapability$2;\nvar FORCED_PROMISE_CONSTRUCTOR$1 = promiseConstructorDetection.CONSTRUCTOR;\n\n// `Promise.reject` method\n// https://tc39.es/ecma262/#sec-promise.reject\n$$a({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR$1 }, {\n  reject: function reject(r) {\n    var capability = newPromiseCapabilityModule.f(this);\n    call$9(capability.reject, undefined, r);\n    return capability.promise;\n  }\n});\n\nvar anObject$6 = anObject$e;\nvar isObject$6 = isObject$d;\nvar newPromiseCapability = newPromiseCapability$2;\n\nvar promiseResolve$1 = function (C, x) {\n  anObject$6(C);\n  if (isObject$6(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n\nvar $$9 = _export;\nvar getBuiltIn = getBuiltIn$8;\nvar FORCED_PROMISE_CONSTRUCTOR = promiseConstructorDetection.CONSTRUCTOR;\nvar promiseResolve = promiseResolve$1;\n\ngetBuiltIn('Promise');\n\n// `Promise.resolve` method\n// https://tc39.es/ecma262/#sec-promise.resolve\n$$9({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {\n  resolve: function resolve(x) {\n    return promiseResolve(this, x);\n  }\n});\n\nclass WebStorageService {\n  getItem(key) {\n    return new Promise(resolve => {\n      const value = localStorage.getItem(key);\n      resolve(value);\n    });\n  }\n  setItem(key, value) {\n    return new Promise(resolve => {\n      localStorage.setItem(key, value);\n      resolve();\n    });\n  }\n  removeItem(key) {\n    return new Promise(resolve => {\n      localStorage.removeItem(key);\n      resolve();\n    });\n  }\n}\n\nvar objectDefineProperties = {};\n\nvar internalObjectKeys = objectKeysInternal;\nvar enumBugKeys$1 = enumBugKeys$3;\n\n// `Object.keys` method\n// https://tc39.es/ecma262/#sec-object.keys\n// eslint-disable-next-line es-x/no-object-keys -- safe\nvar objectKeys$2 = Object.keys || function keys(O) {\n  return internalObjectKeys(O, enumBugKeys$1);\n};\n\nvar DESCRIPTORS$5 = descriptors;\nvar V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;\nvar definePropertyModule$2 = objectDefineProperty;\nvar anObject$5 = anObject$e;\nvar toIndexedObject$2 = toIndexedObject$6;\nvar objectKeys$1 = objectKeys$2;\n\n// `Object.defineProperties` method\n// https://tc39.es/ecma262/#sec-object.defineproperties\n// eslint-disable-next-line es-x/no-object-defineproperties -- safe\nobjectDefineProperties.f = DESCRIPTORS$5 && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject$5(O);\n  var props = toIndexedObject$2(Properties);\n  var keys = objectKeys$1(Properties);\n  var length = keys.length;\n  var index = 0;\n  var key;\n  while (length > index) definePropertyModule$2.f(O, key = keys[index++], props[key]);\n  return O;\n};\n\n/* global ActiveXObject -- old IE, WSH */\n\nvar anObject$4 = anObject$e;\nvar definePropertiesModule = objectDefineProperties;\nvar enumBugKeys = enumBugKeys$3;\nvar hiddenKeys = hiddenKeys$4;\nvar html = html$2;\nvar documentCreateElement$1 = documentCreateElement$2;\nvar sharedKey$1 = sharedKey$3;\n\nvar GT = '>';\nvar LT = '<';\nvar PROTOTYPE$1 = 'prototype';\nvar SCRIPT = 'script';\nvar IE_PROTO$1 = sharedKey$1('IE_PROTO');\n\nvar EmptyConstructor = function () { /* empty */ };\n\nvar scriptTag = function (content) {\n  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n};\n\n// Create object with fake `null` prototype: use ActiveX Object with cleared prototype\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\n  activeXDocument.write(scriptTag(''));\n  activeXDocument.close();\n  var temp = activeXDocument.parentWindow.Object;\n  activeXDocument = null; // avoid memory leak\n  return temp;\n};\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar NullProtoObjectViaIFrame = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement$1('iframe');\n  var JS = 'java' + SCRIPT + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  // https://github.com/zloirock/core-js/issues/475\n  iframe.src = String(JS);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(scriptTag('document.F=Object'));\n  iframeDocument.close();\n  return iframeDocument.F;\n};\n\n// Check for document.domain and active x support\n// No need to use active x approach when document.domain is not set\n// see https://github.com/es-shims/es5-shim/issues/150\n// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n// avoid IE GC bug\nvar activeXDocument;\nvar NullProtoObject = function () {\n  try {\n    activeXDocument = new ActiveXObject('htmlfile');\n  } catch (error) { /* ignore */ }\n  NullProtoObject = typeof document != 'undefined'\n    ? document.domain && activeXDocument\n      ? NullProtoObjectViaActiveX(activeXDocument) // old IE\n      : NullProtoObjectViaIFrame()\n    : NullProtoObjectViaActiveX(activeXDocument); // WSH\n  var length = enumBugKeys.length;\n  while (length--) delete NullProtoObject[PROTOTYPE$1][enumBugKeys[length]];\n  return NullProtoObject();\n};\n\nhiddenKeys[IE_PROTO$1] = true;\n\n// `Object.create` method\n// https://tc39.es/ecma262/#sec-object.create\n// eslint-disable-next-line es-x/no-object-create -- safe\nvar objectCreate = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    EmptyConstructor[PROTOTYPE$1] = anObject$4(O);\n    result = new EmptyConstructor();\n    EmptyConstructor[PROTOTYPE$1] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO$1] = O;\n  } else result = NullProtoObject();\n  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);\n};\n\nvar wellKnownSymbol$8 = wellKnownSymbol$j;\nvar create$3 = objectCreate;\nvar defineProperty$4 = objectDefineProperty.f;\n\nvar UNSCOPABLES = wellKnownSymbol$8('unscopables');\nvar ArrayPrototype = Array.prototype;\n\n// Array.prototype[@@unscopables]\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\nif (ArrayPrototype[UNSCOPABLES] == undefined) {\n  defineProperty$4(ArrayPrototype, UNSCOPABLES, {\n    configurable: true,\n    value: create$3(null)\n  });\n}\n\n// add a key to Array.prototype[@@unscopables]\nvar addToUnscopables$2 = function (key) {\n  ArrayPrototype[UNSCOPABLES][key] = true;\n};\n\nvar fails$h = fails$s;\n\nvar correctPrototypeGetter = !fails$h(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  // eslint-disable-next-line es-x/no-object-getprototypeof -- required for testing\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n\nvar hasOwn$2 = hasOwnProperty_1;\nvar isCallable$5 = isCallable$n;\nvar toObject$5 = toObject$7;\nvar sharedKey = sharedKey$3;\nvar CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;\n\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar $Object = Object;\nvar ObjectPrototype$2 = $Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.getprototypeof\n// eslint-disable-next-line es-x/no-object-getprototypeof -- safe\nvar objectGetPrototypeOf = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function (O) {\n  var object = toObject$5(O);\n  if (hasOwn$2(object, IE_PROTO)) return object[IE_PROTO];\n  var constructor = object.constructor;\n  if (isCallable$5(constructor) && object instanceof constructor) {\n    return constructor.prototype;\n  } return object instanceof $Object ? ObjectPrototype$2 : null;\n};\n\nvar fails$g = fails$s;\nvar isCallable$4 = isCallable$n;\nvar getPrototypeOf$3 = objectGetPrototypeOf;\nvar defineBuiltIn$4 = defineBuiltIn$8;\nvar wellKnownSymbol$7 = wellKnownSymbol$j;\n\nvar ITERATOR$2 = wellKnownSymbol$7('iterator');\nvar BUGGY_SAFARI_ITERATORS$1 = false;\n\n// `%IteratorPrototype%` object\n// https://tc39.es/ecma262/#sec-%iteratorprototype%-object\nvar IteratorPrototype$2, PrototypeOfArrayIteratorPrototype, arrayIterator;\n\n/* eslint-disable es-x/no-array-prototype-keys -- safe */\nif ([].keys) {\n  arrayIterator = [].keys();\n  // Safari 8 has buggy iterators w/o `next`\n  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;\n  else {\n    PrototypeOfArrayIteratorPrototype = getPrototypeOf$3(getPrototypeOf$3(arrayIterator));\n    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$2 = PrototypeOfArrayIteratorPrototype;\n  }\n}\n\nvar NEW_ITERATOR_PROTOTYPE = IteratorPrototype$2 == undefined || fails$g(function () {\n  var test = {};\n  // FF44- legacy iterators case\n  return IteratorPrototype$2[ITERATOR$2].call(test) !== test;\n});\n\nif (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$2 = {};\n\n// `%IteratorPrototype%[@@iterator]()` method\n// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator\nif (!isCallable$4(IteratorPrototype$2[ITERATOR$2])) {\n  defineBuiltIn$4(IteratorPrototype$2, ITERATOR$2, function () {\n    return this;\n  });\n}\n\nvar iteratorsCore = {\n  IteratorPrototype: IteratorPrototype$2,\n  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1\n};\n\nvar IteratorPrototype$1 = iteratorsCore.IteratorPrototype;\nvar create$2 = objectCreate;\nvar createPropertyDescriptor$2 = createPropertyDescriptor$5;\nvar setToStringTag$2 = setToStringTag$4;\nvar Iterators$2 = iterators;\n\nvar returnThis$1 = function () { return this; };\n\nvar createIteratorConstructor$1 = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {\n  var TO_STRING_TAG = NAME + ' Iterator';\n  IteratorConstructor.prototype = create$2(IteratorPrototype$1, { next: createPropertyDescriptor$2(+!ENUMERABLE_NEXT, next) });\n  setToStringTag$2(IteratorConstructor, TO_STRING_TAG, false);\n  Iterators$2[TO_STRING_TAG] = returnThis$1;\n  return IteratorConstructor;\n};\n\nvar $$8 = _export;\nvar call$8 = functionCall;\nvar FunctionName$1 = functionName;\nvar isCallable$3 = isCallable$n;\nvar createIteratorConstructor = createIteratorConstructor$1;\nvar getPrototypeOf$2 = objectGetPrototypeOf;\nvar setPrototypeOf$4 = objectSetPrototypeOf;\nvar setToStringTag$1 = setToStringTag$4;\nvar createNonEnumerableProperty$5 = createNonEnumerableProperty$8;\nvar defineBuiltIn$3 = defineBuiltIn$8;\nvar wellKnownSymbol$6 = wellKnownSymbol$j;\nvar Iterators$1 = iterators;\nvar IteratorsCore = iteratorsCore;\n\nvar PROPER_FUNCTION_NAME$2 = FunctionName$1.PROPER;\nvar CONFIGURABLE_FUNCTION_NAME$1 = FunctionName$1.CONFIGURABLE;\nvar IteratorPrototype = IteratorsCore.IteratorPrototype;\nvar BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\nvar ITERATOR$1 = wellKnownSymbol$6('iterator');\nvar KEYS = 'keys';\nvar VALUES = 'values';\nvar ENTRIES = 'entries';\n\nvar returnThis = function () { return this; };\n\nvar defineIterator$1 = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n  createIteratorConstructor(IteratorConstructor, NAME, next);\n\n  var getIterationMethod = function (KIND) {\n    if (KIND === DEFAULT && defaultIterator) return defaultIterator;\n    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];\n    switch (KIND) {\n      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };\n      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };\n      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };\n    } return function () { return new IteratorConstructor(this); };\n  };\n\n  var TO_STRING_TAG = NAME + ' Iterator';\n  var INCORRECT_VALUES_NAME = false;\n  var IterablePrototype = Iterable.prototype;\n  var nativeIterator = IterablePrototype[ITERATOR$1]\n    || IterablePrototype['@@iterator']\n    || DEFAULT && IterablePrototype[DEFAULT];\n  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\n  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n  var CurrentIteratorPrototype, methods, KEY;\n\n  // fix native\n  if (anyNativeIterator) {\n    CurrentIteratorPrototype = getPrototypeOf$2(anyNativeIterator.call(new Iterable()));\n    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\n      if (getPrototypeOf$2(CurrentIteratorPrototype) !== IteratorPrototype) {\n        if (setPrototypeOf$4) {\n          setPrototypeOf$4(CurrentIteratorPrototype, IteratorPrototype);\n        } else if (!isCallable$3(CurrentIteratorPrototype[ITERATOR$1])) {\n          defineBuiltIn$3(CurrentIteratorPrototype, ITERATOR$1, returnThis);\n        }\n      }\n      // Set @@toStringTag to native iterators\n      setToStringTag$1(CurrentIteratorPrototype, TO_STRING_TAG, true);\n    }\n  }\n\n  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF\n  if (PROPER_FUNCTION_NAME$2 && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n    if (CONFIGURABLE_FUNCTION_NAME$1) {\n      createNonEnumerableProperty$5(IterablePrototype, 'name', VALUES);\n    } else {\n      INCORRECT_VALUES_NAME = true;\n      defaultIterator = function values() { return call$8(nativeIterator, this); };\n    }\n  }\n\n  // export additional methods\n  if (DEFAULT) {\n    methods = {\n      values: getIterationMethod(VALUES),\n      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n      entries: getIterationMethod(ENTRIES)\n    };\n    if (FORCED) for (KEY in methods) {\n      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n        defineBuiltIn$3(IterablePrototype, KEY, methods[KEY]);\n      }\n    } else $$8({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);\n  }\n\n  // define iterator\n  if (IterablePrototype[ITERATOR$1] !== defaultIterator) {\n    defineBuiltIn$3(IterablePrototype, ITERATOR$1, defaultIterator, { name: DEFAULT });\n  }\n  Iterators$1[NAME] = defaultIterator;\n\n  return methods;\n};\n\nvar toIndexedObject$1 = toIndexedObject$6;\nvar addToUnscopables$1 = addToUnscopables$2;\nvar Iterators = iterators;\nvar InternalStateModule$3 = internalState;\nvar defineProperty$3 = objectDefineProperty.f;\nvar defineIterator = defineIterator$1;\nvar DESCRIPTORS$4 = descriptors;\n\nvar ARRAY_ITERATOR = 'Array Iterator';\nvar setInternalState$2 = InternalStateModule$3.set;\nvar getInternalState$4 = InternalStateModule$3.getterFor(ARRAY_ITERATOR);\n\n// `Array.prototype.entries` method\n// https://tc39.es/ecma262/#sec-array.prototype.entries\n// `Array.prototype.keys` method\n// https://tc39.es/ecma262/#sec-array.prototype.keys\n// `Array.prototype.values` method\n// https://tc39.es/ecma262/#sec-array.prototype.values\n// `Array.prototype[@@iterator]` method\n// https://tc39.es/ecma262/#sec-array.prototype-@@iterator\n// `CreateArrayIterator` internal method\n// https://tc39.es/ecma262/#sec-createarrayiterator\nvar es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {\n  setInternalState$2(this, {\n    type: ARRAY_ITERATOR,\n    target: toIndexedObject$1(iterated), // target\n    index: 0,                          // next index\n    kind: kind                         // kind\n  });\n// `%ArrayIteratorPrototype%.next` method\n// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next\n}, function () {\n  var state = getInternalState$4(this);\n  var target = state.target;\n  var kind = state.kind;\n  var index = state.index++;\n  if (!target || index >= target.length) {\n    state.target = undefined;\n    return { value: undefined, done: true };\n  }\n  if (kind == 'keys') return { value: index, done: false };\n  if (kind == 'values') return { value: target[index], done: false };\n  return { value: [index, target[index]], done: false };\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values%\n// https://tc39.es/ecma262/#sec-createunmappedargumentsobject\n// https://tc39.es/ecma262/#sec-createmappedargumentsobject\nvar values = Iterators.Arguments = Iterators.Array;\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables$1('keys');\naddToUnscopables$1('values');\naddToUnscopables$1('entries');\n\n// V8 ~ Chrome 45- bug\nif (DESCRIPTORS$4 && values.name !== 'values') try {\n  defineProperty$3(values, 'name', { value: 'values' });\n} catch (error) { /* empty */ }\n\n// iterable DOM collections\n// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\nvar domIterables = {\n  CSSRuleList: 0,\n  CSSStyleDeclaration: 0,\n  CSSValueList: 0,\n  ClientRectList: 0,\n  DOMRectList: 0,\n  DOMStringList: 0,\n  DOMTokenList: 1,\n  DataTransferItemList: 0,\n  FileList: 0,\n  HTMLAllCollection: 0,\n  HTMLCollection: 0,\n  HTMLFormElement: 0,\n  HTMLSelectElement: 0,\n  MediaList: 0,\n  MimeTypeArray: 0,\n  NamedNodeMap: 0,\n  NodeList: 1,\n  PaintRequestList: 0,\n  Plugin: 0,\n  PluginArray: 0,\n  SVGLengthList: 0,\n  SVGNumberList: 0,\n  SVGPathSegList: 0,\n  SVGPointList: 0,\n  SVGStringList: 0,\n  SVGTransformList: 0,\n  SourceBufferList: 0,\n  StyleSheetList: 0,\n  TextTrackCueList: 0,\n  TextTrackList: 0,\n  TouchList: 0\n};\n\n// in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`\nvar documentCreateElement = documentCreateElement$2;\n\nvar classList = documentCreateElement('span').classList;\nvar DOMTokenListPrototype$1 = classList && classList.constructor && classList.constructor.prototype;\n\nvar domTokenListPrototype = DOMTokenListPrototype$1 === Object.prototype ? undefined : DOMTokenListPrototype$1;\n\nvar global$b = global$t;\nvar DOMIterables = domIterables;\nvar DOMTokenListPrototype = domTokenListPrototype;\nvar ArrayIteratorMethods = es_array_iterator;\nvar createNonEnumerableProperty$4 = createNonEnumerableProperty$8;\nvar wellKnownSymbol$5 = wellKnownSymbol$j;\n\nvar ITERATOR = wellKnownSymbol$5('iterator');\nvar TO_STRING_TAG$1 = wellKnownSymbol$5('toStringTag');\nvar ArrayValues = ArrayIteratorMethods.values;\n\nvar handlePrototype = function (CollectionPrototype, COLLECTION_NAME) {\n  if (CollectionPrototype) {\n    // some Chrome versions have non-configurable methods on DOMTokenList\n    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {\n      createNonEnumerableProperty$4(CollectionPrototype, ITERATOR, ArrayValues);\n    } catch (error) {\n      CollectionPrototype[ITERATOR] = ArrayValues;\n    }\n    if (!CollectionPrototype[TO_STRING_TAG$1]) {\n      createNonEnumerableProperty$4(CollectionPrototype, TO_STRING_TAG$1, COLLECTION_NAME);\n    }\n    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {\n      // some Chrome versions have non-configurable methods on DOMTokenList\n      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {\n        createNonEnumerableProperty$4(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);\n      } catch (error) {\n        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];\n      }\n    }\n  }\n};\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  handlePrototype(global$b[COLLECTION_NAME] && global$b[COLLECTION_NAME].prototype, COLLECTION_NAME);\n}\n\nhandlePrototype(DOMTokenListPrototype, 'DOMTokenList');\n\nclass Logger {\n  constructor(namespace) {\n    this.namespace = namespace;\n  }\n  emit(method, ...params) {\n    if (!Logger.debug) {\n      return;\n    }\n    if (this.namespace && method !== \"error\") {\n      // eslint-disable-next-line no-console\n      console[method](this.namespace, ...params);\n      return;\n    }\n    // eslint-disable-next-line no-console\n    console[method](...params);\n  }\n  log(...params) {\n    this.emit(\"log\", ...params);\n  }\n  info(...params) {\n    this.emit(\"info\", ...params);\n  }\n  warn(...params) {\n    this.emit(\"warn\", ...params);\n  }\n  error(...params) {\n    this.emit(\"error\", ...params);\n  }\n}\nLogger.debug = false;\nconst logger = new Logger();\n\nvar $$7 = _export;\nvar $includes = arrayIncludes.includes;\nvar fails$f = fails$s;\nvar addToUnscopables = addToUnscopables$2;\n\n// FF99+ bug\nvar BROKEN_ON_SPARSE = fails$f(function () {\n  return !Array(1).includes();\n});\n\n// `Array.prototype.includes` method\n// https://tc39.es/ecma262/#sec-array.prototype.includes\n$$7({ target: 'Array', proto: true, forced: BROKEN_ON_SPARSE }, {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('includes');\n\nvar isObject$5 = isObject$d;\nvar classof$6 = classofRaw$1;\nvar wellKnownSymbol$4 = wellKnownSymbol$j;\n\nvar MATCH$1 = wellKnownSymbol$4('match');\n\n// `IsRegExp` abstract operation\n// https://tc39.es/ecma262/#sec-isregexp\nvar isRegexp = function (it) {\n  var isRegExp;\n  return isObject$5(it) && ((isRegExp = it[MATCH$1]) !== undefined ? !!isRegExp : classof$6(it) == 'RegExp');\n};\n\nvar isRegExp$1 = isRegexp;\n\nvar $TypeError$3 = TypeError;\n\nvar notARegexp = function (it) {\n  if (isRegExp$1(it)) {\n    throw $TypeError$3(\"The method doesn't accept regular expressions\");\n  } return it;\n};\n\nvar classof$5 = classof$9;\n\nvar $String = String;\n\nvar toString$5 = function (argument) {\n  if (classof$5(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');\n  return $String(argument);\n};\n\nvar wellKnownSymbol$3 = wellKnownSymbol$j;\n\nvar MATCH = wellKnownSymbol$3('match');\n\nvar correctIsRegexpLogic = function (METHOD_NAME) {\n  var regexp = /./;\n  try {\n    '/./'[METHOD_NAME](regexp);\n  } catch (error1) {\n    try {\n      regexp[MATCH] = false;\n      return '/./'[METHOD_NAME](regexp);\n    } catch (error2) { /* empty */ }\n  } return false;\n};\n\nvar $$6 = _export;\nvar uncurryThis$b = functionUncurryThis;\nvar notARegExp = notARegexp;\nvar requireObjectCoercible$3 = requireObjectCoercible$6;\nvar toString$4 = toString$5;\nvar correctIsRegExpLogic = correctIsRegexpLogic;\n\nvar stringIndexOf = uncurryThis$b(''.indexOf);\n\n// `String.prototype.includes` method\n// https://tc39.es/ecma262/#sec-string.prototype.includes\n$$6({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~stringIndexOf(\n      toString$4(requireObjectCoercible$3(this)),\n      toString$4(notARegExp(searchString)),\n      arguments.length > 1 ? arguments[1] : undefined\n    );\n  }\n});\n\n// a string of all valid unicode whitespaces\nvar whitespaces$2 = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002' +\n  '\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n\nvar uncurryThis$a = functionUncurryThis;\nvar requireObjectCoercible$2 = requireObjectCoercible$6;\nvar toString$3 = toString$5;\nvar whitespaces$1 = whitespaces$2;\n\nvar replace$1 = uncurryThis$a(''.replace);\nvar whitespace = '[' + whitespaces$1 + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod$3 = function (TYPE) {\n  return function ($this) {\n    var string = toString$3(requireObjectCoercible$2($this));\n    if (TYPE & 1) string = replace$1(string, ltrim, '');\n    if (TYPE & 2) string = replace$1(string, rtrim, '');\n    return string;\n  };\n};\n\nvar stringTrim = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.es/ecma262/#sec-string.prototype.trimstart\n  start: createMethod$3(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.es/ecma262/#sec-string.prototype.trimend\n  end: createMethod$3(2),\n  // `String.prototype.trim` method\n  // https://tc39.es/ecma262/#sec-string.prototype.trim\n  trim: createMethod$3(3)\n};\n\nvar PROPER_FUNCTION_NAME$1 = functionName.PROPER;\nvar fails$e = fails$s;\nvar whitespaces = whitespaces$2;\n\nvar non = '\\u200B\\u0085\\u180E';\n\n// check that a method works with the correct list\n// of whitespaces and has a correct name\nvar stringTrimForced = function (METHOD_NAME) {\n  return fails$e(function () {\n    return !!whitespaces[METHOD_NAME]()\n      || non[METHOD_NAME]() !== non\n      || (PROPER_FUNCTION_NAME$1 && whitespaces[METHOD_NAME].name !== METHOD_NAME);\n  });\n};\n\nvar $$5 = _export;\nvar $trim = stringTrim.trim;\nvar forcedStringTrimMethod = stringTrimForced;\n\n// `String.prototype.trim` method\n// https://tc39.es/ecma262/#sec-string.prototype.trim\n$$5({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {\n  trim: function trim() {\n    return $trim(this);\n  }\n});\n\nvar DESCRIPTORS$3 = descriptors;\nvar uncurryThis$9 = functionUncurryThis;\nvar call$7 = functionCall;\nvar fails$d = fails$s;\nvar objectKeys = objectKeys$2;\nvar getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;\nvar propertyIsEnumerableModule = objectPropertyIsEnumerable;\nvar toObject$4 = toObject$7;\nvar IndexedObject$2 = indexedObject;\n\n// eslint-disable-next-line es-x/no-object-assign -- safe\nvar $assign = Object.assign;\n// eslint-disable-next-line es-x/no-object-defineproperty -- required for testing\nvar defineProperty$2 = Object.defineProperty;\nvar concat = uncurryThis$9([].concat);\n\n// `Object.assign` method\n// https://tc39.es/ecma262/#sec-object.assign\nvar objectAssign = !$assign || fails$d(function () {\n  // should have correct order of operations (Edge bug)\n  if (DESCRIPTORS$3 && $assign({ b: 1 }, $assign(defineProperty$2({}, 'a', {\n    enumerable: true,\n    get: function () {\n      defineProperty$2(this, 'b', {\n        value: 3,\n        enumerable: false\n      });\n    }\n  }), { b: 2 })).b !== 1) return true;\n  // should work with symbols and should have deterministic property order (V8 bug)\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line es-x/no-symbol -- safe\n  var symbol = Symbol();\n  var alphabet = 'abcdefghijklmnopqrst';\n  A[symbol] = 7;\n  alphabet.split('').forEach(function (chr) { B[chr] = chr; });\n  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`\n  var T = toObject$4(target);\n  var argumentsLength = arguments.length;\n  var index = 1;\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  var propertyIsEnumerable = propertyIsEnumerableModule.f;\n  while (argumentsLength > index) {\n    var S = IndexedObject$2(arguments[index++]);\n    var keys = getOwnPropertySymbols ? concat(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) {\n      key = keys[j++];\n      if (!DESCRIPTORS$3 || call$7(propertyIsEnumerable, S, key)) T[key] = S[key];\n    }\n  } return T;\n} : $assign;\n\nvar $$4 = _export;\nvar assign = objectAssign;\n\n// `Object.assign` method\n// https://tc39.es/ecma262/#sec-object.assign\n// eslint-disable-next-line es-x/no-object-assign -- required for testing\n$$4({ target: 'Object', stat: true, arity: 2, forced: Object.assign !== assign }, {\n  assign: assign\n});\n\nclass EventEmitter {\n  constructor() {\n    this.emitter = new events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();\n  }\n  on(eventName, callback) {\n    this.emitter.on(eventName, callback);\n    return {\n      remove: () => this.emitter.off(eventName, callback)\n    };\n  }\n  off(eventName, callback) {\n    this.emitter.off(eventName, callback);\n  }\n  emit(eventName, event) {\n    this.emitter.emit(eventName, event);\n  }\n}\n\nconst PACKAGE_NAME = \"near-wallet-selector\";\nconst RECENTLY_SIGNED_IN_WALLETS = \"recentlySignedInWallets\";\nconst CONTRACT = \"contract\";\nconst PENDING_CONTRACT = \"contract:pending\";\nconst SELECTED_WALLET_ID = `selectedWalletId`;\nconst PENDING_SELECTED_WALLET_ID = `selectedWalletId:pending`;\n\nclass WalletModules {\n  constructor({\n    factories,\n    storage,\n    options,\n    store,\n    emitter,\n    provider\n  }) {\n    this.factories = factories;\n    this.storage = storage;\n    this.options = options;\n    this.store = store;\n    this.emitter = emitter;\n    this.provider = provider;\n    this.modules = [];\n    this.instances = {};\n  }\n  validateWallet(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let accounts = [];\n      const wallet = yield this.getWallet(id);\n      if (wallet) {\n        // Ensure our persistent state aligns with the selected wallet.\n        // For example a wallet is selected, but it returns no accounts (not signed in).\n        accounts = yield wallet.getAccounts().catch(err => {\n          logger.log(`Failed to validate ${wallet.id} during setup`);\n          logger.error(err);\n          return [];\n        });\n      }\n      return accounts;\n    });\n  }\n  resolveStorageState() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const jsonStorage = new JsonStorage(this.storage, PACKAGE_NAME);\n      const pendingSelectedWalletId = yield jsonStorage.getItem(PENDING_SELECTED_WALLET_ID);\n      const pendingContract = yield jsonStorage.getItem(PENDING_CONTRACT);\n      if (pendingSelectedWalletId && pendingContract) {\n        const _accounts = yield this.validateWallet(pendingSelectedWalletId);\n        yield jsonStorage.removeItem(PENDING_SELECTED_WALLET_ID);\n        yield jsonStorage.removeItem(PENDING_CONTRACT);\n        if (_accounts.length) {\n          const {\n            selectedWalletId: _selectedWalletId\n          } = this.store.getState();\n          const selectedWallet = yield this.getWallet(_selectedWalletId);\n          if (selectedWallet && pendingSelectedWalletId !== _selectedWalletId) {\n            yield selectedWallet.signOut().catch(err => {\n              logger.log(\"Failed to sign out existing wallet\");\n              logger.error(err);\n            });\n          }\n          const recentlySignedInWalletsFromPending = yield this.setWalletAsRecentlySignedIn(pendingSelectedWalletId);\n          return {\n            accounts: _accounts,\n            contract: pendingContract,\n            selectedWalletId: pendingSelectedWalletId,\n            recentlySignedInWallets: recentlySignedInWalletsFromPending\n          };\n        }\n      }\n      const {\n        contract,\n        selectedWalletId\n      } = this.store.getState();\n      const accounts = yield this.validateWallet(selectedWalletId);\n      const recentlySignedInWallets = yield jsonStorage.getItem(RECENTLY_SIGNED_IN_WALLETS);\n      if (!accounts.length) {\n        return {\n          accounts: [],\n          contract: null,\n          selectedWalletId: null,\n          recentlySignedInWallets: recentlySignedInWallets || []\n        };\n      }\n      return {\n        accounts,\n        contract,\n        selectedWalletId,\n        recentlySignedInWallets: recentlySignedInWallets || []\n      };\n    });\n  }\n  setWalletAsRecentlySignedIn(walletId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const jsonStorage = new JsonStorage(this.storage, PACKAGE_NAME);\n      let recentlySignedInWallets = yield jsonStorage.getItem(RECENTLY_SIGNED_IN_WALLETS);\n      if (!recentlySignedInWallets) {\n        recentlySignedInWallets = [];\n      }\n      if (!recentlySignedInWallets.includes(walletId)) {\n        recentlySignedInWallets.unshift(walletId);\n        recentlySignedInWallets = recentlySignedInWallets.slice(0, 5);\n        yield jsonStorage.setItem(RECENTLY_SIGNED_IN_WALLETS, recentlySignedInWallets);\n      }\n      return recentlySignedInWallets;\n    });\n  }\n  signOutWallet(walletId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wallet = yield this.getWallet(walletId);\n      yield wallet.signOut().catch(err => {\n        logger.log(`Failed to sign out ${wallet.id}`);\n        logger.error(err);\n        // At least clean up state on our side.\n        this.onWalletSignedOut(wallet.id);\n      });\n    });\n  }\n  onWalletSignedIn(walletId, {\n    accounts,\n    contractId,\n    methodNames\n  }) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        selectedWalletId\n      } = this.store.getState();\n      const jsonStorage = new JsonStorage(this.storage, PACKAGE_NAME);\n      const contract = {\n        contractId,\n        methodNames\n      };\n      if (!accounts.length) {\n        const module = this.getModule(walletId);\n        // We can't guarantee the user will actually sign in with browser wallets.\n        // Best we can do is set in storage and validate on init.\n        if (module.type === \"browser\") {\n          yield jsonStorage.setItem(PENDING_SELECTED_WALLET_ID, walletId);\n          yield jsonStorage.setItem(PENDING_CONTRACT, contract);\n        }\n        return;\n      }\n      if (selectedWalletId && selectedWalletId !== walletId) {\n        yield this.signOutWallet(selectedWalletId);\n      }\n      const recentlySignedInWallets = yield this.setWalletAsRecentlySignedIn(walletId);\n      this.store.dispatch({\n        type: \"WALLET_CONNECTED\",\n        payload: {\n          walletId,\n          contract,\n          accounts,\n          recentlySignedInWallets\n        }\n      });\n      this.emitter.emit(\"signedIn\", {\n        walletId,\n        contractId,\n        methodNames,\n        accounts\n      });\n    });\n  }\n  onWalletSignedOut(walletId) {\n    this.store.dispatch({\n      type: \"WALLET_DISCONNECTED\",\n      payload: {\n        walletId\n      }\n    });\n    this.emitter.emit(\"signedOut\", {\n      walletId\n    });\n  }\n  setupWalletEmitter(module) {\n    const emitter = new EventEmitter();\n    emitter.on(\"signedOut\", () => {\n      this.onWalletSignedOut(module.id);\n    });\n    emitter.on(\"signedIn\", event => {\n      this.onWalletSignedIn(module.id, event);\n    });\n    emitter.on(\"accountsChanged\", ({\n      accounts\n    }) => __awaiter(this, void 0, void 0, function* () {\n      this.emitter.emit(\"accountsChanged\", {\n        walletId: module.id,\n        accounts\n      });\n      if (!accounts.length) {\n        return this.signOutWallet(module.id);\n      }\n      this.store.dispatch({\n        type: \"ACCOUNTS_CHANGED\",\n        payload: {\n          walletId: module.id,\n          accounts\n        }\n      });\n    }));\n    emitter.on(\"networkChanged\", ({\n      networkId\n    }) => {\n      this.emitter.emit(\"networkChanged\", {\n        walletId: module.id,\n        networkId\n      });\n    });\n    emitter.on(\"uriChanged\", ({\n      uri\n    }) => {\n      this.emitter.emit(\"uriChanged\", {\n        walletId: module.id,\n        uri\n      });\n    });\n    return emitter;\n  }\n  validateSignMessageParams({\n    message,\n    nonce,\n    recipient\n  }) {\n    if (!message || message.trim() === \"\") {\n      throw new Error(\"Invalid message. It must be a non-empty string.\");\n    }\n    if (!Buffer.isBuffer(nonce) || nonce.length !== 32) {\n      throw new Error(\"Invalid nonce. It must be a Buffer with a length of 32 bytes.\");\n    }\n    if (!recipient || recipient.trim() === \"\") {\n      throw new Error(\"Invalid recipient. It must be a non-empty string.\");\n    }\n  }\n  decorateWallet(wallet) {\n    const _signIn = wallet.signIn;\n    const _signOut = wallet.signOut;\n    const _signMessage = wallet.signMessage;\n    wallet.signIn = params => __awaiter(this, void 0, void 0, function* () {\n      const accounts = yield _signIn(params);\n      const {\n        contractId,\n        methodNames = []\n      } = params;\n      yield this.onWalletSignedIn(wallet.id, {\n        accounts,\n        contractId,\n        methodNames\n      });\n      return accounts;\n    });\n    wallet.signOut = () => __awaiter(this, void 0, void 0, function* () {\n      yield _signOut();\n      this.onWalletSignedOut(wallet.id);\n    });\n    wallet.signMessage = params => __awaiter(this, void 0, void 0, function* () {\n      if (_signMessage === undefined) {\n        throw Error(`The signMessage method is not supported by ${wallet.metadata.name}`);\n      }\n      this.validateSignMessageParams(params);\n      return yield _signMessage(params);\n    });\n    return wallet;\n  }\n  setupInstance(module) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!module.metadata.available) {\n        const message = module.type === \"injected\" ? \"not installed\" : \"not available\";\n        throw Error(`${module.metadata.name} is ${message}`);\n      }\n      const wallet = Object.assign({\n        id: module.id,\n        type: module.type,\n        metadata: module.metadata\n      }, yield module.init({\n        id: module.id,\n        type: module.type,\n        metadata: module.metadata,\n        options: this.options,\n        store: this.store.toReadOnly(),\n        provider: this.provider,\n        emitter: this.setupWalletEmitter(module),\n        logger: new Logger(module.id),\n        storage: new JsonStorage(this.storage, [PACKAGE_NAME, module.id])\n      }));\n      return this.decorateWallet(wallet);\n    });\n  }\n  getModule(id) {\n    return this.modules.find(x => x.id === id);\n  }\n  getWallet(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const module = this.getModule(id);\n      if (!module) {\n        return null;\n      }\n      const {\n        selectedWalletId\n      } = this.store.getState();\n      // If user uninstalled/removed a wallet which was previously signed in with\n      // best we can do is clean up state on our side.\n      if (!module.metadata.available && selectedWalletId) {\n        this.onWalletSignedOut(selectedWalletId);\n        return null;\n      }\n      return yield module.wallet();\n    });\n  }\n  setup() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const modules = [];\n      for (let i = 0; i < this.factories.length; i += 1) {\n        const module = yield this.factories[i]({\n          options: this.options\n        }).catch(err => {\n          logger.log(\"Failed to setup module\");\n          logger.error(err);\n          return null;\n        });\n        // Filter out wallets that aren't available.\n        if (!module) {\n          continue;\n        }\n        // Skip duplicated module.\n        if (modules.some(x => x.id === module.id)) {\n          continue;\n        }\n        modules.push({\n          id: module.id,\n          type: module.type,\n          metadata: module.metadata,\n          wallet: () => __awaiter(this, void 0, void 0, function* () {\n            let instance = this.instances[module.id];\n            if (instance) {\n              return instance;\n            }\n            instance = yield this.setupInstance(module);\n            this.instances[module.id] = instance;\n            return instance;\n          })\n        });\n      }\n      this.modules = modules;\n      const {\n        accounts,\n        contract,\n        selectedWalletId,\n        recentlySignedInWallets\n      } = yield this.resolveStorageState();\n      this.store.dispatch({\n        type: \"SETUP_WALLET_MODULES\",\n        payload: {\n          modules,\n          accounts,\n          contract,\n          selectedWalletId,\n          recentlySignedInWallets\n        }\n      });\n      for (let i = 0; i < this.modules.length; i++) {\n        if (this.modules[i].type !== \"instant-link\") {\n          continue;\n        }\n        const wallet = yield this.modules[i].wallet();\n        if (!wallet.metadata.runOnStartup) {\n          continue;\n        }\n        try {\n          yield wallet.signIn({\n            contractId: wallet.getContractId()\n          });\n        } catch (err) {\n          logger.error(\"Failed to sign in to wallet. \" + err);\n        }\n      }\n    });\n  }\n}\n\nconst getNetworkPreset = networkId => {\n  switch (networkId) {\n    case \"mainnet\":\n      return {\n        networkId,\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        helperUrl: \"https://helper.mainnet.near.org\",\n        explorerUrl: \"https://explorer.near.org\",\n        indexerUrl: \"https://api.kitwallet.app\"\n      };\n    case \"testnet\":\n      return {\n        networkId,\n        nodeUrl: \"https://rpc.testnet.near.org\",\n        helperUrl: \"https://helper.testnet.near.org\",\n        explorerUrl: \"https://explorer.testnet.near.org\",\n        indexerUrl: \"https://testnet-api.kitwallet.app\"\n      };\n    default:\n      throw Error(`Failed to find config for: '${networkId}'`);\n  }\n};\nconst resolveNetwork = network => {\n  return typeof network === \"string\" ? getNetworkPreset(network) : network;\n};\nconst resolveOptions = params => {\n  const options = {\n    languageCode: params.languageCode || undefined,\n    network: resolveNetwork(params.network),\n    debug: params.debug || false,\n    optimizeWalletOrder: params.optimizeWalletOrder === false ? false : true,\n    randomizeWalletOrder: params.randomizeWalletOrder || false,\n    relayerUrl: params.relayerUrl || undefined\n  };\n  return {\n    options,\n    storage: params.storage || new WebStorageService()\n  };\n};\n\nconst reducer = (state, action) => {\n  logger.log(\"Store Action\", action);\n  switch (action.type) {\n    case \"SETUP_WALLET_MODULES\":\n      {\n        const {\n          modules,\n          accounts,\n          contract,\n          selectedWalletId,\n          recentlySignedInWallets\n        } = action.payload;\n        const accountStates = accounts.map((account, i) => {\n          return Object.assign(Object.assign({}, account), {\n            active: i === 0\n          });\n        });\n        return Object.assign(Object.assign({}, state), {\n          modules,\n          accounts: accountStates,\n          contract,\n          selectedWalletId,\n          recentlySignedInWallets\n        });\n      }\n    case \"WALLET_CONNECTED\":\n      {\n        const {\n          walletId,\n          contract,\n          accounts,\n          recentlySignedInWallets\n        } = action.payload;\n        if (!accounts.length) {\n          return state;\n        }\n        const activeAccountIndex = state.accounts.findIndex(account => account.active);\n        const accountStates = accounts.map((account, i) => {\n          return Object.assign(Object.assign({}, account), {\n            active: i === (activeAccountIndex > -1 ? activeAccountIndex : 0)\n          });\n        });\n        return Object.assign(Object.assign({}, state), {\n          contract,\n          accounts: accountStates,\n          selectedWalletId: walletId,\n          recentlySignedInWallets\n        });\n      }\n    case \"WALLET_DISCONNECTED\":\n      {\n        const {\n          walletId\n        } = action.payload;\n        if (walletId !== state.selectedWalletId) {\n          return state;\n        }\n        return Object.assign(Object.assign({}, state), {\n          contract: null,\n          accounts: [],\n          selectedWalletId: null\n        });\n      }\n    case \"ACCOUNTS_CHANGED\":\n      {\n        const {\n          walletId,\n          accounts\n        } = action.payload;\n        if (walletId !== state.selectedWalletId) {\n          return state;\n        }\n        const activeAccount = state.accounts.find(account => account.active);\n        const isActiveAccountRemoved = !accounts.some(account => account.accountId === (activeAccount === null || activeAccount === void 0 ? void 0 : activeAccount.accountId));\n        const accountStates = accounts.map((account, i) => {\n          return Object.assign(Object.assign({}, account), {\n            active: isActiveAccountRemoved ? i === 0 : account.accountId === (activeAccount === null || activeAccount === void 0 ? void 0 : activeAccount.accountId)\n          });\n        });\n        return Object.assign(Object.assign({}, state), {\n          accounts: accountStates\n        });\n      }\n    case \"SET_ACTIVE_ACCOUNT\":\n      {\n        const {\n          accountId\n        } = action.payload;\n        const accountStates = state.accounts.map(account => {\n          return Object.assign(Object.assign({}, account), {\n            active: account.accountId === accountId\n          });\n        });\n        return Object.assign(Object.assign({}, state), {\n          accounts: accountStates\n        });\n      }\n    default:\n      return state;\n  }\n};\nconst createStore = storage => __awaiter(void 0, void 0, void 0, function* () {\n  const jsonStorage = new JsonStorage(storage, PACKAGE_NAME);\n  const initialState = {\n    modules: [],\n    accounts: [],\n    contract: yield jsonStorage.getItem(CONTRACT),\n    selectedWalletId: yield jsonStorage.getItem(SELECTED_WALLET_ID),\n    recentlySignedInWallets: (yield jsonStorage.getItem(RECENTLY_SIGNED_IN_WALLETS)) || []\n  };\n  const state$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject(initialState);\n  const actions$ = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Subject();\n  actions$.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__.scan)(reducer, initialState)).subscribe(state$);\n  const syncStorage = (prevState, state, storageKey, property) => __awaiter(void 0, void 0, void 0, function* () {\n    if (state[property] === prevState[property]) {\n      return;\n    }\n    if (state[property]) {\n      yield jsonStorage.setItem(storageKey, state[property]);\n      return;\n    }\n    yield jsonStorage.removeItem(storageKey);\n  });\n  let prevState = state$.getValue();\n  state$.subscribe(state => {\n    syncStorage(prevState, state, SELECTED_WALLET_ID, \"selectedWalletId\");\n    syncStorage(prevState, state, CONTRACT, \"contract\");\n    syncStorage(prevState, state, RECENTLY_SIGNED_IN_WALLETS, \"recentlySignedInWallets\");\n    prevState = state;\n  });\n  return {\n    observable: state$,\n    getState: () => state$.getValue(),\n    dispatch: action => actions$.next(action),\n    toReadOnly: () => ({\n      getState: () => state$.getValue(),\n      observable: state$.asObservable()\n    })\n  };\n});\n\nlet walletSelectorInstance = null;\nconst createSelector = (options, store, walletModules, emitter) => {\n  return {\n    options,\n    store: store.toReadOnly(),\n    wallet: id => __awaiter(void 0, void 0, void 0, function* () {\n      const {\n        selectedWalletId\n      } = store.getState();\n      const wallet = yield walletModules.getWallet(id || selectedWalletId);\n      if (!wallet) {\n        if (id) {\n          throw new Error(\"Invalid wallet id\");\n        }\n        throw new Error(\"No wallet selected\");\n      }\n      return wallet;\n    }),\n    setActiveAccount: accountId => {\n      const {\n        accounts\n      } = store.getState();\n      if (!accounts.some(account => account.accountId === accountId)) {\n        throw new Error(\"Invalid account id\");\n      }\n      store.dispatch({\n        type: \"SET_ACTIVE_ACCOUNT\",\n        payload: {\n          accountId\n        }\n      });\n    },\n    isSignedIn() {\n      const {\n        accounts\n      } = store.getState();\n      return Boolean(accounts.length);\n    },\n    on: (eventName, callback) => {\n      return emitter.on(eventName, callback);\n    },\n    off: (eventName, callback) => {\n      emitter.off(eventName, callback);\n    }\n  };\n};\n/**\r\n * Initiates a wallet selector instance\r\n * @param {WalletSelectorParams} params Selector parameters (network, modules...)\r\n * @returns {Promise<WalletSelector>} Returns a WalletSelector object\r\n */\nconst setupWalletSelector = params => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    options,\n    storage\n  } = resolveOptions(params);\n  Logger.debug = options.debug;\n  const emitter = new EventEmitter();\n  const store = yield createStore(storage);\n  const walletModules = new WalletModules({\n    factories: params.modules,\n    storage,\n    options,\n    store,\n    emitter,\n    provider: new Provider(options.network.nodeUrl)\n  });\n  yield walletModules.setup();\n  if (params.allowMultipleSelectors) {\n    return createSelector(options, store, walletModules, emitter);\n  }\n  if (!walletSelectorInstance) {\n    walletSelectorInstance = createSelector(options, store, walletModules, emitter);\n  }\n  return walletSelectorInstance;\n});\n\nconst wait = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\nconst poll = (cb, interval, remaining) => __awaiter(void 0, void 0, void 0, function* () {\n  const result = cb();\n  if (result) {\n    return result;\n  }\n  if (!remaining) {\n    throw new Error(\"Exceeded timeout\");\n  }\n  return wait(interval).then(() => poll(cb, interval, remaining - 1));\n});\nconst waitFor = (cb, opts = {}) => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    timeout = 100,\n    interval = 50\n  } = opts;\n  return Promise.race([wait(timeout).then(() => {\n    throw new Error(\"Exceeded timeout\");\n  }), poll(cb, interval, Math.floor(timeout / interval))]);\n});\n\nconst getActiveAccount = state => {\n  return state.accounts.find(account => account.active) || null;\n};\n\nvar aCallable$1 = aCallable$9;\nvar toObject$3 = toObject$7;\nvar IndexedObject$1 = indexedObject;\nvar lengthOfArrayLike$5 = lengthOfArrayLike$8;\n\nvar $TypeError$2 = TypeError;\n\n// `Array.prototype.{ reduce, reduceRight }` methods implementation\nvar createMethod$2 = function (IS_RIGHT) {\n  return function (that, callbackfn, argumentsLength, memo) {\n    aCallable$1(callbackfn);\n    var O = toObject$3(that);\n    var self = IndexedObject$1(O);\n    var length = lengthOfArrayLike$5(O);\n    var index = IS_RIGHT ? length - 1 : 0;\n    var i = IS_RIGHT ? -1 : 1;\n    if (argumentsLength < 2) while (true) {\n      if (index in self) {\n        memo = self[index];\n        index += i;\n        break;\n      }\n      index += i;\n      if (IS_RIGHT ? index < 0 : length <= index) {\n        throw $TypeError$2('Reduce of empty array with no initial value');\n      }\n    }\n    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {\n      memo = callbackfn(memo, self[index], index, O);\n    }\n    return memo;\n  };\n};\n\nvar arrayReduce = {\n  // `Array.prototype.reduce` method\n  // https://tc39.es/ecma262/#sec-array.prototype.reduce\n  left: createMethod$2(false),\n  // `Array.prototype.reduceRight` method\n  // https://tc39.es/ecma262/#sec-array.prototype.reduceright\n  right: createMethod$2(true)\n};\n\nvar fails$c = fails$s;\n\nvar arrayMethodIsStrict$1 = function (METHOD_NAME, argument) {\n  var method = [][METHOD_NAME];\n  return !!method && fails$c(function () {\n    // eslint-disable-next-line no-useless-call -- required for testing\n    method.call(null, argument || function () { return 1; }, 1);\n  });\n};\n\nvar $$3 = _export;\nvar $reduce = arrayReduce.left;\nvar arrayMethodIsStrict = arrayMethodIsStrict$1;\nvar CHROME_VERSION = engineV8Version;\nvar IS_NODE = engineIsNode;\n\nvar STRICT_METHOD = arrayMethodIsStrict('reduce');\n// Chrome 80-82 has a critical bug\n// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982\nvar CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;\n\n// `Array.prototype.reduce` method\n// https://tc39.es/ecma262/#sec-array.prototype.reduce\n$$3({ target: 'Array', proto: true, forced: !STRICT_METHOD || CHROME_BUG }, {\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    var length = arguments.length;\n    return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : undefined);\n  }\n});\n\nvar anObject$3 = anObject$e;\n\n// `RegExp.prototype.flags` getter implementation\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags\nvar regexpFlags$1 = function () {\n  var that = anObject$3(this);\n  var result = '';\n  if (that.hasIndices) result += 'd';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.dotAll) result += 's';\n  if (that.unicode) result += 'u';\n  if (that.unicodeSets) result += 'v';\n  if (that.sticky) result += 'y';\n  return result;\n};\n\nvar fails$b = fails$s;\nvar global$a = global$t;\n\n// babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError\nvar $RegExp$2 = global$a.RegExp;\n\nvar UNSUPPORTED_Y$2 = fails$b(function () {\n  var re = $RegExp$2('a', 'y');\n  re.lastIndex = 2;\n  return re.exec('abcd') != null;\n});\n\n// UC Browser bug\n// https://github.com/zloirock/core-js/issues/1008\nvar MISSED_STICKY = UNSUPPORTED_Y$2 || fails$b(function () {\n  return !$RegExp$2('a', 'y').sticky;\n});\n\nvar BROKEN_CARET = UNSUPPORTED_Y$2 || fails$b(function () {\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687\n  var re = $RegExp$2('^r', 'gy');\n  re.lastIndex = 2;\n  return re.exec('str') != null;\n});\n\nvar regexpStickyHelpers = {\n  BROKEN_CARET: BROKEN_CARET,\n  MISSED_STICKY: MISSED_STICKY,\n  UNSUPPORTED_Y: UNSUPPORTED_Y$2\n};\n\nvar fails$a = fails$s;\nvar global$9 = global$t;\n\n// babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError\nvar $RegExp$1 = global$9.RegExp;\n\nvar regexpUnsupportedDotAll = fails$a(function () {\n  var re = $RegExp$1('.', 's');\n  return !(re.dotAll && re.exec('\\n') && re.flags === 's');\n});\n\nvar fails$9 = fails$s;\nvar global$8 = global$t;\n\n// babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError\nvar $RegExp = global$8.RegExp;\n\nvar regexpUnsupportedNcg = fails$9(function () {\n  var re = $RegExp('(?<a>b)', 'g');\n  return re.exec('b').groups.a !== 'b' ||\n    'b'.replace(re, '$<a>c') !== 'bc';\n});\n\n/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */\n/* eslint-disable regexp/no-useless-quantifier -- testing */\nvar call$6 = functionCall;\nvar uncurryThis$8 = functionUncurryThis;\nvar toString$2 = toString$5;\nvar regexpFlags = regexpFlags$1;\nvar stickyHelpers$1 = regexpStickyHelpers;\nvar shared = shared$4.exports;\nvar create$1 = objectCreate;\nvar getInternalState$3 = internalState.get;\nvar UNSUPPORTED_DOT_ALL = regexpUnsupportedDotAll;\nvar UNSUPPORTED_NCG = regexpUnsupportedNcg;\n\nvar nativeReplace = shared('native-string-replace', String.prototype.replace);\nvar nativeExec = RegExp.prototype.exec;\nvar patchedExec = nativeExec;\nvar charAt$2 = uncurryThis$8(''.charAt);\nvar indexOf = uncurryThis$8(''.indexOf);\nvar replace = uncurryThis$8(''.replace);\nvar stringSlice$2 = uncurryThis$8(''.slice);\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/;\n  var re2 = /b*/g;\n  call$6(nativeExec, re1, 'a');\n  call$6(nativeExec, re2, 'a');\n  return re1.lastIndex !== 0 || re2.lastIndex !== 0;\n})();\n\nvar UNSUPPORTED_Y$1 = stickyHelpers$1.BROKEN_CARET;\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$1 || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;\n\nif (PATCH) {\n  patchedExec = function exec(string) {\n    var re = this;\n    var state = getInternalState$3(re);\n    var str = toString$2(string);\n    var raw = state.raw;\n    var result, reCopy, lastIndex, match, i, object, group;\n\n    if (raw) {\n      raw.lastIndex = re.lastIndex;\n      result = call$6(patchedExec, raw, str);\n      re.lastIndex = raw.lastIndex;\n      return result;\n    }\n\n    var groups = state.groups;\n    var sticky = UNSUPPORTED_Y$1 && re.sticky;\n    var flags = call$6(regexpFlags, re);\n    var source = re.source;\n    var charsAdded = 0;\n    var strCopy = str;\n\n    if (sticky) {\n      flags = replace(flags, 'y', '');\n      if (indexOf(flags, 'g') === -1) {\n        flags += 'g';\n      }\n\n      strCopy = stringSlice$2(str, re.lastIndex);\n      // Support anchored sticky behavior.\n      if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt$2(str, re.lastIndex - 1) !== '\\n')) {\n        source = '(?: ' + source + ')';\n        strCopy = ' ' + strCopy;\n        charsAdded++;\n      }\n      // ^(? + rx + ) is needed, in combination with some str slicing, to\n      // simulate the 'y' flag.\n      reCopy = new RegExp('^(?:' + source + ')', flags);\n    }\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + source + '$(?!\\\\s)', flags);\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;\n\n    match = call$6(nativeExec, sticky ? reCopy : re, strCopy);\n\n    if (sticky) {\n      if (match) {\n        match.input = stringSlice$2(match.input, charsAdded);\n        match[0] = stringSlice$2(match[0], charsAdded);\n        match.index = re.lastIndex;\n        re.lastIndex += match[0].length;\n      } else re.lastIndex = 0;\n    } else if (UPDATES_LAST_INDEX_WRONG && match) {\n      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      call$6(nativeReplace, match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    if (match && groups) {\n      match.groups = object = create$1(null);\n      for (i = 0; i < groups.length; i++) {\n        group = groups[i];\n        object[group[0]] = match[group[1]];\n      }\n    }\n\n    return match;\n  };\n}\n\nvar regexpExec$3 = patchedExec;\n\nvar $$2 = _export;\nvar exec$1 = regexpExec$3;\n\n// `RegExp.prototype.exec` method\n// https://tc39.es/ecma262/#sec-regexp.prototype.exec\n$$2({ target: 'RegExp', proto: true, forced: /./.exec !== exec$1 }, {\n  exec: exec$1\n});\n\n/* eslint-disable no-useless-escape */\n// https://github.com/DamonOehlman/detect-browser/blob/master/src/index.ts\nconst SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;\nconst userAgentRules = [[\"aol\", /AOLShield\\/([0-9\\._]+)/], [\"edge\", /Edge\\/([0-9\\._]+)/], [\"edge-ios\", /EdgiOS\\/([0-9\\._]+)/], [\"yandexbrowser\", /YaBrowser\\/([0-9\\._]+)/], [\"kakaotalk\", /KAKAOTALK\\s([0-9\\.]+)/], [\"samsung\", /SamsungBrowser\\/([0-9\\.]+)/], [\"silk\", /\\bSilk\\/([0-9._-]+)\\b/], [\"miui\", /MiuiBrowser\\/([0-9\\.]+)$/], [\"beaker\", /BeakerBrowser\\/([0-9\\.]+)/], [\"edge-chromium\", /EdgA?\\/([0-9\\.]+)/], [\"chromium-webview\", /(?!Chrom.*OPR)wv\\).*Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/], [\"chrome\", /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/], [\"phantomjs\", /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/], [\"crios\", /CriOS\\/([0-9\\.]+)(:?\\s|$)/], [\"firefox\", /Firefox\\/([0-9\\.]+)(?:\\s|$)/], [\"fxios\", /FxiOS\\/([0-9\\.]+)/], [\"opera-mini\", /Opera Mini.*Version\\/([0-9\\.]+)/], [\"opera\", /Opera\\/([0-9\\.]+)(?:\\s|$)/], [\"opera\", /OPR\\/([0-9\\.]+)(:?\\s|$)/], [\"pie\", /^Microsoft Pocket Internet Explorer\\/(\\d+\\.\\d+)$/], [\"pie\", /^Mozilla\\/\\d\\.\\d+\\s\\(compatible;\\s(?:MSP?IE|MSInternet Explorer) (\\d+\\.\\d+);.*Windows CE.*\\)$/], [\"netfront\", /^Mozilla\\/\\d\\.\\d+.*NetFront\\/(\\d.\\d)/], [\"ie\", /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/], [\"ie\", /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/], [\"ie\", /MSIE\\s(7\\.0)/], [\"bb10\", /BB10;\\sTouch.*Version\\/([0-9\\.]+)/], [\"android\", /Android\\s([0-9\\.]+)/], [\"ios\", /Version\\/([0-9\\._]+).*Mobile.*Safari.*/], [\"safari\", /Version\\/([0-9\\._]+).*Safari/], [\"facebook\", /FB[AS]V\\/([0-9\\.]+)/], [\"instagram\", /Instagram\\s([0-9\\.]+)/], [\"ios-webview\", /AppleWebKit\\/([0-9\\.]+).*Mobile/], [\"ios-webview\", /AppleWebKit\\/([0-9\\.]+).*Gecko\\)$/], [\"curl\", /^curl\\/([0-9\\.]+)$/], [\"searchbot\", SEARCHBOX_UA_REGEX]];\nconst matchUserAgent = ua => {\n  return ua !== \"\" && userAgentRules.reduce((matched, [browser, regex]) => {\n    if (matched) {\n      return matched;\n    }\n    const uaMatch = regex.exec(ua);\n    return !!uaMatch && [browser, uaMatch];\n  }, false);\n};\nconst isCurrentBrowserSupported = supportedBrowser => {\n  if (typeof navigator === \"undefined\") {\n    return false;\n  }\n  const matchedRule = matchUserAgent(navigator.userAgent);\n  if (!matchedRule) {\n    return false;\n  }\n  const [name] = matchedRule;\n  if (name === \"searchbot\") {\n    return false;\n  }\n  return !!supportedBrowser.find(item => item === name);\n};\n\n// eslint-disable-next-line es-x/no-typed-arrays -- safe\nvar arrayBufferNative = typeof ArrayBuffer != 'undefined' && typeof DataView != 'undefined';\n\nvar NATIVE_ARRAY_BUFFER$1 = arrayBufferNative;\nvar DESCRIPTORS$2 = descriptors;\nvar global$7 = global$t;\nvar isCallable$2 = isCallable$n;\nvar isObject$4 = isObject$d;\nvar hasOwn$1 = hasOwnProperty_1;\nvar classof$4 = classof$9;\nvar tryToString = tryToString$5;\nvar createNonEnumerableProperty$3 = createNonEnumerableProperty$8;\nvar defineBuiltIn$2 = defineBuiltIn$8;\nvar defineProperty$1 = objectDefineProperty.f;\nvar isPrototypeOf$1 = objectIsPrototypeOf;\nvar getPrototypeOf$1 = objectGetPrototypeOf;\nvar setPrototypeOf$3 = objectSetPrototypeOf;\nvar wellKnownSymbol$2 = wellKnownSymbol$j;\nvar uid = uid$3;\nvar InternalStateModule$2 = internalState;\n\nvar enforceInternalState$1 = InternalStateModule$2.enforce;\nvar getInternalState$2 = InternalStateModule$2.get;\nvar Int8Array$4 = global$7.Int8Array;\nvar Int8ArrayPrototype$1 = Int8Array$4 && Int8Array$4.prototype;\nvar Uint8ClampedArray$1 = global$7.Uint8ClampedArray;\nvar Uint8ClampedArrayPrototype = Uint8ClampedArray$1 && Uint8ClampedArray$1.prototype;\nvar TypedArray$1 = Int8Array$4 && getPrototypeOf$1(Int8Array$4);\nvar TypedArrayPrototype$1 = Int8ArrayPrototype$1 && getPrototypeOf$1(Int8ArrayPrototype$1);\nvar ObjectPrototype$1 = Object.prototype;\nvar TypeError$1 = global$7.TypeError;\n\nvar TO_STRING_TAG = wellKnownSymbol$2('toStringTag');\nvar TYPED_ARRAY_TAG$1 = uid('TYPED_ARRAY_TAG');\nvar TYPED_ARRAY_CONSTRUCTOR = 'TypedArrayConstructor';\n// Fixing native typed arrays in Opera Presto crashes the browser, see #595\nvar NATIVE_ARRAY_BUFFER_VIEWS$2 = NATIVE_ARRAY_BUFFER$1 && !!setPrototypeOf$3 && classof$4(global$7.opera) !== 'Opera';\nvar TYPED_ARRAY_TAG_REQUIRED = false;\nvar NAME, Constructor, Prototype;\n\nvar TypedArrayConstructorsList = {\n  Int8Array: 1,\n  Uint8Array: 1,\n  Uint8ClampedArray: 1,\n  Int16Array: 2,\n  Uint16Array: 2,\n  Int32Array: 4,\n  Uint32Array: 4,\n  Float32Array: 4,\n  Float64Array: 8\n};\n\nvar BigIntArrayConstructorsList = {\n  BigInt64Array: 8,\n  BigUint64Array: 8\n};\n\nvar isView = function isView(it) {\n  if (!isObject$4(it)) return false;\n  var klass = classof$4(it);\n  return klass === 'DataView'\n    || hasOwn$1(TypedArrayConstructorsList, klass)\n    || hasOwn$1(BigIntArrayConstructorsList, klass);\n};\n\nvar getTypedArrayConstructor = function (it) {\n  var proto = getPrototypeOf$1(it);\n  if (!isObject$4(proto)) return;\n  var state = getInternalState$2(proto);\n  return (state && hasOwn$1(state, TYPED_ARRAY_CONSTRUCTOR)) ? state[TYPED_ARRAY_CONSTRUCTOR] : getTypedArrayConstructor(proto);\n};\n\nvar isTypedArray$1 = function (it) {\n  if (!isObject$4(it)) return false;\n  var klass = classof$4(it);\n  return hasOwn$1(TypedArrayConstructorsList, klass)\n    || hasOwn$1(BigIntArrayConstructorsList, klass);\n};\n\nvar aTypedArray$4 = function (it) {\n  if (isTypedArray$1(it)) return it;\n  throw TypeError$1('Target is not a typed array');\n};\n\nvar aTypedArrayConstructor$2 = function (C) {\n  if (isCallable$2(C) && (!setPrototypeOf$3 || isPrototypeOf$1(TypedArray$1, C))) return C;\n  throw TypeError$1(tryToString(C) + ' is not a typed array constructor');\n};\n\nvar exportTypedArrayMethod$4 = function (KEY, property, forced, options) {\n  if (!DESCRIPTORS$2) return;\n  if (forced) for (var ARRAY in TypedArrayConstructorsList) {\n    var TypedArrayConstructor = global$7[ARRAY];\n    if (TypedArrayConstructor && hasOwn$1(TypedArrayConstructor.prototype, KEY)) try {\n      delete TypedArrayConstructor.prototype[KEY];\n    } catch (error) {\n      // old WebKit bug - some methods are non-configurable\n      try {\n        TypedArrayConstructor.prototype[KEY] = property;\n      } catch (error2) { /* empty */ }\n    }\n  }\n  if (!TypedArrayPrototype$1[KEY] || forced) {\n    defineBuiltIn$2(TypedArrayPrototype$1, KEY, forced ? property\n      : NATIVE_ARRAY_BUFFER_VIEWS$2 && Int8ArrayPrototype$1[KEY] || property, options);\n  }\n};\n\nvar exportTypedArrayStaticMethod$1 = function (KEY, property, forced) {\n  var ARRAY, TypedArrayConstructor;\n  if (!DESCRIPTORS$2) return;\n  if (setPrototypeOf$3) {\n    if (forced) for (ARRAY in TypedArrayConstructorsList) {\n      TypedArrayConstructor = global$7[ARRAY];\n      if (TypedArrayConstructor && hasOwn$1(TypedArrayConstructor, KEY)) try {\n        delete TypedArrayConstructor[KEY];\n      } catch (error) { /* empty */ }\n    }\n    if (!TypedArray$1[KEY] || forced) {\n      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable\n      try {\n        return defineBuiltIn$2(TypedArray$1, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS$2 && TypedArray$1[KEY] || property);\n      } catch (error) { /* empty */ }\n    } else return;\n  }\n  for (ARRAY in TypedArrayConstructorsList) {\n    TypedArrayConstructor = global$7[ARRAY];\n    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {\n      defineBuiltIn$2(TypedArrayConstructor, KEY, property);\n    }\n  }\n};\n\nfor (NAME in TypedArrayConstructorsList) {\n  Constructor = global$7[NAME];\n  Prototype = Constructor && Constructor.prototype;\n  if (Prototype) enforceInternalState$1(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;\n  else NATIVE_ARRAY_BUFFER_VIEWS$2 = false;\n}\n\nfor (NAME in BigIntArrayConstructorsList) {\n  Constructor = global$7[NAME];\n  Prototype = Constructor && Constructor.prototype;\n  if (Prototype) enforceInternalState$1(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;\n}\n\n// WebKit bug - typed arrays constructors prototype is Object.prototype\nif (!NATIVE_ARRAY_BUFFER_VIEWS$2 || !isCallable$2(TypedArray$1) || TypedArray$1 === Function.prototype) {\n  // eslint-disable-next-line no-shadow -- safe\n  TypedArray$1 = function TypedArray() {\n    throw TypeError$1('Incorrect invocation');\n  };\n  if (NATIVE_ARRAY_BUFFER_VIEWS$2) for (NAME in TypedArrayConstructorsList) {\n    if (global$7[NAME]) setPrototypeOf$3(global$7[NAME], TypedArray$1);\n  }\n}\n\nif (!NATIVE_ARRAY_BUFFER_VIEWS$2 || !TypedArrayPrototype$1 || TypedArrayPrototype$1 === ObjectPrototype$1) {\n  TypedArrayPrototype$1 = TypedArray$1.prototype;\n  if (NATIVE_ARRAY_BUFFER_VIEWS$2) for (NAME in TypedArrayConstructorsList) {\n    if (global$7[NAME]) setPrototypeOf$3(global$7[NAME].prototype, TypedArrayPrototype$1);\n  }\n}\n\n// WebKit bug - one more object in Uint8ClampedArray prototype chain\nif (NATIVE_ARRAY_BUFFER_VIEWS$2 && getPrototypeOf$1(Uint8ClampedArrayPrototype) !== TypedArrayPrototype$1) {\n  setPrototypeOf$3(Uint8ClampedArrayPrototype, TypedArrayPrototype$1);\n}\n\nif (DESCRIPTORS$2 && !hasOwn$1(TypedArrayPrototype$1, TO_STRING_TAG)) {\n  TYPED_ARRAY_TAG_REQUIRED = true;\n  defineProperty$1(TypedArrayPrototype$1, TO_STRING_TAG, { get: function () {\n    return isObject$4(this) ? this[TYPED_ARRAY_TAG$1] : undefined;\n  } });\n  for (NAME in TypedArrayConstructorsList) if (global$7[NAME]) {\n    createNonEnumerableProperty$3(global$7[NAME], TYPED_ARRAY_TAG$1, NAME);\n  }\n}\n\nvar arrayBufferViewCore = {\n  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS$2,\n  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG$1,\n  aTypedArray: aTypedArray$4,\n  aTypedArrayConstructor: aTypedArrayConstructor$2,\n  exportTypedArrayMethod: exportTypedArrayMethod$4,\n  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod$1,\n  getTypedArrayConstructor: getTypedArrayConstructor,\n  isView: isView,\n  isTypedArray: isTypedArray$1,\n  TypedArray: TypedArray$1,\n  TypedArrayPrototype: TypedArrayPrototype$1\n};\n\n/* eslint-disable no-new -- required for testing */\n\nvar global$6 = global$t;\nvar fails$8 = fails$s;\nvar checkCorrectnessOfIteration = checkCorrectnessOfIteration$2;\nvar NATIVE_ARRAY_BUFFER_VIEWS$1 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;\n\nvar ArrayBuffer$3 = global$6.ArrayBuffer;\nvar Int8Array$3 = global$6.Int8Array;\n\nvar typedArrayConstructorsRequireWrappers = !NATIVE_ARRAY_BUFFER_VIEWS$1 || !fails$8(function () {\n  Int8Array$3(1);\n}) || !fails$8(function () {\n  new Int8Array$3(-1);\n}) || !checkCorrectnessOfIteration(function (iterable) {\n  new Int8Array$3();\n  new Int8Array$3(null);\n  new Int8Array$3(1.5);\n  new Int8Array$3(iterable);\n}, true) || fails$8(function () {\n  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill\n  return new Int8Array$3(new ArrayBuffer$3(2), 1, undefined).length !== 1;\n});\n\nvar bind$1 = functionBindContext;\nvar call$5 = functionCall;\nvar aConstructor = aConstructor$2;\nvar toObject$2 = toObject$7;\nvar lengthOfArrayLike$4 = lengthOfArrayLike$8;\nvar getIterator = getIterator$2;\nvar getIteratorMethod = getIteratorMethod$3;\nvar isArrayIteratorMethod = isArrayIteratorMethod$2;\nvar aTypedArrayConstructor$1 = arrayBufferViewCore.aTypedArrayConstructor;\n\nvar typedArrayFrom$2 = function from(source /* , mapfn, thisArg */) {\n  var C = aConstructor(this);\n  var O = toObject$2(source);\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  var iteratorMethod = getIteratorMethod(O);\n  var i, length, result, step, iterator, next;\n  if (iteratorMethod && !isArrayIteratorMethod(iteratorMethod)) {\n    iterator = getIterator(O, iteratorMethod);\n    next = iterator.next;\n    O = [];\n    while (!(step = call$5(next, iterator)).done) {\n      O.push(step.value);\n    }\n  }\n  if (mapping && argumentsLength > 2) {\n    mapfn = bind$1(mapfn, arguments[2]);\n  }\n  length = lengthOfArrayLike$4(O);\n  result = new (aTypedArrayConstructor$1(C))(length);\n  for (i = 0; length > i; i++) {\n    result[i] = mapping ? mapfn(O[i], i) : O[i];\n  }\n  return result;\n};\n\nvar TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS$1 = typedArrayConstructorsRequireWrappers;\nvar exportTypedArrayStaticMethod = arrayBufferViewCore.exportTypedArrayStaticMethod;\nvar typedArrayFrom$1 = typedArrayFrom$2;\n\n// `%TypedArray%.from` method\n// https://tc39.es/ecma262/#sec-%typedarray%.from\nexportTypedArrayStaticMethod('from', typedArrayFrom$1, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS$1);\n\nvar defineBuiltIn$1 = defineBuiltIn$8;\n\nvar defineBuiltIns$1 = function (target, src, options) {\n  for (var key in src) defineBuiltIn$1(target, key, src[key], options);\n  return target;\n};\n\nvar toIntegerOrInfinity$3 = toIntegerOrInfinity$6;\nvar toLength$4 = toLength$6;\n\nvar $RangeError$2 = RangeError;\n\n// `ToIndex` abstract operation\n// https://tc39.es/ecma262/#sec-toindex\nvar toIndex$2 = function (it) {\n  if (it === undefined) return 0;\n  var number = toIntegerOrInfinity$3(it);\n  var length = toLength$4(number);\n  if (number !== length) throw $RangeError$2('Wrong length or index');\n  return length;\n};\n\n// IEEE754 conversions based on https://github.com/feross/ieee754\nvar $Array$2 = Array;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar floor$2 = Math.floor;\nvar log = Math.log;\nvar LN2 = Math.LN2;\n\nvar pack = function (number, mantissaLength, bytes) {\n  var buffer = $Array$2(bytes);\n  var exponentLength = bytes * 8 - mantissaLength - 1;\n  var eMax = (1 << exponentLength) - 1;\n  var eBias = eMax >> 1;\n  var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;\n  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;\n  var index = 0;\n  var exponent, mantissa, c;\n  number = abs(number);\n  // eslint-disable-next-line no-self-compare -- NaN check\n  if (number != number || number === Infinity) {\n    // eslint-disable-next-line no-self-compare -- NaN check\n    mantissa = number != number ? 1 : 0;\n    exponent = eMax;\n  } else {\n    exponent = floor$2(log(number) / LN2);\n    c = pow(2, -exponent);\n    if (number * c < 1) {\n      exponent--;\n      c *= 2;\n    }\n    if (exponent + eBias >= 1) {\n      number += rt / c;\n    } else {\n      number += rt * pow(2, 1 - eBias);\n    }\n    if (number * c >= 2) {\n      exponent++;\n      c /= 2;\n    }\n    if (exponent + eBias >= eMax) {\n      mantissa = 0;\n      exponent = eMax;\n    } else if (exponent + eBias >= 1) {\n      mantissa = (number * c - 1) * pow(2, mantissaLength);\n      exponent = exponent + eBias;\n    } else {\n      mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);\n      exponent = 0;\n    }\n  }\n  while (mantissaLength >= 8) {\n    buffer[index++] = mantissa & 255;\n    mantissa /= 256;\n    mantissaLength -= 8;\n  }\n  exponent = exponent << mantissaLength | mantissa;\n  exponentLength += mantissaLength;\n  while (exponentLength > 0) {\n    buffer[index++] = exponent & 255;\n    exponent /= 256;\n    exponentLength -= 8;\n  }\n  buffer[--index] |= sign * 128;\n  return buffer;\n};\n\nvar unpack = function (buffer, mantissaLength) {\n  var bytes = buffer.length;\n  var exponentLength = bytes * 8 - mantissaLength - 1;\n  var eMax = (1 << exponentLength) - 1;\n  var eBias = eMax >> 1;\n  var nBits = exponentLength - 7;\n  var index = bytes - 1;\n  var sign = buffer[index--];\n  var exponent = sign & 127;\n  var mantissa;\n  sign >>= 7;\n  while (nBits > 0) {\n    exponent = exponent * 256 + buffer[index--];\n    nBits -= 8;\n  }\n  mantissa = exponent & (1 << -nBits) - 1;\n  exponent >>= -nBits;\n  nBits += mantissaLength;\n  while (nBits > 0) {\n    mantissa = mantissa * 256 + buffer[index--];\n    nBits -= 8;\n  }\n  if (exponent === 0) {\n    exponent = 1 - eBias;\n  } else if (exponent === eMax) {\n    return mantissa ? NaN : sign ? -Infinity : Infinity;\n  } else {\n    mantissa = mantissa + pow(2, mantissaLength);\n    exponent = exponent - eBias;\n  } return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);\n};\n\nvar ieee754 = {\n  pack: pack,\n  unpack: unpack\n};\n\nvar toObject$1 = toObject$7;\nvar toAbsoluteIndex$2 = toAbsoluteIndex$4;\nvar lengthOfArrayLike$3 = lengthOfArrayLike$8;\n\n// `Array.prototype.fill` method implementation\n// https://tc39.es/ecma262/#sec-array.prototype.fill\nvar arrayFill$1 = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject$1(this);\n  var length = lengthOfArrayLike$3(O);\n  var argumentsLength = arguments.length;\n  var index = toAbsoluteIndex$2(argumentsLength > 1 ? arguments[1] : undefined, length);\n  var end = argumentsLength > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex$2(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n\nvar toPropertyKey$1 = toPropertyKey$4;\nvar definePropertyModule$1 = objectDefineProperty;\nvar createPropertyDescriptor$1 = createPropertyDescriptor$5;\n\nvar createProperty$1 = function (object, key, value) {\n  var propertyKey = toPropertyKey$1(key);\n  if (propertyKey in object) definePropertyModule$1.f(object, propertyKey, createPropertyDescriptor$1(0, value));\n  else object[propertyKey] = value;\n};\n\nvar toAbsoluteIndex$1 = toAbsoluteIndex$4;\nvar lengthOfArrayLike$2 = lengthOfArrayLike$8;\nvar createProperty = createProperty$1;\n\nvar $Array$1 = Array;\nvar max = Math.max;\n\nvar arraySliceSimple = function (O, start, end) {\n  var length = lengthOfArrayLike$2(O);\n  var k = toAbsoluteIndex$1(start, length);\n  var fin = toAbsoluteIndex$1(end === undefined ? length : end, length);\n  var result = $Array$1(max(fin - k, 0));\n  for (var n = 0; k < fin; k++, n++) createProperty(result, n, O[k]);\n  result.length = n;\n  return result;\n};\n\nvar global$5 = global$t;\nvar uncurryThis$7 = functionUncurryThis;\nvar DESCRIPTORS$1 = descriptors;\nvar NATIVE_ARRAY_BUFFER = arrayBufferNative;\nvar FunctionName = functionName;\nvar createNonEnumerableProperty$2 = createNonEnumerableProperty$8;\nvar defineBuiltIns = defineBuiltIns$1;\nvar fails$7 = fails$s;\nvar anInstance$1 = anInstance$3;\nvar toIntegerOrInfinity$2 = toIntegerOrInfinity$6;\nvar toLength$3 = toLength$6;\nvar toIndex$1 = toIndex$2;\nvar IEEE754 = ieee754;\nvar getPrototypeOf = objectGetPrototypeOf;\nvar setPrototypeOf$2 = objectSetPrototypeOf;\nvar getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;\nvar defineProperty = objectDefineProperty.f;\nvar arrayFill = arrayFill$1;\nvar arraySlice$3 = arraySliceSimple;\nvar setToStringTag = setToStringTag$4;\nvar InternalStateModule$1 = internalState;\n\nvar PROPER_FUNCTION_NAME = FunctionName.PROPER;\nvar CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;\nvar getInternalState$1 = InternalStateModule$1.get;\nvar setInternalState$1 = InternalStateModule$1.set;\nvar ARRAY_BUFFER = 'ArrayBuffer';\nvar DATA_VIEW = 'DataView';\nvar PROTOTYPE = 'prototype';\nvar WRONG_LENGTH$1 = 'Wrong length';\nvar WRONG_INDEX = 'Wrong index';\nvar NativeArrayBuffer = global$5[ARRAY_BUFFER];\nvar $ArrayBuffer = NativeArrayBuffer;\nvar ArrayBufferPrototype$1 = $ArrayBuffer && $ArrayBuffer[PROTOTYPE];\nvar $DataView = global$5[DATA_VIEW];\nvar DataViewPrototype$1 = $DataView && $DataView[PROTOTYPE];\nvar ObjectPrototype = Object.prototype;\nvar Array$1 = global$5.Array;\nvar RangeError$3 = global$5.RangeError;\nvar fill = uncurryThis$7(arrayFill);\nvar reverse = uncurryThis$7([].reverse);\n\nvar packIEEE754 = IEEE754.pack;\nvar unpackIEEE754 = IEEE754.unpack;\n\nvar packInt8 = function (number) {\n  return [number & 0xFF];\n};\n\nvar packInt16 = function (number) {\n  return [number & 0xFF, number >> 8 & 0xFF];\n};\n\nvar packInt32 = function (number) {\n  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];\n};\n\nvar unpackInt32 = function (buffer) {\n  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];\n};\n\nvar packFloat32 = function (number) {\n  return packIEEE754(number, 23, 4);\n};\n\nvar packFloat64 = function (number) {\n  return packIEEE754(number, 52, 8);\n};\n\nvar addGetter$1 = function (Constructor, key) {\n  defineProperty(Constructor[PROTOTYPE], key, { get: function () { return getInternalState$1(this)[key]; } });\n};\n\nvar get = function (view, count, index, isLittleEndian) {\n  var intIndex = toIndex$1(index);\n  var store = getInternalState$1(view);\n  if (intIndex + count > store.byteLength) throw RangeError$3(WRONG_INDEX);\n  var bytes = getInternalState$1(store.buffer).bytes;\n  var start = intIndex + store.byteOffset;\n  var pack = arraySlice$3(bytes, start, start + count);\n  return isLittleEndian ? pack : reverse(pack);\n};\n\nvar set = function (view, count, index, conversion, value, isLittleEndian) {\n  var intIndex = toIndex$1(index);\n  var store = getInternalState$1(view);\n  if (intIndex + count > store.byteLength) throw RangeError$3(WRONG_INDEX);\n  var bytes = getInternalState$1(store.buffer).bytes;\n  var start = intIndex + store.byteOffset;\n  var pack = conversion(+value);\n  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];\n};\n\nif (!NATIVE_ARRAY_BUFFER) {\n  $ArrayBuffer = function ArrayBuffer(length) {\n    anInstance$1(this, ArrayBufferPrototype$1);\n    var byteLength = toIndex$1(length);\n    setInternalState$1(this, {\n      bytes: fill(Array$1(byteLength), 0),\n      byteLength: byteLength\n    });\n    if (!DESCRIPTORS$1) this.byteLength = byteLength;\n  };\n\n  ArrayBufferPrototype$1 = $ArrayBuffer[PROTOTYPE];\n\n  $DataView = function DataView(buffer, byteOffset, byteLength) {\n    anInstance$1(this, DataViewPrototype$1);\n    anInstance$1(buffer, ArrayBufferPrototype$1);\n    var bufferLength = getInternalState$1(buffer).byteLength;\n    var offset = toIntegerOrInfinity$2(byteOffset);\n    if (offset < 0 || offset > bufferLength) throw RangeError$3('Wrong offset');\n    byteLength = byteLength === undefined ? bufferLength - offset : toLength$3(byteLength);\n    if (offset + byteLength > bufferLength) throw RangeError$3(WRONG_LENGTH$1);\n    setInternalState$1(this, {\n      buffer: buffer,\n      byteLength: byteLength,\n      byteOffset: offset\n    });\n    if (!DESCRIPTORS$1) {\n      this.buffer = buffer;\n      this.byteLength = byteLength;\n      this.byteOffset = offset;\n    }\n  };\n\n  DataViewPrototype$1 = $DataView[PROTOTYPE];\n\n  if (DESCRIPTORS$1) {\n    addGetter$1($ArrayBuffer, 'byteLength');\n    addGetter$1($DataView, 'buffer');\n    addGetter$1($DataView, 'byteLength');\n    addGetter$1($DataView, 'byteOffset');\n  }\n\n  defineBuiltIns(DataViewPrototype$1, {\n    getInt8: function getInt8(byteOffset) {\n      return get(this, 1, byteOffset)[0] << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset) {\n      return get(this, 1, byteOffset)[0];\n    },\n    getInt16: function getInt16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);\n      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);\n      return bytes[1] << 8 | bytes[0];\n    },\n    getInt32: function getInt32(byteOffset /* , littleEndian */) {\n      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));\n    },\n    getUint32: function getUint32(byteOffset /* , littleEndian */) {\n      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;\n    },\n    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);\n    },\n    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);\n    },\n    setInt8: function setInt8(byteOffset, value) {\n      set(this, 1, byteOffset, packInt8, value);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      set(this, 1, byteOffset, packInt8, value);\n    },\n    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {\n      set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);\n    }\n  });\n} else {\n  var INCORRECT_ARRAY_BUFFER_NAME = PROPER_FUNCTION_NAME && NativeArrayBuffer.name !== ARRAY_BUFFER;\n  /* eslint-disable no-new -- required for testing */\n  if (!fails$7(function () {\n    NativeArrayBuffer(1);\n  }) || !fails$7(function () {\n    new NativeArrayBuffer(-1);\n  }) || fails$7(function () {\n    new NativeArrayBuffer();\n    new NativeArrayBuffer(1.5);\n    new NativeArrayBuffer(NaN);\n    return INCORRECT_ARRAY_BUFFER_NAME && !CONFIGURABLE_FUNCTION_NAME;\n  })) {\n  /* eslint-enable no-new -- required for testing */\n    $ArrayBuffer = function ArrayBuffer(length) {\n      anInstance$1(this, ArrayBufferPrototype$1);\n      return new NativeArrayBuffer(toIndex$1(length));\n    };\n\n    $ArrayBuffer[PROTOTYPE] = ArrayBufferPrototype$1;\n\n    for (var keys = getOwnPropertyNames$1(NativeArrayBuffer), j = 0, key; keys.length > j;) {\n      if (!((key = keys[j++]) in $ArrayBuffer)) {\n        createNonEnumerableProperty$2($ArrayBuffer, key, NativeArrayBuffer[key]);\n      }\n    }\n\n    ArrayBufferPrototype$1.constructor = $ArrayBuffer;\n  } else if (INCORRECT_ARRAY_BUFFER_NAME && CONFIGURABLE_FUNCTION_NAME) {\n    createNonEnumerableProperty$2(NativeArrayBuffer, 'name', ARRAY_BUFFER);\n  }\n\n  // WebKit bug - the same parent prototype for typed arrays and data view\n  if (setPrototypeOf$2 && getPrototypeOf(DataViewPrototype$1) !== ObjectPrototype) {\n    setPrototypeOf$2(DataViewPrototype$1, ObjectPrototype);\n  }\n\n  // iOS Safari 7.x bug\n  var testView = new $DataView(new $ArrayBuffer(2));\n  var $setInt8 = uncurryThis$7(DataViewPrototype$1.setInt8);\n  testView.setInt8(0, 2147483648);\n  testView.setInt8(1, 2147483649);\n  if (testView.getInt8(0) || !testView.getInt8(1)) defineBuiltIns(DataViewPrototype$1, {\n    setInt8: function setInt8(byteOffset, value) {\n      $setInt8(this, byteOffset, value << 24 >> 24);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      $setInt8(this, byteOffset, value << 24 >> 24);\n    }\n  }, { unsafe: true });\n}\n\nsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\nsetToStringTag($DataView, DATA_VIEW);\n\nvar arrayBuffer = {\n  ArrayBuffer: $ArrayBuffer,\n  DataView: $DataView\n};\n\nvar $$1 = _export;\nvar uncurryThis$6 = functionUncurryThis;\nvar fails$6 = fails$s;\nvar ArrayBufferModule$1 = arrayBuffer;\nvar anObject$2 = anObject$e;\nvar toAbsoluteIndex = toAbsoluteIndex$4;\nvar toLength$2 = toLength$6;\nvar speciesConstructor$1 = speciesConstructor$3;\n\nvar ArrayBuffer$2 = ArrayBufferModule$1.ArrayBuffer;\nvar DataView$2 = ArrayBufferModule$1.DataView;\nvar DataViewPrototype = DataView$2.prototype;\nvar un$ArrayBufferSlice = uncurryThis$6(ArrayBuffer$2.prototype.slice);\nvar getUint8 = uncurryThis$6(DataViewPrototype.getUint8);\nvar setUint8 = uncurryThis$6(DataViewPrototype.setUint8);\n\nvar INCORRECT_SLICE = fails$6(function () {\n  return !new ArrayBuffer$2(2).slice(1, undefined).byteLength;\n});\n\n// `ArrayBuffer.prototype.slice` method\n// https://tc39.es/ecma262/#sec-arraybuffer.prototype.slice\n$$1({ target: 'ArrayBuffer', proto: true, unsafe: true, forced: INCORRECT_SLICE }, {\n  slice: function slice(start, end) {\n    if (un$ArrayBufferSlice && end === undefined) {\n      return un$ArrayBufferSlice(anObject$2(this), start); // FF fix\n    }\n    var length = anObject$2(this).byteLength;\n    var first = toAbsoluteIndex(start, length);\n    var fin = toAbsoluteIndex(end === undefined ? length : end, length);\n    var result = new (speciesConstructor$1(this, ArrayBuffer$2))(toLength$2(fin - first));\n    var viewSource = new DataView$2(this);\n    var viewTarget = new DataView$2(result);\n    var index = 0;\n    while (first < fin) {\n      setUint8(viewTarget, index++, getUint8(viewSource, first++));\n    } return result;\n  }\n});\n\nvar typedArrayConstructor = {exports: {}};\n\nvar isObject$3 = isObject$d;\n\nvar floor$1 = Math.floor;\n\n// `IsIntegralNumber` abstract operation\n// https://tc39.es/ecma262/#sec-isintegralnumber\n// eslint-disable-next-line es-x/no-number-isinteger -- safe\nvar isIntegralNumber$1 = Number.isInteger || function isInteger(it) {\n  return !isObject$3(it) && isFinite(it) && floor$1(it) === it;\n};\n\nvar toIntegerOrInfinity$1 = toIntegerOrInfinity$6;\n\nvar $RangeError$1 = RangeError;\n\nvar toPositiveInteger$1 = function (it) {\n  var result = toIntegerOrInfinity$1(it);\n  if (result < 0) throw $RangeError$1(\"The argument can't be less than 0\");\n  return result;\n};\n\nvar toPositiveInteger = toPositiveInteger$1;\n\nvar $RangeError = RangeError;\n\nvar toOffset$2 = function (it, BYTES) {\n  var offset = toPositiveInteger(it);\n  if (offset % BYTES) throw $RangeError('Wrong offset');\n  return offset;\n};\n\nvar classof$3 = classofRaw$1;\n\n// `IsArray` abstract operation\n// https://tc39.es/ecma262/#sec-isarray\n// eslint-disable-next-line es-x/no-array-isarray -- safe\nvar isArray$1 = Array.isArray || function isArray(argument) {\n  return classof$3(argument) == 'Array';\n};\n\nvar isArray = isArray$1;\nvar isConstructor = isConstructor$2;\nvar isObject$2 = isObject$d;\nvar wellKnownSymbol$1 = wellKnownSymbol$j;\n\nvar SPECIES$1 = wellKnownSymbol$1('species');\nvar $Array = Array;\n\n// a part of `ArraySpeciesCreate` abstract operation\n// https://tc39.es/ecma262/#sec-arrayspeciescreate\nvar arraySpeciesConstructor$1 = function (originalArray) {\n  var C;\n  if (isArray(originalArray)) {\n    C = originalArray.constructor;\n    // cross-realm fallback\n    if (isConstructor(C) && (C === $Array || isArray(C.prototype))) C = undefined;\n    else if (isObject$2(C)) {\n      C = C[SPECIES$1];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? $Array : C;\n};\n\nvar arraySpeciesConstructor = arraySpeciesConstructor$1;\n\n// `ArraySpeciesCreate` abstract operation\n// https://tc39.es/ecma262/#sec-arrayspeciescreate\nvar arraySpeciesCreate$1 = function (originalArray, length) {\n  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);\n};\n\nvar bind = functionBindContext;\nvar uncurryThis$5 = functionUncurryThis;\nvar IndexedObject = indexedObject;\nvar toObject = toObject$7;\nvar lengthOfArrayLike$1 = lengthOfArrayLike$8;\nvar arraySpeciesCreate = arraySpeciesCreate$1;\n\nvar push$1 = uncurryThis$5([].push);\n\n// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation\nvar createMethod$1 = function (TYPE) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var IS_FILTER_REJECT = TYPE == 7;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  return function ($this, callbackfn, that, specificCreate) {\n    var O = toObject($this);\n    var self = IndexedObject(O);\n    var boundFunction = bind(callbackfn, that);\n    var length = lengthOfArrayLike$1(self);\n    var index = 0;\n    var create = specificCreate || arraySpeciesCreate;\n    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;\n    var value, result;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      value = self[index];\n      result = boundFunction(value, index, O);\n      if (TYPE) {\n        if (IS_MAP) target[index] = result; // map\n        else if (result) switch (TYPE) {\n          case 3: return true;              // some\n          case 5: return value;             // find\n          case 6: return index;             // findIndex\n          case 2: push$1(target, value);      // filter\n        } else switch (TYPE) {\n          case 4: return false;             // every\n          case 7: push$1(target, value);      // filterReject\n        }\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\n  };\n};\n\nvar arrayIteration = {\n  // `Array.prototype.forEach` method\n  // https://tc39.es/ecma262/#sec-array.prototype.foreach\n  forEach: createMethod$1(0),\n  // `Array.prototype.map` method\n  // https://tc39.es/ecma262/#sec-array.prototype.map\n  map: createMethod$1(1),\n  // `Array.prototype.filter` method\n  // https://tc39.es/ecma262/#sec-array.prototype.filter\n  filter: createMethod$1(2),\n  // `Array.prototype.some` method\n  // https://tc39.es/ecma262/#sec-array.prototype.some\n  some: createMethod$1(3),\n  // `Array.prototype.every` method\n  // https://tc39.es/ecma262/#sec-array.prototype.every\n  every: createMethod$1(4),\n  // `Array.prototype.find` method\n  // https://tc39.es/ecma262/#sec-array.prototype.find\n  find: createMethod$1(5),\n  // `Array.prototype.findIndex` method\n  // https://tc39.es/ecma262/#sec-array.prototype.findIndex\n  findIndex: createMethod$1(6),\n  // `Array.prototype.filterReject` method\n  // https://github.com/tc39/proposal-array-filtering\n  filterReject: createMethod$1(7)\n};\n\nvar isCallable$1 = isCallable$n;\nvar isObject$1 = isObject$d;\nvar setPrototypeOf$1 = objectSetPrototypeOf;\n\n// makes subclassing work correct for wrapped built-ins\nvar inheritIfRequired$1 = function ($this, dummy, Wrapper) {\n  var NewTarget, NewTargetPrototype;\n  if (\n    // it can work only with native `setPrototypeOf`\n    setPrototypeOf$1 &&\n    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this\n    isCallable$1(NewTarget = dummy.constructor) &&\n    NewTarget !== Wrapper &&\n    isObject$1(NewTargetPrototype = NewTarget.prototype) &&\n    NewTargetPrototype !== Wrapper.prototype\n  ) setPrototypeOf$1($this, NewTargetPrototype);\n  return $this;\n};\n\nvar $ = _export;\nvar global$4 = global$t;\nvar call$4 = functionCall;\nvar DESCRIPTORS = descriptors;\nvar TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = typedArrayConstructorsRequireWrappers;\nvar ArrayBufferViewCore$4 = arrayBufferViewCore;\nvar ArrayBufferModule = arrayBuffer;\nvar anInstance = anInstance$3;\nvar createPropertyDescriptor = createPropertyDescriptor$5;\nvar createNonEnumerableProperty$1 = createNonEnumerableProperty$8;\nvar isIntegralNumber = isIntegralNumber$1;\nvar toLength$1 = toLength$6;\nvar toIndex = toIndex$2;\nvar toOffset$1 = toOffset$2;\nvar toPropertyKey = toPropertyKey$4;\nvar hasOwn = hasOwnProperty_1;\nvar classof$2 = classof$9;\nvar isObject = isObject$d;\nvar isSymbol = isSymbol$3;\nvar create = objectCreate;\nvar isPrototypeOf = objectIsPrototypeOf;\nvar setPrototypeOf = objectSetPrototypeOf;\nvar getOwnPropertyNames = objectGetOwnPropertyNames.f;\nvar typedArrayFrom = typedArrayFrom$2;\nvar forEach = arrayIteration.forEach;\nvar setSpecies = setSpecies$2;\nvar definePropertyModule = objectDefineProperty;\nvar getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;\nvar InternalStateModule = internalState;\nvar inheritIfRequired = inheritIfRequired$1;\n\nvar getInternalState = InternalStateModule.get;\nvar setInternalState = InternalStateModule.set;\nvar enforceInternalState = InternalStateModule.enforce;\nvar nativeDefineProperty = definePropertyModule.f;\nvar nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\nvar round = Math.round;\nvar RangeError$2 = global$4.RangeError;\nvar ArrayBuffer$1 = ArrayBufferModule.ArrayBuffer;\nvar ArrayBufferPrototype = ArrayBuffer$1.prototype;\nvar DataView$1 = ArrayBufferModule.DataView;\nvar NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore$4.NATIVE_ARRAY_BUFFER_VIEWS;\nvar TYPED_ARRAY_TAG = ArrayBufferViewCore$4.TYPED_ARRAY_TAG;\nvar TypedArray = ArrayBufferViewCore$4.TypedArray;\nvar TypedArrayPrototype = ArrayBufferViewCore$4.TypedArrayPrototype;\nvar aTypedArrayConstructor = ArrayBufferViewCore$4.aTypedArrayConstructor;\nvar isTypedArray = ArrayBufferViewCore$4.isTypedArray;\nvar BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\nvar WRONG_LENGTH = 'Wrong length';\n\nvar fromList = function (C, list) {\n  aTypedArrayConstructor(C);\n  var index = 0;\n  var length = list.length;\n  var result = new C(length);\n  while (length > index) result[index] = list[index++];\n  return result;\n};\n\nvar addGetter = function (it, key) {\n  nativeDefineProperty(it, key, { get: function () {\n    return getInternalState(this)[key];\n  } });\n};\n\nvar isArrayBuffer = function (it) {\n  var klass;\n  return isPrototypeOf(ArrayBufferPrototype, it) || (klass = classof$2(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';\n};\n\nvar isTypedArrayIndex = function (target, key) {\n  return isTypedArray(target)\n    && !isSymbol(key)\n    && key in target\n    && isIntegralNumber(+key)\n    && key >= 0;\n};\n\nvar wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {\n  key = toPropertyKey(key);\n  return isTypedArrayIndex(target, key)\n    ? createPropertyDescriptor(2, target[key])\n    : nativeGetOwnPropertyDescriptor(target, key);\n};\n\nvar wrappedDefineProperty = function defineProperty(target, key, descriptor) {\n  key = toPropertyKey(key);\n  if (isTypedArrayIndex(target, key)\n    && isObject(descriptor)\n    && hasOwn(descriptor, 'value')\n    && !hasOwn(descriptor, 'get')\n    && !hasOwn(descriptor, 'set')\n    // TODO: add validation descriptor w/o calling accessors\n    && !descriptor.configurable\n    && (!hasOwn(descriptor, 'writable') || descriptor.writable)\n    && (!hasOwn(descriptor, 'enumerable') || descriptor.enumerable)\n  ) {\n    target[key] = descriptor.value;\n    return target;\n  } return nativeDefineProperty(target, key, descriptor);\n};\n\nif (DESCRIPTORS) {\n  if (!NATIVE_ARRAY_BUFFER_VIEWS) {\n    getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;\n    definePropertyModule.f = wrappedDefineProperty;\n    addGetter(TypedArrayPrototype, 'buffer');\n    addGetter(TypedArrayPrototype, 'byteOffset');\n    addGetter(TypedArrayPrototype, 'byteLength');\n    addGetter(TypedArrayPrototype, 'length');\n  }\n\n  $({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {\n    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,\n    defineProperty: wrappedDefineProperty\n  });\n\n  typedArrayConstructor.exports = function (TYPE, wrapper, CLAMPED) {\n    var BYTES = TYPE.match(/\\d+$/)[0] / 8;\n    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';\n    var GETTER = 'get' + TYPE;\n    var SETTER = 'set' + TYPE;\n    var NativeTypedArrayConstructor = global$4[CONSTRUCTOR_NAME];\n    var TypedArrayConstructor = NativeTypedArrayConstructor;\n    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;\n    var exported = {};\n\n    var getter = function (that, index) {\n      var data = getInternalState(that);\n      return data.view[GETTER](index * BYTES + data.byteOffset, true);\n    };\n\n    var setter = function (that, index, value) {\n      var data = getInternalState(that);\n      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;\n      data.view[SETTER](index * BYTES + data.byteOffset, value, true);\n    };\n\n    var addElement = function (that, index) {\n      nativeDefineProperty(that, index, {\n        get: function () {\n          return getter(this, index);\n        },\n        set: function (value) {\n          return setter(this, index, value);\n        },\n        enumerable: true\n      });\n    };\n\n    if (!NATIVE_ARRAY_BUFFER_VIEWS) {\n      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {\n        anInstance(that, TypedArrayConstructorPrototype);\n        var index = 0;\n        var byteOffset = 0;\n        var buffer, byteLength, length;\n        if (!isObject(data)) {\n          length = toIndex(data);\n          byteLength = length * BYTES;\n          buffer = new ArrayBuffer$1(byteLength);\n        } else if (isArrayBuffer(data)) {\n          buffer = data;\n          byteOffset = toOffset$1(offset, BYTES);\n          var $len = data.byteLength;\n          if ($length === undefined) {\n            if ($len % BYTES) throw RangeError$2(WRONG_LENGTH);\n            byteLength = $len - byteOffset;\n            if (byteLength < 0) throw RangeError$2(WRONG_LENGTH);\n          } else {\n            byteLength = toLength$1($length) * BYTES;\n            if (byteLength + byteOffset > $len) throw RangeError$2(WRONG_LENGTH);\n          }\n          length = byteLength / BYTES;\n        } else if (isTypedArray(data)) {\n          return fromList(TypedArrayConstructor, data);\n        } else {\n          return call$4(typedArrayFrom, TypedArrayConstructor, data);\n        }\n        setInternalState(that, {\n          buffer: buffer,\n          byteOffset: byteOffset,\n          byteLength: byteLength,\n          length: length,\n          view: new DataView$1(buffer)\n        });\n        while (index < length) addElement(that, index++);\n      });\n\n      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);\n      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);\n    } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {\n      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {\n        anInstance(dummy, TypedArrayConstructorPrototype);\n        return inheritIfRequired(function () {\n          if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));\n          if (isArrayBuffer(data)) return $length !== undefined\n            ? new NativeTypedArrayConstructor(data, toOffset$1(typedArrayOffset, BYTES), $length)\n            : typedArrayOffset !== undefined\n              ? new NativeTypedArrayConstructor(data, toOffset$1(typedArrayOffset, BYTES))\n              : new NativeTypedArrayConstructor(data);\n          if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);\n          return call$4(typedArrayFrom, TypedArrayConstructor, data);\n        }(), dummy, TypedArrayConstructor);\n      });\n\n      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);\n      forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {\n        if (!(key in TypedArrayConstructor)) {\n          createNonEnumerableProperty$1(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);\n        }\n      });\n      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;\n    }\n\n    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {\n      createNonEnumerableProperty$1(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);\n    }\n\n    enforceInternalState(TypedArrayConstructorPrototype).TypedArrayConstructor = TypedArrayConstructor;\n\n    if (TYPED_ARRAY_TAG) {\n      createNonEnumerableProperty$1(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);\n    }\n\n    var FORCED = TypedArrayConstructor != NativeTypedArrayConstructor;\n\n    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;\n\n    $({ global: true, constructor: true, forced: FORCED, sham: !NATIVE_ARRAY_BUFFER_VIEWS }, exported);\n\n    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {\n      createNonEnumerableProperty$1(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);\n    }\n\n    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {\n      createNonEnumerableProperty$1(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);\n    }\n\n    setSpecies(CONSTRUCTOR_NAME);\n  };\n} else typedArrayConstructor.exports = function () { /* empty */ };\n\nvar createTypedArrayConstructor = typedArrayConstructor.exports;\n\n// `Uint8Array` constructor\n// https://tc39.es/ecma262/#sec-typedarray-objects\ncreateTypedArrayConstructor('Uint8', function (init) {\n  return function Uint8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n\nvar toPrimitive = toPrimitive$2;\n\nvar $TypeError$1 = TypeError;\n\n// `ToBigInt` abstract operation\n// https://tc39.es/ecma262/#sec-tobigint\nvar toBigInt$1 = function (argument) {\n  var prim = toPrimitive(argument, 'number');\n  if (typeof prim == 'number') throw $TypeError$1(\"Can't convert number to bigint\");\n  // eslint-disable-next-line es-x/no-bigint -- safe\n  return BigInt(prim);\n};\n\nvar ArrayBufferViewCore$3 = arrayBufferViewCore;\nvar $fill = arrayFill$1;\nvar toBigInt = toBigInt$1;\nvar classof$1 = classof$9;\nvar call$3 = functionCall;\nvar uncurryThis$4 = functionUncurryThis;\nvar fails$5 = fails$s;\n\nvar aTypedArray$3 = ArrayBufferViewCore$3.aTypedArray;\nvar exportTypedArrayMethod$3 = ArrayBufferViewCore$3.exportTypedArrayMethod;\nvar slice = uncurryThis$4(''.slice);\n\n// V8 ~ Chrome < 59, Safari < 14.1, FF < 55, Edge <=18\nvar CONVERSION_BUG = fails$5(function () {\n  var count = 0;\n  // eslint-disable-next-line es-x/no-typed-arrays -- safe\n  new Int8Array(2).fill({ valueOf: function () { return count++; } });\n  return count !== 1;\n});\n\n// `%TypedArray%.prototype.fill` method\n// https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill\nexportTypedArrayMethod$3('fill', function fill(value /* , start, end */) {\n  var length = arguments.length;\n  aTypedArray$3(this);\n  var actualValue = slice(classof$1(this), 0, 3) === 'Big' ? toBigInt(value) : +value;\n  return call$3($fill, this, actualValue, length > 1 ? arguments[1] : undefined, length > 2 ? arguments[2] : undefined);\n}, CONVERSION_BUG);\n\nvar global$3 = global$t;\nvar call$2 = functionCall;\nvar ArrayBufferViewCore$2 = arrayBufferViewCore;\nvar lengthOfArrayLike = lengthOfArrayLike$8;\nvar toOffset = toOffset$2;\nvar toIndexedObject = toObject$7;\nvar fails$4 = fails$s;\n\nvar RangeError$1 = global$3.RangeError;\nvar Int8Array$2 = global$3.Int8Array;\nvar Int8ArrayPrototype = Int8Array$2 && Int8Array$2.prototype;\nvar $set = Int8ArrayPrototype && Int8ArrayPrototype.set;\nvar aTypedArray$2 = ArrayBufferViewCore$2.aTypedArray;\nvar exportTypedArrayMethod$2 = ArrayBufferViewCore$2.exportTypedArrayMethod;\n\nvar WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS = !fails$4(function () {\n  // eslint-disable-next-line es-x/no-typed-arrays -- required for testing\n  var array = new Uint8ClampedArray(2);\n  call$2($set, array, { length: 1, 0: 3 }, 1);\n  return array[1] !== 3;\n});\n\n// https://bugs.chromium.org/p/v8/issues/detail?id=11294 and other\nvar TO_OBJECT_BUG = WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS && ArrayBufferViewCore$2.NATIVE_ARRAY_BUFFER_VIEWS && fails$4(function () {\n  var array = new Int8Array$2(2);\n  array.set(1);\n  array.set('2', 1);\n  return array[0] !== 0 || array[1] !== 2;\n});\n\n// `%TypedArray%.prototype.set` method\n// https://tc39.es/ecma262/#sec-%typedarray%.prototype.set\nexportTypedArrayMethod$2('set', function set(arrayLike /* , offset */) {\n  aTypedArray$2(this);\n  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);\n  var src = toIndexedObject(arrayLike);\n  if (WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS) return call$2($set, this, src, offset);\n  var length = this.length;\n  var len = lengthOfArrayLike(src);\n  var index = 0;\n  if (len + offset > length) throw RangeError$1('Wrong length');\n  while (index < len) this[offset + index] = src[index++];\n}, !WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS || TO_OBJECT_BUG);\n\nvar arraySlice$2 = arraySliceSimple;\n\nvar floor = Math.floor;\n\nvar mergeSort = function (array, comparefn) {\n  var length = array.length;\n  var middle = floor(length / 2);\n  return length < 8 ? insertionSort(array, comparefn) : merge(\n    array,\n    mergeSort(arraySlice$2(array, 0, middle), comparefn),\n    mergeSort(arraySlice$2(array, middle), comparefn),\n    comparefn\n  );\n};\n\nvar insertionSort = function (array, comparefn) {\n  var length = array.length;\n  var i = 1;\n  var element, j;\n\n  while (i < length) {\n    j = i;\n    element = array[i];\n    while (j && comparefn(array[j - 1], element) > 0) {\n      array[j] = array[--j];\n    }\n    if (j !== i++) array[j] = element;\n  } return array;\n};\n\nvar merge = function (array, left, right, comparefn) {\n  var llength = left.length;\n  var rlength = right.length;\n  var lindex = 0;\n  var rindex = 0;\n\n  while (lindex < llength || rindex < rlength) {\n    array[lindex + rindex] = (lindex < llength && rindex < rlength)\n      ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]\n      : lindex < llength ? left[lindex++] : right[rindex++];\n  } return array;\n};\n\nvar arraySort = mergeSort;\n\nvar userAgent$1 = engineUserAgent;\n\nvar firefox = userAgent$1.match(/firefox\\/(\\d+)/i);\n\nvar engineFfVersion = !!firefox && +firefox[1];\n\nvar UA = engineUserAgent;\n\nvar engineIsIeOrEdge = /MSIE|Trident/.test(UA);\n\nvar userAgent = engineUserAgent;\n\nvar webkit = userAgent.match(/AppleWebKit\\/(\\d+)\\./);\n\nvar engineWebkitVersion = !!webkit && +webkit[1];\n\nvar global$2 = global$t;\nvar uncurryThis$3 = functionUncurryThis;\nvar fails$3 = fails$s;\nvar aCallable = aCallable$9;\nvar internalSort = arraySort;\nvar ArrayBufferViewCore$1 = arrayBufferViewCore;\nvar FF = engineFfVersion;\nvar IE_OR_EDGE = engineIsIeOrEdge;\nvar V8 = engineV8Version;\nvar WEBKIT = engineWebkitVersion;\n\nvar aTypedArray$1 = ArrayBufferViewCore$1.aTypedArray;\nvar exportTypedArrayMethod$1 = ArrayBufferViewCore$1.exportTypedArrayMethod;\nvar Uint16Array = global$2.Uint16Array;\nvar un$Sort = Uint16Array && uncurryThis$3(Uint16Array.prototype.sort);\n\n// WebKit\nvar ACCEPT_INCORRECT_ARGUMENTS = !!un$Sort && !(fails$3(function () {\n  un$Sort(new Uint16Array(2), null);\n}) && fails$3(function () {\n  un$Sort(new Uint16Array(2), {});\n}));\n\nvar STABLE_SORT = !!un$Sort && !fails$3(function () {\n  // feature detection can be too slow, so check engines versions\n  if (V8) return V8 < 74;\n  if (FF) return FF < 67;\n  if (IE_OR_EDGE) return true;\n  if (WEBKIT) return WEBKIT < 602;\n\n  var array = new Uint16Array(516);\n  var expected = Array(516);\n  var index, mod;\n\n  for (index = 0; index < 516; index++) {\n    mod = index % 4;\n    array[index] = 515 - index;\n    expected[index] = index - 2 * mod + 3;\n  }\n\n  un$Sort(array, function (a, b) {\n    return (a / 4 | 0) - (b / 4 | 0);\n  });\n\n  for (index = 0; index < 516; index++) {\n    if (array[index] !== expected[index]) return true;\n  }\n});\n\nvar getSortCompare = function (comparefn) {\n  return function (x, y) {\n    if (comparefn !== undefined) return +comparefn(x, y) || 0;\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (y !== y) return -1;\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (x !== x) return 1;\n    if (x === 0 && y === 0) return 1 / x > 0 && 1 / y < 0 ? 1 : -1;\n    return x > y;\n  };\n};\n\n// `%TypedArray%.prototype.sort` method\n// https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort\nexportTypedArrayMethod$1('sort', function sort(comparefn) {\n  if (comparefn !== undefined) aCallable(comparefn);\n  if (STABLE_SORT) return un$Sort(this, comparefn);\n\n  return internalSort(aTypedArray$1(this), getSortCompare(comparefn));\n}, !STABLE_SORT || ACCEPT_INCORRECT_ARGUMENTS);\n\nvar global$1 = global$t;\nvar apply$1 = functionApply;\nvar ArrayBufferViewCore = arrayBufferViewCore;\nvar fails$2 = fails$s;\nvar arraySlice$1 = arraySlice$5;\n\nvar Int8Array$1 = global$1.Int8Array;\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar $toLocaleString = [].toLocaleString;\n\n// iOS Safari 6.x fails here\nvar TO_LOCALE_STRING_BUG = !!Int8Array$1 && fails$2(function () {\n  $toLocaleString.call(new Int8Array$1(1));\n});\n\nvar FORCED = fails$2(function () {\n  return [1, 2].toLocaleString() != new Int8Array$1([1, 2]).toLocaleString();\n}) || !fails$2(function () {\n  Int8Array$1.prototype.toLocaleString.call([1, 2]);\n});\n\n// `%TypedArray%.prototype.toLocaleString` method\n// https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring\nexportTypedArrayMethod('toLocaleString', function toLocaleString() {\n  return apply$1(\n    $toLocaleString,\n    TO_LOCALE_STRING_BUG ? arraySlice$1(aTypedArray(this)) : aTypedArray(this),\n    arraySlice$1(arguments)\n  );\n}, FORCED);\n\nclass Payload {\n  constructor(data) {\n    // The tag's value is a hardcoded value as per\n    // defined in the NEP [NEP413](https://github.com/near/NEPs/blob/master/neps/nep-0413.md)\n    this.tag = 2147484061;\n    this.message = data.message;\n    this.nonce = data.nonce;\n    this.recipient = data.recipient;\n    if (data.callbackUrl) {\n      this.callbackUrl = data.callbackUrl;\n    }\n  }\n}\nconst payloadSchema = new Map([[Payload, {\n  kind: \"struct\",\n  fields: [[\"tag\", \"u32\"], [\"message\", \"string\"], [\"nonce\", [32]], [\"recipient\", \"string\"], [\"callbackUrl\", {\n    kind: \"option\",\n    type: \"string\"\n  }]]\n}]]);\nconst serializeNep413 = signMessageParams => {\n  const payload = new Payload(Object.assign({}, signMessageParams));\n  return Buffer.from((0,borsh__WEBPACK_IMPORTED_MODULE_2__.serialize)(payloadSchema, payload));\n};\n\nconst verifySignature = ({\n  publicKey,\n  signature,\n  message,\n  nonce,\n  recipient,\n  callbackUrl\n}) => {\n  // Reconstruct the payload that was **actually signed**\n  const payload = new Payload({\n    message,\n    nonce,\n    recipient,\n    callbackUrl\n  });\n  // Serialize payload based on payloadSchema\n  const borshPayload = (0,borsh__WEBPACK_IMPORTED_MODULE_2__.serialize)(payloadSchema, payload);\n  // Hash the payload as in the NEP0413 referenced example\n  // https://github.com/near/NEPs/blob/master/neps/nep-0413.md#references\n  // https://github.com/gagdiez/near-login/blob/main/authenticate/wallet-authenticate.js#L21\n  const hashedPayload = Uint8Array.from(js_sha256__WEBPACK_IMPORTED_MODULE_3__.sha256.array(borshPayload));\n  // Convert real signature to buffer base64\n  const realSignature = Buffer.from(signature, \"base64\");\n  const pk = near_api_js__WEBPACK_IMPORTED_MODULE_0__.utils.PublicKey.from(publicKey);\n  // Verify the signature\n  return pk.verify(hashedPayload, realSignature);\n};\nconst fetchAllUserKeys = ({\n  accountId,\n  network,\n  publicKey\n}) => __awaiter(void 0, void 0, void 0, function* () {\n  const provider = new near_api_js__WEBPACK_IMPORTED_MODULE_0__.providers.JsonRpcProvider({\n    url: network.nodeUrl\n  });\n  const key = yield provider.query({\n    request_type: \"view_access_key\",\n    account_id: accountId,\n    finality: \"final\",\n    public_key: publicKey\n  });\n  return key;\n});\nconst verifyFullKeyBelongsToUser = ({\n  publicKey,\n  accountId,\n  network\n}) => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    permission\n  } = yield fetchAllUserKeys({\n    accountId,\n    network,\n    publicKey\n  });\n  return permission === \"FullAccess\";\n});\n\n// TODO: Remove from `core-js@4` since it's moved to entry points\n\nvar uncurryThis$2 = functionUncurryThis;\nvar defineBuiltIn = defineBuiltIn$8;\nvar regexpExec$2 = regexpExec$3;\nvar fails$1 = fails$s;\nvar wellKnownSymbol = wellKnownSymbol$j;\nvar createNonEnumerableProperty = createNonEnumerableProperty$8;\n\nvar SPECIES = wellKnownSymbol('species');\nvar RegExpPrototype = RegExp.prototype;\n\nvar fixRegexpWellKnownSymbolLogic = function (KEY, exec, FORCED, SHAM) {\n  var SYMBOL = wellKnownSymbol(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails$1(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails$1(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n\n    if (KEY === 'split') {\n      // We can't use real regex here since it causes deoptimization\n      // and serious performance degradation in V8\n      // https://github.com/zloirock/core-js/issues/306\n      re = {};\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n      re.flags = '';\n      re[SYMBOL] = /./[SYMBOL];\n    }\n\n    re.exec = function () { execCalled = true; return null; };\n\n    re[SYMBOL]('');\n    return !execCalled;\n  });\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    FORCED\n  ) {\n    var uncurriedNativeRegExpMethod = uncurryThis$2(/./[SYMBOL]);\n    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n      var uncurriedNativeMethod = uncurryThis$2(nativeMethod);\n      var $exec = regexp.exec;\n      if ($exec === regexpExec$2 || $exec === RegExpPrototype.exec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return { done: true, value: uncurriedNativeRegExpMethod(regexp, str, arg2) };\n        }\n        return { done: true, value: uncurriedNativeMethod(str, regexp, arg2) };\n      }\n      return { done: false };\n    });\n\n    defineBuiltIn(String.prototype, KEY, methods[0]);\n    defineBuiltIn(RegExpPrototype, SYMBOL, methods[1]);\n  }\n\n  if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);\n};\n\nvar uncurryThis$1 = functionUncurryThis;\nvar toIntegerOrInfinity = toIntegerOrInfinity$6;\nvar toString$1 = toString$5;\nvar requireObjectCoercible$1 = requireObjectCoercible$6;\n\nvar charAt$1 = uncurryThis$1(''.charAt);\nvar charCodeAt = uncurryThis$1(''.charCodeAt);\nvar stringSlice$1 = uncurryThis$1(''.slice);\n\nvar createMethod = function (CONVERT_TO_STRING) {\n  return function ($this, pos) {\n    var S = toString$1(requireObjectCoercible$1($this));\n    var position = toIntegerOrInfinity(pos);\n    var size = S.length;\n    var first, second;\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n    first = charCodeAt(S, position);\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size\n      || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF\n        ? CONVERT_TO_STRING\n          ? charAt$1(S, position)\n          : first\n        : CONVERT_TO_STRING\n          ? stringSlice$1(S, position, position + 2)\n          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  };\n};\n\nvar stringMultibyte = {\n  // `String.prototype.codePointAt` method\n  // https://tc39.es/ecma262/#sec-string.prototype.codepointat\n  codeAt: createMethod(false),\n  // `String.prototype.at` method\n  // https://github.com/mathiasbynens/String.prototype.at\n  charAt: createMethod(true)\n};\n\nvar charAt = stringMultibyte.charAt;\n\n// `AdvanceStringIndex` abstract operation\n// https://tc39.es/ecma262/#sec-advancestringindex\nvar advanceStringIndex$1 = function (S, index, unicode) {\n  return index + (unicode ? charAt(S, index).length : 1);\n};\n\nvar call$1 = functionCall;\nvar anObject$1 = anObject$e;\nvar isCallable = isCallable$n;\nvar classof = classofRaw$1;\nvar regexpExec$1 = regexpExec$3;\n\nvar $TypeError = TypeError;\n\n// `RegExpExec` abstract operation\n// https://tc39.es/ecma262/#sec-regexpexec\nvar regexpExecAbstract = function (R, S) {\n  var exec = R.exec;\n  if (isCallable(exec)) {\n    var result = call$1(exec, R, S);\n    if (result !== null) anObject$1(result);\n    return result;\n  }\n  if (classof(R) === 'RegExp') return call$1(regexpExec$1, R, S);\n  throw $TypeError('RegExp#exec called on incompatible receiver');\n};\n\nvar apply = functionApply;\nvar call = functionCall;\nvar uncurryThis = functionUncurryThis;\nvar fixRegExpWellKnownSymbolLogic = fixRegexpWellKnownSymbolLogic;\nvar isRegExp = isRegexp;\nvar anObject = anObject$e;\nvar requireObjectCoercible = requireObjectCoercible$6;\nvar speciesConstructor = speciesConstructor$3;\nvar advanceStringIndex = advanceStringIndex$1;\nvar toLength = toLength$6;\nvar toString = toString$5;\nvar getMethod = getMethod$4;\nvar arraySlice = arraySliceSimple;\nvar callRegExpExec = regexpExecAbstract;\nvar regexpExec = regexpExec$3;\nvar stickyHelpers = regexpStickyHelpers;\nvar fails = fails$s;\n\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;\nvar MAX_UINT32 = 0xFFFFFFFF;\nvar min = Math.min;\nvar $push = [].push;\nvar exec = uncurryThis(/./.exec);\nvar push = uncurryThis($push);\nvar stringSlice = uncurryThis(''.slice);\n\n// Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  // eslint-disable-next-line regexp/no-empty-group -- required for testing\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\n\n// @@split logic\nfixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'.split(/(b)*/)[1] == 'c' ||\n    // eslint-disable-next-line regexp/no-empty-group -- required for testing\n    'test'.split(/(?:)/, -1).length != 4 ||\n    'ab'.split(/(?:ab)*/).length != 2 ||\n    '.'.split(/(.?)(.?)/).length != 4 ||\n    // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing\n    '.'.split(/()()/).length > 1 ||\n    ''.split(/.?/).length\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = toString(requireObjectCoercible(this));\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (separator === undefined) return [string];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) {\n        return call(nativeSplit, string, separator, lim);\n      }\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = call(regexpExec, separatorCopy, string)) {\n        lastIndex = separatorCopy.lastIndex;\n        if (lastIndex > lastLastIndex) {\n          push(output, stringSlice(string, lastLastIndex, match.index));\n          if (match.length > 1 && match.index < string.length) apply($push, output, arraySlice(match, 1));\n          lastLength = match[0].length;\n          lastLastIndex = lastIndex;\n          if (output.length >= lim) break;\n        }\n        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string.length) {\n        if (lastLength || !exec(separatorCopy, '')) push(output, '');\n      } else push(output, stringSlice(string, lastLastIndex));\n      return output.length > lim ? arraySlice(output, 0, lim) : output;\n    };\n  // Chakra, V8\n  } else if ('0'.split(undefined, 0).length) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : call(nativeSplit, this, separator, limit);\n    };\n  } else internalSplit = nativeSplit;\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.es/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = requireObjectCoercible(this);\n      var splitter = separator == undefined ? undefined : getMethod(separator, SPLIT);\n      return splitter\n        ? call(splitter, separator, O, limit)\n        : call(internalSplit, toString(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (string, limit) {\n      var rx = anObject(this);\n      var S = toString(string);\n      var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);\n\n      if (res.done) return res.value;\n\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (UNSUPPORTED_Y ? 'g' : 'y');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;\n        var z = callRegExpExec(splitter, UNSUPPORTED_Y ? stringSlice(S, q) : S);\n        var e;\n        if (\n          z === null ||\n          (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          push(A, stringSlice(S, p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            push(A, z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      push(A, stringSlice(S, p));\n      return A;\n    }\n  ];\n}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);\n\nvar modal$b = {\n\twallet: {\n\t\tconnectYourWallet: \"Connect Your Wallet\",\n\t\twhatIsAWallet: \"What is a Wallet?\",\n\t\tsecureAndManage: \"Secure & Manage Your Digital Assets\",\n\t\tsafelyStore: \"Safely store and transfer your crypto and NFTs.\",\n\t\tlogInToAny: \"Log In to Any NEAR App\",\n\t\tnoNeedToCreate: \"No need to create new accounts or credentials. Connect your wallet and you are good to go!\",\n\t\tgetAWallet: \"Get a Wallet\",\n\t\tuseAWallet: \"Use a wallet to secure and manage your NEAR assets, and to log in to any NEAR app without the need for usernames and passwords.\",\n\t\tconnectionFailed: \"Connection Failed\",\n\t\tconnectionSuccessful: \"Connection Successful\",\n\t\tconnected: \"Connected\",\n\t\tconnectingTo: \"Connecting to\",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"Confirm the connection in the extension window\",\n\t\t\tbrowser: \"Confirm the connection in the wallet after redirect\",\n\t\t\thardware: \"Confirm the connection in the ledger device\",\n\t\t\tbridge: \"Confirm the connection in the wallet\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"Connect with Ledger\",\n\t\tmakeSureYourLedger: \"Make sure your Ledger is connected securely, and that the NEAR app is open on your device\",\n\t\t\"continue\": \"Continue\",\n\t\tspecifyHDPath: \"Specify HD Path\",\n\t\tenterYourPreferredHDPath: \"Enter your preferred HD path, then scan for any active accounts.\",\n\t\tscan: \"Scan\",\n\t\tretry: \"Retry\",\n\t\tledgerIsNotAvailable: \"Ledger is not available\",\n\t\taccessDeniedToUseLedgerDevice: \"Access denied to use Ledger device\",\n\t\tnoAccountsFound: \"No Accounts Found\",\n\t\tselectYourAccounts: \"Select Your Accounts\",\n\t\tconnecting1Account: \"Connecting 1 Account\",\n\t\tcantFindAnyAccount: \"Can't find any account associated with this Ledger. Please create a new NEAR account on\",\n\t\torConnectAnAnotherLedger: \"or connect an another Ledger.\",\n\t\tconnecting: \"Connecting\",\n\t\tofAccounts: \"of Accounts\",\n\t\tfailedToAutomatically: \"Failed to automatically find account id. Provide it manually:\",\n\t\toverviewTheListOfAuthorized: \"Overview the list of authorized account(s), complete sign in by clicking the button below.\",\n\t\tfinish: \"Finish\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"You'll need to install\",\n\t\ttoContinueAfterInstalling: \"to continue. After installing\",\n\t\trefreshThePage: \"refresh the page.\",\n\t\topen: \"Open\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"Copied to clipboard\",\n\t\tfailedToCopy: \"Failed to copy to clipboard\",\n\t\tscanWithYourMobile: \"Scan with Your Mobile Device\",\n\t\tcopyToClipboard: \" Copy to clipboard\",\n\t\tpreferTheOfficial: \"Prefer the official dialogue of\",\n\t\topen: \"Open\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Hardware Wallet\",\n\t\tbrowser: \"Browser Wallet\",\n\t\tinjected: \"Wallet Extension\",\n\t\tbridge: \"Bridge Wallet\",\n\t\tmobile: \"Mobile Wallet\",\n\t\t\"instant-link\": \"Instant Wallet\"\n\t},\n\texportAccounts: {\n\t\tchooseAWallet: \"Choose a Wallet\",\n\t\ttransferYourAccounts: \"Transfer Your Accounts\",\n\t\tselectAWallet: \"Select a wallet that fits your needs and supports your connected accounts.\",\n\t\tselectYourAccounts: \"Select Your Accounts\",\n\t\tafterDecide: \"After you decide on a wallet, you can select which accounts you want to transfer.\",\n\t\tdisclaimer: \"You won’t be able to transfer accounts that have never been funded or used on NEAR.\",\n\t\twarning: \"does not support account export at this time. Please select another wallet.\",\n\t\twalletTypes: {\n\t\t\thardware: \"Hardware Wallet\",\n\t\t\tbrowser: \"Browser Wallet\",\n\t\t\tinjected: \"Wallet Extension\",\n\t\t\tbridge: \"Bridge Wallet\",\n\t\t\tmobile: \"Mobile Wallet\"\n\t\t},\n\t\tselectAccounts: {\n\t\t\ttitle: \"Select Accounts to Transfer\",\n\t\t\tbutton: \"Continue\",\n\t\t\tdeselectAll: \"Deselect All\",\n\t\t\tselectAll: \"Select All\",\n\t\t\tunavailable: \"Transfer Unavailable\",\n\t\t\terror: \"Account does not exist\",\n\t\t\twarningLedger: \"Ledger support required\",\n\t\t\tnoBalance: \"Account not funded\"\n\t\t},\n\t\tgetPassphrase: {\n\t\t\ttitle: \"Copy Temporary Password\",\n\t\t\tdesc: \"You’ll need to enter this password when you begin exporting your accounts to a different wallet.\",\n\t\t\tbutton: \"Continue\",\n\t\t\ttransferButton: \"Transfer Accounts\",\n\t\t\tlabel: \"Click to Copy\",\n\t\t\tcheckLabel: \"I copied or wrote down the password\"\n\t\t},\n\t\tcomplete: {\n\t\t\ttitle: \"Complete the Transfer\",\n\t\t\tdescOne: \"You will now be redirected to the wallet you selected to complete the transfer.\",\n\t\t\tdescTwo: \"Once import part of process is completed from selected wallet, press button to complete the transfer process.\",\n\t\t\tstartOverButton: \"Start Over\",\n\t\t\tbutton: \"Complete\"\n\t\t}\n\t}\n};\nvar component$1 = {\n\tclickToCopy: {\n\t\tlabel: \"Copied\",\n\t\ttooltip: \"Click to copy\"\n\t}\n};\nvar en = {\n\tmodal: modal$b,\n\tcomponent: component$1\n};\n\nvar modal$a = {\n\twallet: {\n\t\tconnectYourWallet: \"Conecta Tu Billetera\",\n\t\twhatIsAWallet: \"¿Que es una Billetera?\",\n\t\tsecureAndManage: \"Resguarda y Administrar Tus Activos Digitales\",\n\t\tsafelyStore: \"Almacena de forma segura y transfiere tus cryptos y NFT's\",\n\t\tlogInToAny: \"Inicie sesión en Cualquier Aplicacion NEAR\",\n\t\tnoNeedToCreate: \"No es necesario crear nuevas cuentas o credenciales, ¡Conecta tu billetera y listo!\",\n\t\tgetAWallet: \"Obten una Billetera\",\n\t\tuseAWallet: \"Usa tu Billetera para resguardar y administrar tus activos en NEAR, e Iniciar sesión en cualquier aplicacion NEAR sin la necesidad de nombres de usuarios y contraseñas\",\n\t\tconnectionFailed: \"Conexión Fallida\",\n\t\tconnectionSuccessful: \"Conexión Existosa\",\n\t\tconnected: \"Conectado\",\n\t\tconnectingTo: \"Conectando a \",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"Confirme la conexión en la ventana de extensión\",\n\t\t\tbrowser: \"Confirme la conexión en la billetera después de la redirección\",\n\t\t\thardware: \"Confirme la conexión en el dispositivo de libro mayor\",\n\t\t\tbridge: \"Confirmar la conexión en la billetera\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"Conectar con Ledger\",\n\t\tmakeSureYourLedger: \"Asegúrese de que su ledger está conectada de forma segura y que la aplicacion NEAR esté abierta en su dispositivo\",\n\t\t\"continue\": \"Continuar\",\n\t\tspecifyHDPath: \"Especifique la ruta HD\",\n\t\tenterYourPreferredHDPath: \"Ingrese su ruta HD prerida,y luego busque cualquier cuenta activa.\",\n\t\tscan: \"Escanear\",\n\t\tretry: \"Reintentar\",\n\t\tledgerIsNotAvailable: \"El Ledger no está disponible\",\n\t\taccessDeniedToUseLedgerDevice: \"Acceso denegado para usar el dispositivo ledger\",\n\t\tnoAccountsFound: \"No se encontraron cuentas\",\n\t\tselectYourAccounts: \"Selecciona tus cuentas\",\n\t\tconnecting1Account: \"Conectando a 1 cuenta\",\n\t\tcantFindAnyAccount: \"No se pudo encontrar ninguna cuenta asociada con este ledger,Por favor crea una nueva cuenta en NEAR\",\n\t\torConnectAnAnotherLedger: \"o conecta otro ledger\",\n\t\tconnecting: \"Conectando\",\n\t\tofAccounts: \"de Cuentas\",\n\t\tfailedToAutomatically: \"No se pudo encontrar automaticamente el id de la cuenta,Ingresalo manualmente:\",\n\t\toverviewTheListOfAuthorized: \"Revise la lista de las cuentas autorizadas,Complete el inicio de sesión haciedo click a countinuacion.\",\n\t\tfinish: \"Finalizar\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"Tendrás que instalar\",\n\t\ttoContinueAfterInstalling: \"Para continuar, Despues de instalar\",\n\t\trefreshThePage: \"Recarga la pagina\",\n\t\topen: \"Abrir\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"Copiado al Portapapeles\",\n\t\tfailedToCopy: \"Falló la copia al Portapapeles\",\n\t\tscanWithYourMobile: \"Busca con tu dispositivo movil\",\n\t\tcopyToClipboard: \" Copiar al Portapapeles\",\n\t\tpreferTheOfficial: \"¿Prefires el diálogo oficial de\",\n\t\topen: \"Abrir\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Hardware Wallet\",\n\t\tbrowser: \"Browser Wallet\",\n\t\tinjected: \"Wallet Extension\",\n\t\tbridge: \"Bridge Wallet\",\n\t\tmobile: \"Mobile Wallet\",\n\t\t\"instant-link\": \"Instant Wallet\"\n\t}\n};\nvar es = {\n\tmodal: modal$a\n};\n\nvar modal$9 = {\n\twallet: {\n\t\tconnectYourWallet: \"连接你的钱包\",\n\t\twhatIsAWallet: \"什么是钱包？\",\n\t\tsecureAndManage: \"保护和管理你的数字资产\",\n\t\tsafelyStore: \"安全存储和转移你的加密货币和NFT\",\n\t\tlogInToAny: \"登录任何 NEAR 应用\",\n\t\tnoNeedToCreate: \"不需要创建新账户或密码。连接你的钱包，即可开始使用！\",\n\t\tgetAWallet: \"获取新账户\",\n\t\tuseAWallet: \"使用钱包来保护和管理你的 NEAR 资产，无需用户名和密码即可登录任何 NEAR 应用\",\n\t\tconnectionFailed: \"连接失败\",\n\t\tconnectionSuccessful: \"连接成功\",\n\t\tconnected: \"已连接\",\n\t\tconnectingTo: \"正在连接\"\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"连接 Ledger\",\n\t\tmakeSureYourLedger: \"确保你的 Ledger 已经安全连接，并且 NEAR 应用已经在你设备上打开\",\n\t\t\"continue\": \"继续\",\n\t\tspecifyHDPath: \"指定 HD 路径\",\n\t\tenterYourPreferredHDPath: \"输入你偏好的 HD 路径，然后为任意活跃账户扫码\",\n\t\tscan: \"扫码\",\n\t\tretry: \"重试\",\n\t\tledgerIsNotAvailable: \"Ledger 不可用\",\n\t\taccessDeniedToUseLedgerDevice: \"访问 Ledger 设备被拒绝\",\n\t\tnoAccountsFound: \"没有找到账户\",\n\t\tselectYourAccounts: \"选择你的账户\",\n\t\tconnecting1Account: \"正在连接1个账户\",\n\t\tcantFindAnyAccount: \"没有找到任何与这个 Ledger 相关联的账户。请创建新账户于\",\n\t\t\"orConnectAnAnotherLedger.\": \"或连接另一个 Ledger\",\n\t\tconnecting: \"正在连接\",\n\t\tofAccounts: \"个账户\",\n\t\tfailedToAutomatically: \"无法自动找到账户ID，请主动提供：\",\n\t\toverviewTheListOfAuthorized: \"请查看已授权的账户列表，点击以下按钮完成登录\",\n\t\tfinish: \"完成\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"你将需要安装\",\n\t\ttoContinueAfterInstalling: \"以继续。安装完\",\n\t\trefreshThePage: \"请刷新页面\",\n\t\topen: \"打开\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"复制到了剪贴板\",\n\t\tfailedToCopy: \"复制到剪贴板失败\",\n\t\tscanWithYourMobile: \"用你的移动设备扫码\",\n\t\tcopyToClipboard: \" 复制到剪贴板\",\n\t\tpreferTheOfficial: \"希望使用官方对话框于\",\n\t\topen: \"打开\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Hardware Wallet\",\n\t\tbrowser: \"Browser Wallet\",\n\t\tinjected: \"Wallet Extension\",\n\t\tbridge: \"Bridge Wallet\",\n\t\tmobile: \"Mobile Wallet\",\n\t\t\"instant-link\": \"Instant Wallet\"\n\t}\n};\nvar zh = {\n\tmodal: modal$9\n};\n\nvar modal$8 = {\n\twallet: {\n\t\tconnectYourWallet: \"Свържете вашия Портфейл\",\n\t\twhatIsAWallet: \"Какво е Портфейл?\",\n\t\tsecureAndManage: \"Защитете и управлявайте дигиталните си активи\",\n\t\tsafelyStore: \"Съхранявайте и прехвърляйте безопасно вашите крипто и NFT.\",\n\t\tlogInToAny: \"Използвайте всяко приложение на NEAR\",\n\t\tnoNeedToCreate: \"Няма нужда да създавате нови профили. Свържете портфейла си и сте готови!\",\n\t\tgetAWallet: \"Създайте Портфейл\",\n\t\tuseAWallet: \"Използвайте портфейла, за да защитите и управлявате активите си на NEAR както и да използвате всяко приложение на NEAR без нужда от потребителски имена и пароли.\",\n\t\tconnectionFailed: \"Свързването неуспешно\",\n\t\tconnectionSuccessful: \"Свързването успешно\",\n\t\tconnected: \"Свързан\",\n\t\tconnectingTo: \"Свързване към\",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"Потвърдете свързването в прозореца на разширението\",\n\t\t\tbrowser: \"Потвърдете свързването в портфейла след пренасочването\",\n\t\t\thardware: \"Потвърдете свързването в хардуерния портфейл\",\n\t\t\tbridge: \"Потвърдете връзката в портфейла\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"Свържете се с Ledger\",\n\t\tmakeSureYourLedger: \"Уверете се, че вашият Ledger е свързан и че приложението NEAR е отворено нa него.\",\n\t\t\"continue\": \"Продължете\",\n\t\tspecifyHDPath: \"Посочете HD път\",\n\t\tenterYourPreferredHDPath: \"Въведете предпочитания HD път, след което сканирайте за активни акаунти.\",\n\t\tscan: \"Сканирайте\",\n\t\tretry: \"Опитайте отново\",\n\t\tledgerIsNotAvailable: \"Ledger устройството не е достъпно\",\n\t\taccessDeniedToUseLedgerDevice: \"Достъпът за използване на Ledger е отказан\",\n\t\tnoAccountsFound: \"Няма намерени профили\",\n\t\tselectYourAccounts: \"Изберете вашите профили\",\n\t\tconnecting1Account: \"Свързване на 1 профил\",\n\t\tcantFindAnyAccount: \"Няма намерени профили, съврзани с този Ledger. Моля, създайте нов NEAR профил на\",\n\t\torConnectAnAnotherLedger: \"или свържете друг Ledger.\",\n\t\tconnecting: \"Свързване\",\n\t\tofAccounts: \"от профили\",\n\t\tfailedToAutomatically: \"Автоматичното намиране на профила не бе успешно. Въведете го ръчно:\",\n\t\toverviewTheListOfAuthorized: \"Прегледайте списъка с упълномощени профили, завършете влизането, като щракнете върху бутона по-долу..\",\n\t\tfinish: \"Завършете\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"Ще трябва да инсталирате\",\n\t\ttoContinueAfterInstalling: \"за да продължите. След инсталиране\",\n\t\trefreshThePage: \"презаредете страницата.\",\n\t\topen: \"Отворете\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"Копирано в клипборда\",\n\t\tfailedToCopy: \"Неуспешно копиране в клипборда\",\n\t\tscanWithYourMobile: \" Сканирайте с мобилното си устройство\",\n\t\tcopyToClipboard: \" Копирайте в клипборда\",\n\t\tpreferTheOfficial: \"Предпочитан език за кореспонденция\",\n\t\topen: \"Отворете\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Hardware Wallet\",\n\t\tbrowser: \"Browser Wallet\",\n\t\tinjected: \"Wallet Extension\",\n\t\tbridge: \"Bridge Wallet\",\n\t\tmobile: \"Mobile Wallet\",\n\t\t\"instant-link\": \"Instant Wallet\"\n\t}\n};\nvar bg = {\n\tmodal: modal$8\n};\n\nvar modal$7 = {\n\twallet: {\n\t\tconnectYourWallet: \"지갑 연결하기\",\n\t\twhatIsAWallet: \"지갑은 무슨 역할을 하나요?\",\n\t\tsecureAndManage: \"당신의 디지털 자산을 보호하고 관리합니다.\",\n\t\tsafelyStore: \"암호화폐와 NFT를 안전하게 저장하고 전송할 수 있습니다.\",\n\t\tlogInToAny: \"NEAR App에 로그인합니다.\",\n\t\tnoNeedToCreate: \"새로운 계정이나 비밀번호를 만들 필요 없이 지갑을 연결한 후 바로 사용할 수 있습니다.\",\n\t\tgetAWallet: \"지갑 가져오기\",\n\t\tuseAWallet: \"지갑을 사용하여 NEAR 자산을 보호·관리하고, 아이디와 비밀번호 없이 NEAR 앱에 로그인할 수 있습니다.\",\n\t\tconnectionFailed: \"연결 실패\",\n\t\tconnectionSuccessful: \"연결 성공\",\n\t\tconnected: \"Connected\",\n\t\tconnectingTo: \"연결 중: \",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"익스텐션 창에서 연결을 확인하세요\",\n\t\t\tbrowser: \"리다이렉트 된 지갑에서 연결을 확인하세요\",\n\t\t\thardware: \"Ledger 기기에서 연결을 확인하세요\",\n\t\t\tbridge: \"지갑에서 연결 확인\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"Ledger 연결하기\",\n\t\tmakeSureYourLedger: \"Ledger가 안전하게 연결되어 있고, NEAR 앱이 열려 있는 지 확인하세요\",\n\t\t\"continue\": \"계속하기\",\n\t\tspecifyHDPath: \"HD Path 지정하기\",\n\t\tenterYourPreferredHDPath: \"원하는 HD Path를 선택하고, 활성화된 계정이 있는 지 검색하세요\",\n\t\tscan: \"검색\",\n\t\tretry: \"다시 시도\",\n\t\tledgerIsNotAvailable: \"Ledger를 사용할 수 없습니다\",\n\t\taccessDeniedToUseLedgerDevice: \"Ledger 기기 접근 권한이 거부되었습니다\",\n\t\tnoAccountsFound: \"계정을 찾을 수 없습니다\",\n\t\tselectYourAccounts: \"계정 선택하기\",\n\t\tconnecting1Account: \"하나의 계정에 연결\",\n\t\tcantFindAnyAccount: \"Ledger와 연결된 계정을 찾을 수 없습니다. 새로운 계정을 생성하거나 \",\n\t\torConnectAnAnotherLedger: \"다른 Ledger를 연결하세요\",\n\t\tconnecting: \"계정 연결하기: \",\n\t\tofAccounts: \"개 계정을 찾았습니다\",\n\t\tfailedToAutomatically: \"계정 ID를 찾지 못했습니다. 수동으로 입력해주세요.\",\n\t\toverviewTheListOfAuthorized: \"인증된 계정 목록을 확인한 후 아래 버튼을 클릭하여 로그인을 완료하세요\",\n\t\tfinish: \"완료\"\n\t},\n\twalletTypes: {\n\t\thardware: \"하드웨어 지갑\",\n\t\tbrowser: \"브라우저 지갑\",\n\t\tinjected: \"지갑 확장\",\n\t\tbridge: \"브리지 지갑\",\n\t\tmobile: \"모바일 지갑\",\n\t\t\"instant-link\": \"인스턴트 지갑\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"다음 확장 프로그램을 설치해주세요:\",\n\t\ttoContinueAfterInstalling: \". 설치 완료 후 페이지 새로 고침이 필요합니다. \",\n\t\trefreshThePage: \"새로 고침\",\n\t\topen: \"Open\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"클립보드에 복사 완료\",\n\t\tfailedToCopy: \"클립보드에 복사 실패\",\n\t\tscanWithYourMobile: \"모바일 장치를 사용하여 스캔해주세요\",\n\t\tcopyToClipboard: \" 클립보드에 복사하기\",\n\t\tpreferTheOfficial: \"다음 프로그램에서 제공하는 공식 프로세스를 선호하십니까: \",\n\t\topen: \"Open\"\n\t}\n};\nvar ko = {\n\tmodal: modal$7\n};\n\nvar modal$6 = {\n\twallet: {\n\t\tconnectYourWallet: \"Kết nối ví của bạn\",\n\t\twhatIsAWallet: \"Ví là gì?\",\n\t\tsecureAndManage: \"Bảo mật & Quản lý tài sản số của bạn\",\n\t\tsafelyStore: \"Lưu trữ và chuyển tiền điện tử và NFT của bạn một cách an toàn.\",\n\t\tlogInToAny: \"Đăng nhập vào bất kỳ ứng dụng trên NEAR\",\n\t\tnoNeedToCreate: \"Không cần tạo tài khoản hoặc thông tin đăng nhập mới. Kết nối ví của bạn và bắt đầu!\",\n\t\tgetAWallet: \"Tạo Ví\",\n\t\tuseAWallet: \"Sử dụng ví để bảo mật và quản lý tài sản trên NEAR của bạn và đăng nhập vào bất kỳ ứng dụng NEAR nào, không cần tên người dùng và mật khẩu.\",\n\t\tconnectionFailed: \"Kết nối thất bại\",\n\t\tconnectionSuccessful: \"Kết nối thành công\",\n\t\tconnected: \"Đã kết nối\",\n\t\tconnectingTo: \"Đang kết nối tới\",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"Xác nhận kết nối trong cửa sổ tiện ích mở rộng\",\n\t\t\tbrowser: \"Xác nhận kết nối trong ví sau khi được chuyển hướng\",\n\t\t\thardware: \"Xác nhận kết nối với ví lạnh\",\n\t\t\tbridge: \"Xác nhận kết nối trong ví\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"Kết nối ví Ledger\",\n\t\tmakeSureYourLedger: \"Đảm bảo Ledger của bạn được kết nối an toàn và ứng dụng NEAR đang mở sẵn trên thiết bị\",\n\t\t\"continue\": \"Tiếp tục\",\n\t\tspecifyHDPath: \"Chỉ định HD Path\",\n\t\tenterYourPreferredHDPath: \"Nhập HD Path của bạn, sau đó quét tìm các tài khoản hoạt động\",\n\t\tscan: \"Quét\",\n\t\tretry: \"Thử lại\",\n\t\tledgerIsNotAvailable: \"Ledger không khả dụng\",\n\t\taccessDeniedToUseLedgerDevice: \"Truy cập Ledger bị từ chối\",\n\t\tnoAccountsFound: \"Không tìm thấy tài khoản\",\n\t\tselectYourAccounts: \"Chọn tài khoản của bạn\",\n\t\tconnecting1Account: \"Đang kết nối 1 tài khoản\",\n\t\tcantFindAnyAccount: \"Không thể tìm thấy bất kỳ tài khoản nào được liên kết với Ledger này. Vui lòng tạo một tài khoản NEAR mới\",\n\t\torConnectAnAnotherLedger: \"hoặc kết nối với ví Ledger khác.\",\n\t\tconnecting: \"Đang kết nối\",\n\t\tofAccounts: \"của tài khoản\",\n\t\tfailedToAutomatically: \"Không thể tự động tìm id tài khoản. Nhập thủ công:\",\n\t\toverviewTheListOfAuthorized: \"Tổng quan danh sách các tài khoản được ủy quyền, hoàn tất đăng nhập bằng cách bấm vào nút bên dưới.\",\n\t\tfinish: \"Hoàn thành\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"Bạn sẽ cần cài đặt\",\n\t\ttoContinueAfterInstalling: \"để bắt đầu. Sau khi cài đặt xong\",\n\t\trefreshThePage: \"Tải lại trang.\",\n\t\topen: \"Mở\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"Đã sao chép vào bảng ghi tạm\",\n\t\tfailedToCopy: \"Sao chép vào bảng ghi tạm thất bại\",\n\t\tscanWithYourMobile: \"Quét với điện thoại của bạn\",\n\t\tcopyToClipboard: \" Sao chép vào bảng ghi tạm\",\n\t\tpreferTheOfficial: \"Dialogue chính thức của\",\n\t\topen: \"Mở\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Ví lạnh\",\n\t\tbrowser: \"Ví trình duyệt\",\n\t\tinjected: \"Ví tiện ích mở rộng\",\n\t\tbridge: \"Ví Cầu\",\n\t\tmobile: \"Ví Mobile\",\n\t\t\"instant-link\": \"Ví tức thì\"\n\t},\n\texportAccounts: {\n\t\tchooseAWallet: \"Chọn ví\",\n\t\ttransferYourAccounts: \"Chuyển tài khoản\",\n\t\tselectAWallet: \"Chọn ví phù hợp với nhu cầu của bạn, ví được chọn cần hỗ trợ các tài khoản đang sử dụng.\",\n\t\tselectYourAccounts: \"Chọn tài khoản\",\n\t\tafterDecide: \"Sau khi chọn được tài khoản bạn có chuyển.\",\n\t\tdisclaimer: \"Bạn không thể chuyển tài khoản nếu tài khoản đó chưa được nhận tiền hoặc chưa phát sinh giao dịch trên NEAR.\",\n\t\twarning: \"không hỗ trợ xuất tài khoản. Vui lòng chọn ví khác.\",\n\t\twalletTypes: {\n\t\t\thardware: \"Ví lạnh\",\n\t\t\tbrowser: \"Ví trình duyệt\",\n\t\t\tinjected: \"Ví tiện ích mở rộng\",\n\t\t\tbridge: \"Ví Cầu\",\n\t\t\tmobile: \"Ví Mobile\"\n\t\t},\n\t\tselectAccounts: {\n\t\t\ttitle: \"Chọn tài khoản để chuyển\",\n\t\t\tbutton: \"Lấy cụm mật khẩu\",\n\t\t\tdeselectAll: \"Bỏ chọn tất cả\",\n\t\t\tselectAll: \"Chọn tất cả\",\n\t\t\tunavailable: \"Chuyển không khả dụng\",\n\t\t\terror: \"Tài khoản không tồn tại\",\n\t\t\twarningLedger: \"Yêu cầu hỗ trợ Ledger\",\n\t\t\tnoBalance: \"Tài khoản trống\"\n\t\t},\n\t\tgetPassphrase: {\n\t\t\ttitle: \"Sao chép mật khẩu tạm thời\",\n\t\t\tdesc: \"Bạn sẽ cần nhập mật khẩu khi bắt đầu xuất các khoản tới ví khác.\",\n\t\t\tbutton: \"Tiếp tục\",\n\t\t\tlabel: \"Bấm để sao chép\",\n\t\t\tcheckLabel: \"Tôi đã chép hoặc ghi lại mật khẩu\"\n\t\t},\n\t\tcomplete: {\n\t\t\ttitle: \"Hoàn thành chuyển\",\n\t\t\tdescOne: \"Bạn sẽ được chuyển hướng tới tài khoản đã chọn để hoàn tất quá trình.\",\n\t\t\tdescTwo: \"Sau khi nhập, nhấn nút để hoàn tất quy trình chuyển.\",\n\t\t\tbutton: \"Hoàn thành\"\n\t\t}\n\t}\n};\nvar component = {\n\tclickToCopy: {\n\t\tlabel: \"Đã sao chép\",\n\t\ttooltip: \"Bấm để sao chép\"\n\t}\n};\nvar vi = {\n\tmodal: modal$6,\n\tcomponent: component\n};\n\nvar modal$5 = {\n\twallet: {\n\t\tconnectYourWallet: \"अपना वॉलेट (Wallet) कनेक्ट करें।\",\n\t\twhatIsAWallet: \"वॉलेट क्या है?\",\n\t\tsecureAndManage: \"सुरक्षित और प्रबंधित करें।\",\n\t\tsafelyStore: \"अपनी क्रिप्टोकरेंसी और एनएफटी को सुरक्षित रूप से स्टोर और ट्रांसफर करें।\",\n\t\tlogInToAny: \"NEAR पर किसी भी ऐप में साइन इन करें।\",\n\t\tnoNeedToCreate: \"नए खाते या लॉगिन बनाने की आवश्यकता नहीं है। अपना वॉलेट(NEAR Wallet)कनेक्ट करें और आरंभ करें।\",\n\t\tgetAWallet: \"एक वॉलेट बनाएँ।\",\n\t\tuseAWallet: \"अपनी NEAR संपत्तियों को सुरक्षित और प्रबंधित करने के लिए वॉलेट का उपयोग करें और किसी भी NEAR ऐप (app) में लॉग इन करें, किसी उपयोगकर्ता (user) नाम और पासवर्ड की आवश्यकता नहीं है।\",\n\t\tconnectionFailed: \"कनेक्शन विफल|\",\n\t\tconnectionSuccessful: \"कनेक्शन सफल|\",\n\t\tconnected: \"वॉलेट जुड़ गया|\",\n\t\tconnectingTo: \"वॉलेट जुड़ रहा हे|\",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"एक्सटेंशन विंडो में कनेक्शन की पुष्टि करें|\",\n\t\t\tbrowser: \"रीडायरेक्ट होने के बाद वॉलेट में कनेक्शन की पुष्टि करें|\",\n\t\t\thardware: \"कोल्ड वॉलेट के साथ कनेक्शन की पुष्टि करें|\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"लेजर(Ledger)वॉलेट कनेक्ट करें|\",\n\t\tmakeSureYourLedger: \"सुनिश्चित करें कि आपका लेजर सुरक्षित रूप से जुड़ा हुआ है और NEAR ऐप आपके डिवाइस (Device)पर पहले से ही खुला है|\",\n\t\t\"continue\": \"जारी रखे|\",\n\t\tspecifyHDPath: \"हार्ड डिस्क(Hard Disk)पथ(Path)निर्धारित करे|\",\n\t\tenterYourPreferredHDPath: \"अपना एचडी पथ दर्ज करें, फिर सक्रिय खातों के लिए स्कैन करें|\",\n\t\tscan: \"स्कैन करे|\",\n\t\tretry: \"दोबारा प्रयास करे|\",\n\t\tledgerIsNotAvailable: \"लेजर उपलब्ध नहीं है|\",\n\t\taccessDeniedToUseLedgerDevice: \"लेजर डिवाइस का उपयोग करने के लिए प्रवेश निषेध|\",\n\t\tnoAccountsFound: \"खाता नहीं मिला|\",\n\t\tselectYourAccounts: \"अपने खाते चुनें|\",\n\t\tconnecting1Account: \"एक खाता कनेक्ट हो रहा है|\",\n\t\tcantFindAnyAccount: \"इस लेजर से जुड़ा कोई खाता नहीं मिला। कृपया एक नया NEAR खाता बनाएँ|\",\n\t\torConnectAnAnotherLedger: \"अथवा दूसरे लेजर वॉलेट से कनेक्ट करें।\",\n\t\tconnecting: \"जुड़ रहा हे|\",\n\t\tofAccounts: \"खाता अब जुड़ा नहीं हे|\",\n\t\tfailedToAutomatically: \"खाता आईडी स्वचालित रूप से खोजने में असमर्थ। मैन्युअल (Manuall) रूप से कोशिश करें|\",\n\t\toverviewTheListOfAuthorized: \"अवलोकन अधिकृत की सूची, नीचे दिए गए बटन पर क्लिक करके लॉगिन पूरा करें।\",\n\t\tfinish: \"समाप्त|\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"आपको इंस्टॉल करना होगा|\",\n\t\ttoContinueAfterInstalling: \"इंस्टॉल करने के बाद जारी रखे|\",\n\t\trefreshThePage: \"पुन: लोड करें।\",\n\t\topen: \"खोले|\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"क्लिपबोर्ड(Clipboard)पर कॉपी किया गया|\",\n\t\tfailedToCopy: \"क्लिपबोर्ड पर कॉपी करना विफल रहा|\",\n\t\tscanWithYourMobile: \"अपने फोन (Mobile)से स्कैन करें|\",\n\t\tcopyToClipboard: \" क्लिपबोर्ड पर कॉपी करें|\",\n\t\tpreferTheOfficial: \"आधिकारिक संवाद को प्राथमिकता दें|\",\n\t\topen: \"खोले|\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Hardware Wallet\",\n\t\tbrowser: \"Browser Wallet\",\n\t\tinjected: \"Wallet Extension\",\n\t\tbridge: \"Bridge Wallet\",\n\t\tmobile: \"Mobile Wallet\",\n\t\t\"instant-link\": \"Instant Wallet\"\n\t}\n};\nvar hi = {\n\tmodal: modal$5\n};\n\nvar modal$4 = {\n\twallet: {\n\t\tconnectYourWallet: \"صل محفظتك\",\n\t\twhatIsAWallet: \"ما هي المحفظة؟\",\n\t\tsecureAndManage: \"تأمين وإدارة الممتلكات الرقمية الخاصة بك\",\n\t\tsafelyStore: \"قم بتخزين و ارسال عملاتك و أصولك الرقمية بأمان\",\n\t\tlogInToAny: \"سجل الدخول إلى أي تطبيق يستخدم نير\",\n\t\tnoNeedToCreate: \".لا داعي لإنشاء حساب جديد. فقط قم بتوصيل محفظتك وانطلق\",\n\t\tgetAWallet: \"احصل على محفظة\",\n\t\tuseAWallet: \"استخدم محفظة لتأمين وإدارة أصول نير الخاصة بك، وادخل لأي تطبيق يستخدم نير دون الحاجة إلى اسم المستخدم وكلمةالمرور\",\n\t\tconnectionFailed: \"اتصال فاشل\",\n\t\tconnectionSuccessful: \"اتصال ناجح\",\n\t\tconnected: \"متصل\",\n\t\tconnectingTo: \"جاري الاتصال ب\",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"وافق على الاتصال في نافذة الإضافة\",\n\t\t\tbrowser: \"وافق على الاتصال في المحفظة بعد إعادة توجيه\",\n\t\t\thardware: \"وافق على الاتصال في جهاز ليدجر\",\n\t\t\tbridge: \"وافق على الاتصال في المحفظة\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"اتصل مع ليدجر\",\n\t\tmakeSureYourLedger: \"تأكد أن ليدجر متصل بأمان, و أن تطبيق نير مفتوح في جهازك\",\n\t\t\"continue\": \"تابع\",\n\t\tspecifyHDPath: \"حدد مسار الحساب\",\n\t\tenterYourPreferredHDPath: \"أدخل مسار الحساب المفضل، ثم ابحث عن كل الحسابات النشطة\",\n\t\tscan: \"مسح\",\n\t\tretry: \"أعد المحاولة\",\n\t\tledgerIsNotAvailable: \"ليدجر غير متوفر\",\n\t\taccessDeniedToUseLedgerDevice: \"تم رفض الاتصال بليدجر\",\n\t\tnoAccountsFound: \"لم يتم العثور على أي حسابات\",\n\t\tselectYourAccounts: \"حدد حساباتك\",\n\t\tconnecting1Account: \"جاري الاتصال بحساب واحد\",\n\t\tcantFindAnyAccount: \"لا يمكن العثور على أي حساب مرتبط بهذا ليدجر الرجاء إنشاء حساب نير جديد على\",\n\t\torConnectAnAnotherLedger: \"او اربط جهاز ليدجر آخر\",\n\t\tconnecting: \"جاري الاتصال\",\n\t\tofAccounts: \"من الحسابات\",\n\t\tfailedToAutomatically: \"فشل في الاتصال بالحساب تلقائيا. يرجى الاتصال بالحساب يدويا\",\n\t\toverviewTheListOfAuthorized: \"لائحة الحسابات المصرح بها, أكمل تسجيل الدخول بالنقر على الزر أدناه\",\n\t\tfinish: \"إنهاء\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"ستحتاج لتثبيت\",\n\t\ttoContinueAfterInstalling: \"للاستكمال. بعد التثبيت\",\n\t\trefreshThePage: \"قم بتحديث الصفحة\",\n\t\topen: \"افتح\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"تم النسخ\",\n\t\tfailedToCopy: \"فشل النسخ\",\n\t\tscanWithYourMobile: \"امسح بجهازك المحمول\",\n\t\tcopyToClipboard: \"نسخ\",\n\t\tpreferTheOfficial: \"تفضل الحوار الرسمي ل\",\n\t\topen: \"فتح\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Hardware Wallet\",\n\t\tbrowser: \"Browser Wallet\",\n\t\tinjected: \"Wallet Extension\",\n\t\tbridge: \"Bridge Wallet\",\n\t\tmobile: \"Mobile Wallet\",\n\t\t\"instant-link\": \"Instant Wallet\"\n\t}\n};\nvar ar = {\n\tmodal: modal$4\n};\n\nvar modal$3 = {\n\twallet: {\n\t\tconnectYourWallet: \"Spojite crypto novčanik!\",\n\t\twhatIsAWallet: \"Što je to crypto novčanik?\",\n\t\tsecureAndManage: \"Osigurajte i upravljajte svojom digitalnom imovinom.\",\n\t\tsafelyStore: \"Sigurno pohranite i prebacite svoj crypto i NFT-eve.\",\n\t\tlogInToAny: \" Prijavite se u bilo koju NEAR aplikaciju\",\n\t\tnoNeedToCreate: \"Nema potrebe za stvaranjem novih naloga ili korisničkih podataka. Spojite svoj crypto novčanik i spremni ste!\",\n\t\tgetAWallet: \"Otvorite crypto novčanik\",\n\t\tuseAWallet: \"Koristite crypto novčanik da biste osigurali i upravljali svojom NEAR imovinom, te se prijavite u bilo koju NEAR aplikaciju bez korisničkog imena i lozinke.\",\n\t\tconnectionFailed: \"Neuspješno povezivanje.\",\n\t\tconnectionSuccessful: \"Uspješno povezivanje.\",\n\t\tconnected: \"Povezano.\",\n\t\tconnectingTo: \"Povezivanje u tijeku\",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"Potvrdite vezu u eksternom prozoru\",\n\t\t\tbrowser: \"Nakon redirekcije, potvrdite vezu u novčaniku\",\n\t\t\thardware: \"Potvrdite vezu sa novčanikom\",\n\t\t\tbridge: \"Potvrdite vezu u novčaniku\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"Povežite se hardverskim novčanikom\",\n\t\tmakeSureYourLedger: \"Osigurajte sigurnu vezu s hardverskim novčanikom, te da je NEAR aplikacija otvorena na vašem uređaju\",\n\t\t\"continue\": \"Nastavite\",\n\t\tspecifyHDPath: \"Specificirajte HD putanju\",\n\t\tenterYourPreferredHDPath: \"Upišite preferiranu HD putanju, zatim skenirajte aktivne naloge\",\n\t\tscan: \"Skenirajte\",\n\t\tretry: \"Pokušajte ponovno\",\n\t\tledgerIsNotAvailable: \"Hardverski novčanik nije dostupan.\",\n\t\taccessDeniedToUseLedgerDevice: \"Odbijen pristup za korištenjem hardverskog novčanika\",\n\t\tnoAccountsFound: \"Nalozi nisu pronađeni\",\n\t\tselectYourAccounts: \"Odaberite svoje naloge\",\n\t\tconnecting1Account: \"Povezivanje 1 naloga\",\n\t\tcantFindAnyAccount: \"Nije moguće pronaći niti jedan nalog povezan s ovim hardverskim novčanikom. Molimo vas, kreirajte novi NEAR nalog\",\n\t\torConnectAnAnotherLedger: \"Ili povežite drugi hardverski novčanik.\",\n\t\tconnecting: \"Povezivanje\",\n\t\tofAccounts: \"naloga\",\n\t\tfailedToAutomatically: \"Neuspješno automatsko pronalaženje ID naloga. Unesite ručno:\",\n\t\toverviewTheListOfAuthorized: \"Pregledajte popis odobrenih naloga, završite prijavu pritiskom na niže prikazani gumb.\",\n\t\tfinish: \"Završite\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \" Potrebno je instalirati modal\",\n\t\ttoContinueAfterInstalling: \"za nastavak. Nakon instalacije\",\n\t\trefreshThePage: \"osvježite stranicu.\",\n\t\topen: \"Otvorite QR modal\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"Kopirano u međuspremnik\",\n\t\tfailedToCopy: \"Neupsješno kopiranje u međuspremnik\",\n\t\tscanWithYourMobile: \"Skenirajte svojim mobilnim uređajem\",\n\t\tcopyToClipboard: \" Kopirajte u međuspremnik\",\n\t\tpreferTheOfficial: \"Odaberite službeni dijalog\",\n\t\topen: \"Otvorite\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Hardware Wallet\",\n\t\tbrowser: \"Browser Wallet\",\n\t\tinjected: \"Wallet Extension\",\n\t\tbridge: \"Bridge Wallet\",\n\t\tmobile: \"Mobile Wallet\",\n\t\t\"instant-link\": \"Instant Wallet\"\n\t},\n\texportAccounts: {\n\t\tchooseAWallet: \"Odaberi Wallet\",\n\t\ttransferYourAccounts: \"Prenesi svoje naloge\",\n\t\tselectAWallet: \"Odaberite wallet koji odgovara vašim potrebama i podržava vaše povezane naloge.\",\n\t\tselectYourAccounts: \"Odaberi svoje naloge\",\n\t\tafterDecide: \"Nakon što odlučite koji wallet koristite, možete odabrati koje račune želite prebaciti.\",\n\t\tdisclaimer: \"Nećete moći prebaciti naloge koji nisu nikada bili korišteni na NEAR-u.\",\n\t\twarning: \"ne podržava izvoz naloga u ovom trenutku. Molimo odaberite drugi wallet.\",\n\t\twalletTypes: {\n\t\t\thardware: \"Hardware Wallet\",\n\t\t\tbrowser: \"Browser Wallet\",\n\t\t\tinjected: \"Wallet Extension\",\n\t\t\tbridge: \"Bridge Wallet\",\n\t\t\tmobile: \"Mobile Wallet\"\n\t\t},\n\t\tselectAccounts: {\n\t\t\ttitle: \"Odaberi naloge za prijenos\",\n\t\t\tbutton: \"Generiraj lozinku\",\n\t\t\tdeselectAll: \"Makni odabir sa svih\",\n\t\t\tselectAll: \"Odaberi sve\",\n\t\t\tunavailable: \"Prijenos nije dostupan\",\n\t\t\terror: \"Nalog ne postoji\",\n\t\t\twarningLedger: \"Potrebna ledger podrška\",\n\t\t\tnoBalance: \"Nalog nema sredstava\"\n\t\t},\n\t\tgetPassphrase: {\n\t\t\ttitle: \"Kopiraj privremenu lozinku\",\n\t\t\tdesc: \"Bit će potrebno unijeti ovu lozinku na početku izvoza naloga na drugi wallet.\",\n\t\t\tbutton: \"Nastavi\",\n\t\t\tlabel: \"Klikni za kopiju\",\n\t\t\tcheckLabel: \"Kopirao sam ili zapisao lozinku\"\n\t\t},\n\t\tcomplete: {\n\t\t\ttitle: \"Završi prijenos\",\n\t\t\tdescOne: \"You will now be redirected to the wallet you selected to complete the transfer.\",\n\t\t\tdescTwo: \"Kada je unos s odabranog walleta završen, pritisnite gumb da biste završili prijenos.\",\n\t\t\tbutton: \"Završi\"\n\t\t}\n\t}\n};\nvar hr = {\n\tmodal: modal$3\n};\n\nvar modal$2 = {\n\twallet: {\n\t\tconnectYourWallet: \"Поврзете го вашиот новчаник!\",\n\t\twhatIsAWallet: \"Што е новчаник?\",\n\t\tsecureAndManage: \"Заштитете ги и управувајте со вашите дигитални средства.\",\n\t\tsafelyStore: \"Безбедно складирајте и извршувајте трансакции со вашите крипто и NFT.\",\n\t\tlogInToAny: \"Најавете се на која било NEAR апликација\",\n\t\tnoNeedToCreate: \"Нема потреба да креирате нови сметки или ингеренции. Поврзете го вашиот паричник и сте подготвени!\",\n\t\tgetAWallet: \"Направете новчаник\",\n\t\tuseAWallet: \"Користете паричник за да ги заштитите и управувате вашите NEAR средства и да се најавите на која било NEAR апликација без потреба од кориснички имиња и лозинки.\",\n\t\tconnectionFailed: \"Поврзувањето не беше успешно.\",\n\t\tconnectionSuccessful: \"Успешно поврзување.\",\n\t\tconnected: \"Поврзано.\",\n\t\tconnectingTo: \"Поврзување со\",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"Потврдете го поврзувањето во екстерниот прозорец\",\n\t\t\tbrowser: \"По преусмерувањето, потврдете го поврзувањето од новчаниокт\",\n\t\t\thardware: \"Потврдете го поврзувањето со ладен новчаник\",\n\t\t\tbridge: \"Потврдете ја врската во новчаникот\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"Поврзете се со Леџер\",\n\t\tmakeSureYourLedger: \"Осигурајте се дека вашиот Леџер е поврзан безбедно, и дека NEAR апликацијата е отворена на вашиот уред\",\n\t\t\"continue\": \"Продолжете\",\n\t\tspecifyHDPath: \"Наведете ХД локација\",\n\t\tenterYourPreferredHDPath: \"Внесете ја вашата преферирана ХД локација, а потоа скенирајте да ги најдете активните сметки.\",\n\t\tscan: \"Скенирајте\",\n\t\tretry: \"Обидете се повторно\",\n\t\tledgerIsNotAvailable: \"Леџерот не е достапен.\",\n\t\taccessDeniedToUseLedgerDevice: \"Пристапот за користење на Леџер уред е одбиен\",\n\t\tnoAccountsFound: \"Нема најдени сметки\",\n\t\tselectYourAccounts: \"Изберете ги вашите сметки\",\n\t\tconnecting1Account: \"Поврзување на една сметка\",\n\t\tcantFindAnyAccount: \"Не се најдени сметки поврзани со овој Леџер. Ве молиме креирајте нова NEAR сметка \",\n\t\torConnectAnAnotherLedger: \"или поврзете друг Леџер.\",\n\t\tconnecting: \"Поврзување\",\n\t\tofAccounts: \"на сметки\",\n\t\tfailedToAutomatically: \"Неуспешно автоматско барање на ИД на сметката. Внесете го рачно:\",\n\t\toverviewTheListOfAuthorized: \"Преглед на листата на овластени сметки, завршете се најавата со кликнување на копчето подолу.\",\n\t\tfinish: \"Завршете\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"Треба да инсталирате\",\n\t\ttoContinueAfterInstalling: \"за да продолжите. По инсталирањето\",\n\t\trefreshThePage: \"Освежете ја страната.\",\n\t\topen: \"Отворете\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"Копирано на клипбордот\",\n\t\tfailedToCopy: \"Неуспешно копирање на клипборд\",\n\t\tscanWithYourMobile: \"Скенирајте со вашиот телефонски уред\",\n\t\tcopyToClipboard: \"Копирајте на клипборд\",\n\t\tpreferTheOfficial: \"Преферирајте официјален диалог на\",\n\t\topen: \"Отворете\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Хардверски новчаник\",\n\t\tbrowser: \"Новчаник на интернет прелистувач\",\n\t\tinjected: \"Екстензија за новчаник\",\n\t\tbridge: \"Bridge новчаник\",\n\t\tmobile: \"Мобилен новчаник\",\n\t\t\"instant-link\": \"Инстант паричник\"\n\t},\n\texportAccounts: {\n\t\tchooseAWallet: \"Одберете паричник\",\n\t\ttransferYourAccounts: \"Префрлете ги вашите кориснички сметки\",\n\t\tselectAWallet: \"Изберетен новчаник кој ги задоволува вашите баранња и ги поддржува вашите поврзани кориснички сметки.\",\n\t\tselectYourAccounts: \"Изберете ги вашите кориснички сметки\",\n\t\tafterDecide: \"Одкако ќе изберете новчаник, можете да изберете кои кориснички сметки сакате да ги префрлите.\",\n\t\tdisclaimer: \"Не можете да прфрлате кориснички сметки кои никогаш не биле надополнати или користени на NEAR.\",\n\t\twarning: \"не поддржува извезување на кориснички сметки во овој момент. Ве молиме изберете друг новчаник.\",\n\t\twalletTypes: {\n\t\t\thardware: \"Хардверски новчаник\",\n\t\t\tbrowser: \"Новчаник на интернет прелистувач\",\n\t\t\tinjected: \"Екстензија за новчаник\",\n\t\t\tbridge: \"Bridge новчаник\",\n\t\t\tmobile: \"Мобилен новчаник\"\n\t\t},\n\t\tselectAccounts: {\n\t\t\ttitle: \"Изберете ги корисничките сметки за да ги префрлите.\",\n\t\t\tbutton: \"Добијте лозинка\",\n\t\t\tdeselectAll: \"Отселектирајте се\",\n\t\t\tselectAll: \"Изберете се\",\n\t\t\tunavailable: \"Трансферот е недостапен\",\n\t\t\terror: \"Корисничката сметка не постои\",\n\t\t\twarningLedger: \"Потребна е поддршка од Леџер\",\n\t\t\tnoBalance: \"Сметката не е финансирана\"\n\t\t},\n\t\tgetPassphrase: {\n\t\t\ttitle: \"Копирајте ја привремената лозинка\",\n\t\t\tdesc: \"Ќе треба да ја внесете оваа лозинка кога ќе започнете да ги извезувате вашите сметки на друг новчаник.\",\n\t\t\tbutton: \"Продолжете\",\n\t\t\tlabel: \"Кликнете за да копирате\",\n\t\t\tcheckLabel: \"Ја копирав или запишав лозинката\"\n\t\t},\n\t\tcomplete: {\n\t\t\ttitle: \"Завршете го преносот\",\n\t\t\tdescOne: \"Сега ќе бидете пренасочени на избраниот новчаник за завршување на преносот.\",\n\t\t\tdescTwo: \"Откако ќе заврши увозот од избраниот новчаник, притиснете го копчето за да го завршите преносот.\",\n\t\t\tbutton: \"Завршете\"\n\t\t}\n\t}\n};\nvar mk = {\n\tmodal: modal$2\n};\n\nvar modal$1 = {\n\twallet: {\n\t\tconnectYourWallet: \"Povežite svojo denarnico!\",\n\t\twhatIsAWallet: \"Kaj je denarnica?\",\n\t\tsecureAndManage: \"Zavarujte in upravljajte svoja digitalna sredstva.\",\n\t\tsafelyStore: \"Varno shranjujte in prenašajte svoje kriptovalute in NFTje.\",\n\t\tlogInToAny: \"Prijavite se v katero koli aplikacijo na NEAR\",\n\t\tnoNeedToCreate: \"Ni vam treba ustvarjati novih računov. Povežite svojo denarnico in začnite!\",\n\t\tgetAWallet: \"Ustvarite denarnico\",\n\t\tuseAWallet: \"Uporabite denarnico, da bi zavarovali in upravljali s svoja NEAR digitalna sredstva, in se prijavite v katero koli aplikacijo ekosistema NEAR\",\n\t\tconnectionFailed: \"Povezava ni bila uspešna.\",\n\t\tconnectionSuccessful: \"Povezava je bila uspešna.\",\n\t\tconnected: \"Vaša denarnica je povezana.\",\n\t\tconnectingTo: \"Povezovanje z\",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"Potrdite povezavo v oknu razširitve\",\n\t\t\tbrowser: \"Po preusmeritvi potrdite povezavo v denarnici\",\n\t\t\thardware: \"Potrdite povezavo s hladno denarnico\",\n\t\t\tbridge: \"Potrdite povezavo v denarnici\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"Povežite se z Ledger\",\n\t\tmakeSureYourLedger: \"Prepričajte se, da je vaš Ledger varno povezan in da je aplikacija NEAR odprta v vaši napravi\",\n\t\t\"continue\": \"Nadaljuj\",\n\t\tspecifyHDPath: \"Določite HD pot\",\n\t\tenterYourPreferredHDPath: \"Vnesite želeno HD pot, nato poiščite vse aktivne račune.\",\n\t\tscan: \"Skenirajte\",\n\t\tretry: \"Poskusite znova\",\n\t\tledgerIsNotAvailable: \"Ledger ni na voljo\",\n\t\taccessDeniedToUseLedgerDevice: \"Dostop za uporabo naprave Ledger zavrnjen\",\n\t\tnoAccountsFound: \"Ni najdenih računov\",\n\t\tselectYourAccounts: \"Izberite Vaši računi\",\n\t\tconnecting1Account: \"Povezovanje enega računa\",\n\t\tcantFindAnyAccount: \"Ni mogoče najti nobenega računa, povezanega s tem Ledgerjem. Ustvarite nov NEAR račun \",\n\t\torConnectAnAnotherLedger: \"ali povežite drug Ledger..\",\n\t\tconnecting: \"Povezovanje\",\n\t\tofAccounts: \"računov\",\n\t\tfailedToAutomatically: \"ID-ja računa ni bilo mogoče samodejno najti. Zagotovite ga ročno:\",\n\t\toverviewTheListOfAuthorized: \"Oglejte si seznam pooblaščenih računov, dokončajte prijavo s klikom na spodnji gumb.\",\n\t\tfinish: \"Končajte\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"Morali ga boste namestiti\",\n\t\ttoContinueAfterInstalling: \"nadaljevati. Po namestitvi\",\n\t\trefreshThePage: \"Osvežite stran.\",\n\t\topen: \"Odprite\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"Kopirano v podložni mapi\",\n\t\tfailedToCopy: \"Kopiranje v podložni mapi ni uspelo\",\n\t\tscanWithYourMobile: \"Skenirajte s svojo mobilno napravo\",\n\t\tcopyToClipboard: \" Kopirajte v podložni mapi\",\n\t\tpreferTheOfficial: \"Preferirajte uradno pogovorno okno\",\n\t\topen: \"Odprite\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Hladna denarnica\",\n\t\tbrowser: \"Denarnica brskalnika\",\n\t\tinjected: \"Razširitev za denarnico\",\n\t\tbridge: \"Bridge denarnica\",\n\t\tmobile: \"Mobilna denarnica\",\n\t\t\"instant-link\": \"Takojšnja denarnica\"\n\t},\n\texportAccounts: {\n\t\tchooseAWallet: \"Izberite denarnico\",\n\t\ttransferYourAccounts: \"Prenesite svoje račune\",\n\t\tselectAWallet: \"Izberite denarnico, ki ustreza vašim potrebam in podpira vaše povezane račune.\",\n\t\tselectYourAccounts: \"Izberite vaši računi\",\n\t\tafterDecide: \"Ko se odločite za denarnico, lahko izberete, katere račune želite prenesti.\",\n\t\tdisclaimer: \"Ne boste mogli prenesti Računov, ki nikoli niso bili financirani ali uporabljeni na NEAR.\",\n\t\twarning: \"trenutno ne podpira izvoza računa. Izberite drugo denarnico\",\n\t\twalletTypes: {\n\t\t\thardware: \"Hladna denarnica\",\n\t\t\tbrowser: \"Denarnica brskalnika\",\n\t\t\tinjected: \"Razširitev za denarnico\",\n\t\t\tbridge: \"Bridge denarnica\",\n\t\t\tmobile: \"Mobilna denarnica\"\n\t\t},\n\t\tselectAccounts: {\n\t\t\ttitle: \"Izberite računi za prenos.\",\n\t\t\tbutton: \"Pridobite geslo\",\n\t\t\tdeselectAll: \"Prekliči izbiro vseh\",\n\t\t\tselectAll: \"Izberi vse\",\n\t\t\tunavailable: \"Prenos ni na voljo\",\n\t\t\terror: \"Račun ne obstaja\",\n\t\t\twarningLedger: \"Potrebna je podpora za Ledger\",\n\t\t\tnoBalance: \"Račun ni financiran\"\n\t\t},\n\t\tgetPassphrase: {\n\t\t\ttitle: \"Kopiraj začasno geslo\",\n\t\t\tdesc: \"To geslo boste morali vnesti, ko boste začeli izvažati svoje račune v drugo denarnico.\",\n\t\t\tbutton: \"Nadaljujte\",\n\t\t\tlabel: \"Kliknite za kopiranje\",\n\t\t\tcheckLabel: \"Geslo sem kopiral ali zapisal\"\n\t\t},\n\t\tcomplete: {\n\t\t\ttitle: \"Dokončajte prenos\",\n\t\t\tdescOne: \"Zdaj boste preusmerjeni v denarnico, ki ste jo izbrali za dokončanje prenosa.\",\n\t\t\tdescTwo: \"Ko je uvozni del postopka končan iz izbrane denarnice, pritisnite gumb za dokončanje postopka prenosa.\",\n\t\t\tbutton: \"Končajte\"\n\t\t}\n\t}\n};\nvar sl = {\n\tmodal: modal$1\n};\n\nvar modal = {\n\twallet: {\n\t\tconnectYourWallet: \"Повежите свој новчаник!\",\n\t\twhatIsAWallet: \"Шта је новчаник?\",\n\t\tsecureAndManage: \"Обезбедите и управљајте својом дигиталном имовином.\",\n\t\tsafelyStore: \"Безбедно чувајте и преносите своје криптовалуте и NFT.\",\n\t\tlogInToAny: \"Пријавите се на било коју апликацију NEAR\",\n\t\tnoNeedToCreate: \"Нема потребе да креирате нове налоге или акредитиве. Повежите новчаник и спремни стe!\",\n\t\tgetAWallet: \"Набавите новчаник\",\n\t\tuseAWallet: \"Користите новчаник да обезбедите и управљате својим NEAR средствима и да се пријавите у било коју апликацију NEAR без потребе за корисничким именима и лозинкама.\",\n\t\tconnectionFailed: \"Веза није успостављена.\",\n\t\tconnectionSuccessful: \"Веза је успела.\",\n\t\tconnected: \"Повезан.\",\n\t\tconnectingTo: \"Повезивање на\",\n\t\tconnectingMessage: {\n\t\t\tinjected: \"Потврдите везу у спољном прозору\",\n\t\t\tbrowser: \"Након преусмеравања, потврдите везу у новчанику\",\n\t\t\thardware: \"Потврдите везу са хладним новчаником\",\n\t\t\tbridge: \"Потврдите везу са новчаником\"\n\t\t}\n\t},\n\tledger: {\n\t\tconnectWithLedger: \"Повежите се са Ledger\",\n\t\tmakeSureYourLedger: \"Уверите се да је ваш Ledger безбедно повезан и да је апликација NEAR отворена на вашем уређају\",\n\t\t\"continue\": \"Настави\",\n\t\tspecifyHDPath: \"Наведите ХД путању\",\n\t\tenterYourPreferredHDPath: \"Унесите жељену жељену ХД путању, а затим скенирајте све активне налоге.\",\n\t\tscan: \"Скенирајте\",\n\t\tretry: \"Покушај поново\",\n\t\tledgerIsNotAvailable: \"Ledger није доступан.\",\n\t\taccessDeniedToUseLedgerDevice: \"Приступ је одбијен за коришћење Ledger уређаја\",\n\t\tnoAccountsFound: \"Наlози нису пронађени\",\n\t\tselectYourAccounts: \"Изаберите Ваш наlог\",\n\t\tconnecting1Account: \"Повезати 1 наlог\",\n\t\tcantFindAnyAccount: \"Није могуће пронаћи ниједан наlог повезан са овим Ledger-ом. Направите нови NEAR наlог\",\n\t\torConnectAnAnotherLedger: \"или повежите други Ledger.\",\n\t\tconnecting: \"Повезивање\",\n\t\tofAccounts: \"наlога\",\n\t\tfailedToAutomatically: \"Аутоматско проналажење ID-a наlога није успело. Наведите га ручно:\",\n\t\toverviewTheListOfAuthorized: \"Прегледајте листу овлашћених рачуна, завршите пријаву кликом на дугме испод.\",\n\t\tfinish: \"Заврши\"\n\t},\n\tinstall: {\n\t\tyoullNeedToInstall: \"Мораћете да инсталирате\",\n\t\ttoContinueAfterInstalling: \"за наставак. Након инсталирања\",\n\t\trefreshThePage: \"поново учитати страницу.\",\n\t\topen: \"Отвори\"\n\t},\n\tqr: {\n\t\tcopiedToClipboard: \"Копирано у међуспремник\",\n\t\tfailedToCopy: \"Копирање у међуспремник није успело\",\n\t\tscanWithYourMobile: \"Скенирајте помоћу мобилног уређаја\",\n\t\tcopyToClipboard: \" Копирај у међуспремник\",\n\t\tpreferTheOfficial: \"Преферирате званични дијалог од\",\n\t\topen: \"Отвори\"\n\t},\n\twalletTypes: {\n\t\thardware: \"Хардверски новчаник\",\n\t\tbrowser: \"Новчаник претраживача,\",\n\t\tinjected: \"Додатак за новчаник,\",\n\t\tbridge: \"Bridge новчаник\",\n\t\tmobile: \"Мобилни новчаник\",\n\t\t\"instant-link\": \"Инстант новчаник\"\n\t},\n\texportAccounts: {\n\t\tchooseAWallet: \"Изаберите новчаник\",\n\t\ttransferYourAccounts: \"Пренесите своје налоге\",\n\t\tselectAWallet: \"Изаберите новчаник који одговара вашим потребама и који подржава ваше повезане налоге.\",\n\t\tselectYourAccounts: \"Изаберите ваше налоге\",\n\t\tafterDecide: \"Након што се одлучите за новчаник, можете изабрати које налоге желите да пренесете.\",\n\t\tdisclaimer: \"Нећете моћи да пренесете налоге који никада нису били финансирани или коришћени на  NEAR.\",\n\t\twarning: \"тренутно не подржава извоз налога. Изаберите други новчаник.\",\n\t\twalletTypes: {\n\t\t\thardware: \"Хардверски новчаник\",\n\t\t\tbrowser: \"Новчаник претраживача,\",\n\t\t\tinjected: \"Додатак за новчаник,\",\n\t\t\tbridge: \"Bridge новчаник\",\n\t\t\tmobile: \"Мобилни новчаник\"\n\t\t},\n\t\tselectAccounts: {\n\t\t\ttitle: \"Изаберите налоге за пренос.\",\n\t\t\tbutton: \"Добијте приступну фразу\",\n\t\t\tdeselectAll: \"Поништите избор\",\n\t\t\tselectAll: \"Изаберите све\",\n\t\t\tunavailable: \"Трансфер није доступан\",\n\t\t\terror: \"Налог не постоји\",\n\t\t\twarningLedger: \"Потребна подршка за Ledger\",\n\t\t\tnoBalance: \"Налог није финансиран\"\n\t\t},\n\t\tgetPassphrase: {\n\t\t\ttitle: \"Копирај привремену лозинку\",\n\t\t\tdesc: \"Мораћете да унесете ову лозинку када почнете да извозите своје налоге у други новчаник.\",\n\t\t\tbutton: \"Наставите\",\n\t\t\tlabel: \"Кликните да бисте копирали\",\n\t\t\tcheckLabel: \"Копирао сам или записао лозинку\"\n\t\t},\n\t\tcomplete: {\n\t\t\ttitle: \"Довршите трансфер\",\n\t\t\tdescOne: \"Сада ћете бити преусмерени на новчаник који сте изабрали да завршите трансфер.\",\n\t\t\tdescTwo: \"Када се део процеса увоза заврши из изабраног новчаника, притисните дугме да завршите процес преноса.\",\n\t\t\tbutton: \"Завршите\"\n\t\t}\n\t}\n};\nvar sr = {\n\tmodal: modal\n};\n\nconst getLanguage = languageCode => {\n  switch (languageCode) {\n    case \"en\":\n      return en;\n    case \"es\":\n      return es;\n    case \"zh\":\n      return zh;\n    case \"bg\":\n      return bg;\n    case \"ko\":\n      return ko;\n    case \"vi\":\n      return vi;\n    case \"hi\":\n      return hi;\n    case \"ar\":\n      return ar;\n    case \"hr\":\n      return hr;\n    case \"mk\":\n      return mk;\n    case \"sl\":\n      return sl;\n    case \"sr\":\n      return sr;\n    default:\n      return en;\n  }\n};\nlet chosenLang;\nconst allowOnlyLanguage = langCode => {\n  chosenLang = langCode;\n};\n// (i.e en-CA returns just en)\nconst shortenLanguageCode = lang => {\n  return lang.indexOf(\"-\") !== -1 ? lang.split(\"-\")[0] : lang.split(\"_\")[0];\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst findObjectPropByStringPath = (obj, prop) => {\n  if (!obj) {\n    return \"\";\n  }\n  const _index = prop.indexOf(\".\");\n  if (_index > -1) {\n    const currentProp = prop.substring(0, _index);\n    const nextProp = prop.substring(_index + 1);\n    return findObjectPropByStringPath(obj[currentProp], nextProp);\n  }\n  return obj[prop];\n};\nconst translate = path => {\n  let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n  browserLang = browserLang || window.navigator.language;\n  const languageCode = shortenLanguageCode(chosenLang || browserLang);\n  const selectedLanguage = getLanguage(languageCode);\n  const text = findObjectPropByStringPath(selectedLanguage, path);\n  return text && typeof text === \"string\" ? text : path;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-wallet-selector+core@8.7.1_near-api-js@2.1.4/node_modules/@near-wallet-selector/core/index.js\n");

/***/ })

};
;