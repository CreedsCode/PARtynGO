"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@near-js+keystores-node@0.0.5";
exports.ids = ["vendor-chunks/@near-js+keystores-node@0.0.5"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@near-js+keystores-node@0.0.5/node_modules/@near-js/keystores-node/lib/index.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+keystores-node@0.0.5/node_modules/@near-js/keystores-node/lib/index.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UnencryptedFileSystemKeyStore = exports.readKeyFile = void 0;\nvar unencrypted_file_system_keystore_1 = __webpack_require__(/*! ./unencrypted_file_system_keystore */ \"(ssr)/./node_modules/.pnpm/@near-js+keystores-node@0.0.5/node_modules/@near-js/keystores-node/lib/unencrypted_file_system_keystore.js\");\nObject.defineProperty(exports, \"readKeyFile\", ({ enumerable: true, get: function () { return unencrypted_file_system_keystore_1.readKeyFile; } }));\nObject.defineProperty(exports, \"UnencryptedFileSystemKeyStore\", ({ enumerable: true, get: function () { return unencrypted_file_system_keystore_1.UnencryptedFileSystemKeyStore; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5lYXItanMra2V5c3RvcmVzLW5vZGVAMC4wLjUvbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2tleXN0b3Jlcy1ub2RlL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQ0FBcUMsR0FBRyxtQkFBbUI7QUFDM0QseUNBQXlDLG1CQUFPLENBQUMsaUxBQW9DO0FBQ3JGLCtDQUE4QyxFQUFFLHFDQUFxQywwREFBMEQsRUFBQztBQUNoSixpRUFBZ0UsRUFBRSxxQ0FBcUMsNEVBQTRFLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWxsby1uZWFyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BuZWFyLWpzK2tleXN0b3Jlcy1ub2RlQDAuMC41L25vZGVfbW9kdWxlcy9AbmVhci1qcy9rZXlzdG9yZXMtbm9kZS9saWIvaW5kZXguanM/MWMxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVW5lbmNyeXB0ZWRGaWxlU3lzdGVtS2V5U3RvcmUgPSBleHBvcnRzLnJlYWRLZXlGaWxlID0gdm9pZCAwO1xudmFyIHVuZW5jcnlwdGVkX2ZpbGVfc3lzdGVtX2tleXN0b3JlXzEgPSByZXF1aXJlKFwiLi91bmVuY3J5cHRlZF9maWxlX3N5c3RlbV9rZXlzdG9yZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlYWRLZXlGaWxlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmVuY3J5cHRlZF9maWxlX3N5c3RlbV9rZXlzdG9yZV8xLnJlYWRLZXlGaWxlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVW5lbmNyeXB0ZWRGaWxlU3lzdGVtS2V5U3RvcmVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZW5jcnlwdGVkX2ZpbGVfc3lzdGVtX2tleXN0b3JlXzEuVW5lbmNyeXB0ZWRGaWxlU3lzdGVtS2V5U3RvcmU7IH0gfSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+keystores-node@0.0.5/node_modules/@near-js/keystores-node/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@near-js+keystores-node@0.0.5/node_modules/@near-js/keystores-node/lib/unencrypted_file_system_keystore.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@near-js+keystores-node@0.0.5/node_modules/@near-js/keystores-node/lib/unencrypted_file_system_keystore.js ***!
  \***************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UnencryptedFileSystemKeyStore = exports.readKeyFile = void 0;\nconst crypto_1 = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/.pnpm/@near-js+crypto@0.0.5/node_modules/@near-js/crypto/lib/index.js\");\nconst keystores_1 = __webpack_require__(/*! @near-js/keystores */ \"(ssr)/./node_modules/.pnpm/@near-js+keystores@0.0.5/node_modules/@near-js/keystores/lib/index.js\");\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst util_1 = __webpack_require__(/*! util */ \"util\");\n/* remove for versions not referenced by near-api-js */\nconst promisify = (fn) => {\n    if (!fn) {\n        return () => {\n            throw new Error('Trying to use unimplemented function. `fs` module not available in web build?');\n        };\n    }\n    return (0, util_1.promisify)(fn);\n};\nconst exists = promisify(fs_1.default.exists);\nconst readFile = promisify(fs_1.default.readFile);\nconst writeFile = promisify(fs_1.default.writeFile);\nconst unlink = promisify(fs_1.default.unlink);\nconst readdir = promisify(fs_1.default.readdir);\nconst mkdir = promisify(fs_1.default.mkdir);\n/** @hidden */\nfunction loadJsonFile(filename) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const content = yield readFile(filename);\n        return JSON.parse(content.toString());\n    });\n}\nfunction ensureDir(dir) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield mkdir(dir, { recursive: true });\n        }\n        catch (err) {\n            if (err.code !== 'EEXIST') {\n                throw err;\n            }\n        }\n    });\n}\n/** @hidden */\nfunction readKeyFile(filename) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const accountInfo = yield loadJsonFile(filename);\n        // The private key might be in private_key or secret_key field.\n        let privateKey = accountInfo.private_key;\n        if (!privateKey && accountInfo.secret_key) {\n            privateKey = accountInfo.secret_key;\n        }\n        return [accountInfo.account_id, crypto_1.KeyPair.fromString(privateKey)];\n    });\n}\nexports.readKeyFile = readKeyFile;\n/**\n * This class is used to store keys on the file system.\n *\n * @see [https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store](https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store)\n * @example\n * ```js\n * const { homedir } = require('os');\n * const { connect, keyStores } = require('near-api-js');\n *\n * const keyStore = new keyStores.UnencryptedFileSystemKeyStore(`${homedir()}/.near-credentials`);\n * const config = {\n *   keyStore, // instance of UnencryptedFileSystemKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */\nclass UnencryptedFileSystemKeyStore extends keystores_1.KeyStore {\n    /**\n     * @param keyDir base directory for key storage. Keys will be stored in `keyDir/networkId/accountId.json`\n     */\n    constructor(keyDir) {\n        super();\n        this.keyDir = path_1.default.resolve(keyDir);\n    }\n    /**\n     * Store a {@link utils/key_pair!KeyPair} in an unencrypted file\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */\n    setKey(networkId, accountId, keyPair) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield ensureDir(`${this.keyDir}/${networkId}`);\n            const content = { account_id: accountId, public_key: keyPair.getPublicKey().toString(), private_key: keyPair.toString() };\n            yield writeFile(this.getKeyFilePath(networkId, accountId), JSON.stringify(content), { mode: 0o600 });\n        });\n    }\n    /**\n     * Gets a {@link utils/key_pair!KeyPair} from an unencrypted file\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n    getKey(networkId, accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Find key / account id.\n            if (!(yield exists(this.getKeyFilePath(networkId, accountId)))) {\n                return null;\n            }\n            const accountKeyPair = yield readKeyFile(this.getKeyFilePath(networkId, accountId));\n            return accountKeyPair[1];\n        });\n    }\n    /**\n     * Deletes an unencrypted file holding a {@link utils/key_pair!KeyPair}\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n    removeKey(networkId, accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (yield exists(this.getKeyFilePath(networkId, accountId))) {\n                yield unlink(this.getKeyFilePath(networkId, accountId));\n            }\n        });\n    }\n    /**\n     * Deletes all unencrypted files from the `keyDir` path.\n     */\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (const network of yield this.getNetworks()) {\n                for (const account of yield this.getAccounts(network)) {\n                    yield this.removeKey(network, account);\n                }\n            }\n        });\n    }\n    /** @hidden */\n    getKeyFilePath(networkId, accountId) {\n        return `${this.keyDir}/${networkId}/${accountId}.json`;\n    }\n    /**\n     * Get the network(s) from files in `keyDir`\n     * @returns {Promise<string[]>}\n     */\n    getNetworks() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const files = yield readdir(this.keyDir);\n            const result = new Array();\n            files.forEach((item) => {\n                result.push(item);\n            });\n            return result;\n        });\n    }\n    /**\n     * Gets the account(s) files in `keyDir/networkId`\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     */\n    getAccounts(networkId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!(yield exists(`${this.keyDir}/${networkId}`))) {\n                return [];\n            }\n            const files = yield readdir(`${this.keyDir}/${networkId}`);\n            return files\n                .filter(file => file.endsWith('.json'))\n                .map(file => file.replace(/.json$/, ''));\n        });\n    }\n    /** @hidden */\n    toString() {\n        return `UnencryptedFileSystemKeyStore(${this.keyDir})`;\n    }\n}\nexports.UnencryptedFileSystemKeyStore = UnencryptedFileSystemKeyStore;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@near-js+keystores-node@0.0.5/node_modules/@near-js/keystores-node/lib/unencrypted_file_system_keystore.js\n");

/***/ })

};
;